<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Better Thinking</title>
    <link>https://ne-choi.github.io/</link>
    
    <atom:link href="https://ne-choi.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>The load to be a data scientist</description>
    <pubDate>Mon, 08 Feb 2021 12:55:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hexo 블로그 1. 포스트 작성과 서버 배포</title>
      <link>https://ne-choi.github.io/2021/02/01/Tips/Blog/hexo-post-and-deploy/</link>
      <guid>https://ne-choi.github.io/2021/02/01/Tips/Blog/hexo-post-and-deploy/</guid>
      <pubDate>Mon, 01 Feb 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Hexo-블로그-운영-기초&quot;&gt;&lt;a href=&quot;#Hexo-블로그-운영-기초&quot; class=&quot;headerlink&quot; title=&quot;Hexo 블로그 운영 기초&quot;&gt;&lt;/a&gt;Hexo 블로그 운영 기초&lt;/h1&gt;&lt;p&gt;hexo 블로그를 만들고 운영하기까지 수</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Hexo-블로그-운영-기초"><a href="#Hexo-블로그-운영-기초" class="headerlink" title="Hexo 블로그 운영 기초"></a>Hexo 블로그 운영 기초</h1><p>hexo 블로그를 만들고 운영하기까지 수많은 분의 블로그 포스팅을 읽었습니다. 저 또한 도움 되는 포스팅을 작성하기 위해 글을 씁니다. 이번 포스트에는 hexo 블로그 운영 초보자가 읽으면 좋을 <strong>블로그에 글 올리는 방법</strong>을 담았습니다. </p><h2 id="1-블로그-글-올리기"><a href="#1-블로그-글-올리기" class="headerlink" title="1. 블로그 글 올리기"></a>1. 블로그 글 올리기</h2><h3 id="1-Hexo-마크다운-파일-생성"><a href="#1-Hexo-마크다운-파일-생성" class="headerlink" title="1) Hexo 마크다운 파일 생성"></a>1) Hexo 마크다운 파일 생성</h3><p>hexo는 <strong>마크다운(.md) 파일</strong>을 이용하여 포스팅을 작성합니다. 저는 보통 RStudio나 Jupyter Notebook을 이용해 작업한 결과물을 블로그에 올리기 때문에, 해당 파일 확장자를 바꿔서 저장하는 방식을 사용하고 있는데요. 지금처럼 아예 hexo blog에만 올릴 포스트를 만들기 위해서는 md 파일을 생성해야 합니다. cmd 창을 이용해서 마크다운 파일을 생성해보겠습니다.</p><h4 id="①-cmd-창-열기"><a href="#①-cmd-창-열기" class="headerlink" title="① cmd 창 열기"></a>① cmd 창 열기</h4><p><img src="/images/Tips/Blog/img1.png">  </p><ul><li>윈도우 기준<br>키보드에서 window 키를 누르거나, 화면 왼쪽 하단의 window 아이콘을 누르면 윈도우 창이 뜹니다. 여기서 바로 ‘c’를 입력하면 검색할 수 있는데요. 위 사진과 같이 명령 프롬프트를 검색 후 실행해줍니다. window 보안 사항이 많아서 저는 항상 <strong>관리자 권한으로 실행</strong>을 눌러 사용합니다.  </li></ul><h4 id="②-hexo-blog-폴더-경로-잡기"><a href="#②-hexo-blog-폴더-경로-잡기" class="headerlink" title="② hexo blog 폴더 경로 잡기"></a>② hexo blog 폴더 경로 잡기</h4><p>관리자 권한으로 실행하고 나서, 내 hexo 블로그가 있는 폴더로 경로를 잡아줘야 합니다. <code>cd</code>를 이용해서 쉽게 작업할 수 있습니다. 뒤로 가기를 원하는 경우에는 <code>cd ..</code>을 입력하면 됩니다.</p><pre class="line-numbers language-none"><code class="language-none">C:\&gt;cd UsersC:\Users&gt;cd naeunC:\Users\naeun&gt;cd DocumentsC:\Users\naeun\Documents&gt;cd BigdataC:\Users\naeun\Documents\Bigdata&gt;cd blogC:\Users\naeun\Documents\Bigdata\blog&gt;cd myblog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-hexo-new-post-‘파일명’-실행"><a href="#③-hexo-new-post-‘파일명’-실행" class="headerlink" title="③ hexo new post ‘파일명’ 실행"></a>③ hexo new post ‘파일명’ 실행</h4><pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>위 명령어가 새로운 파일을 만드는 기본 명령어입니다. 블로그를 주로 사용하는 분들은 draft(초안)와 page도 유용하게 사용하시는데, 저는 간단하게 post만 사용하고 있습니다. default 값은 post로 설정되어 있는데, 바꾸고 싶은 경우에는 <code>_config.yml</code> 파일을 열고 <code>default_layout</code>을 변경하면 됩니다.</p><ul><li>layout: 레이아웃 종류 (default: post)<ul><li>post: 새로운 포스팅을 작성하기 위해 생성</li><li>page: 해당 경로로 접근해야 볼 수 있는 페이지를 만들기 위해 생성 </li><li>draft: 포스트를 바로 작성하지 않고 초안 잡을 때 생성</li></ul></li></ul><table><thead><tr><th align="center">layout</th><th align="left">route</th></tr></thead><tbody><tr><td align="center">post</td><td align="left">source/_posts</td></tr><tr><td align="center">page</td><td align="left">source</td></tr><tr><td align="center">draft</td><td align="left">source/_drafts</td></tr></tbody></table><ul><li>title: 생성할 파일 제목<br>파일 제목을 입력해주고 아래와 같이 명령어를 입력하면 <code>sorce/_post</code> 경로에 md파일이 생성됩니다.</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt; C:\Users\naeun\Documents\Bigdata\blog\myblog&gt;hexo new post &#39;update&#39;# 위 명령어를 입력하면 아래와 같이 나옴INFO  Validating configInferno is in development mode.Inferno is in development mode.INFO  Created: ~\Documents\Bigdata\blog\myblog\source\_posts\update.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-마크다운-글쓰기-기본"><a href="#2-마크다운-글쓰기-기본" class="headerlink" title="2. 마크다운 글쓰기 기본"></a>2. 마크다운 글쓰기 기본</h3><h4 id="①-Front-matter"><a href="#①-Front-matter" class="headerlink" title="① Front-matter"></a>① Front-matter</h4><p>md 파일을 만들면, <code>title / author / date</code>이 <code>---</code>를 기준으로 본문과 구분되어 있는 것을 볼 수 있습니다. 이 부분이 Front-matter로 해당 파일의 정보가 입력된 부분입니다.</p><p>기본적으로 cmd 창에서 입력한 title, 블로그 사용자 이름, 오늘 날짜가 적혀 있지만, 임의로 수정할 수 있습니다.</p><pre class="line-numbers language-none"><code class="language-none">---title: hexo 글 올리기, 버전 업데이트 하기author: &quot;ne-choi&quot;date: &#39;2020-02-01&#39;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>여기에 추가로, Front-matter에서 카테고리와 태그를 한 번에 생성할 수 있습니다. 카테고리는 상단에 적은 카테고리 안에 하단 카테고리가 포함되는 형태입니다. 기존에 있던 카테고리를 적으면 기존 카테고리 내에 업로드 되고, 새로운 카테고리를 적으면 자동으로 블로그에 카테고리가 추가됩니다. 태그는 순서와 상관 없이 개별 태그로 만들어집니다.</p><pre class="line-numbers language-none"><code class="language-none">---title: hexo 글 올리기, 버전 업데이트 하기author: &quot;ne-choi&quot;date: &#39;2021-02-01&#39;categories:  - Tips  - Blogtags:  - &quot;blog&quot;  - &quot;hexo&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 파일을 배포하면, Tips &gt; Blog 카테고리가 생성되고 해당 카테고리 내에 파일이 업로드 됩니다. 카테고리와 태그를 만드는 방법이 여러 개 있는 것 같은데, 저는 이 방법이 제일 쉽고 편해서 이렇게 사용하고 있습니다. </p><h3 id="3-서버에-포스트-배포하기"><a href="#3-서버에-포스트-배포하기" class="headerlink" title="3. 서버에 포스트 배포하기"></a>3. 서버에 포스트 배포하기</h3><h4 id="①-hexo-generate-정적-파일-생성"><a href="#①-hexo-generate-정적-파일-생성" class="headerlink" title="① hexo generate (정적 파일 생성)"></a>① hexo generate (정적 파일 생성)</h4><p>새로 저장한 내용을 서버에 배포하기 위해 최신 버전으로 만들어주는 명령어입니다. </p><pre class="line-numbers language-none"><code class="language-none">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②-hexo-server-로컬-서버"><a href="#②-hexo-server-로컬-서버" class="headerlink" title="② hexo server (로컬 서버)"></a>② hexo server (로컬 서버)</h4><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>실제로 파일을 올리기 전에, 내가 만든 파일이 블로그에서 어떻게 보일지 확인하기 위해 사용하는 로컬 서버입니다. 이 작업은 거쳐도 되고 안 거쳐도 되지만, 깔끔하게 한 번에 배포하기 위해서는 미리보기를 해주는 게 좋겠죠?</p><pre class="line-numbers language-none"><code class="language-none">&gt; C:\Users\naeun\Documents\Bigdata\blog\myblog&gt;hexo server# 위 명령어 실행하면 아래와 같이 나옴INFO  Validating configInferno is in development mode.Inferno is in development mode.INFO  Start processingINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.(node:17420) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)(node:17420) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency(node:17420) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency(node:17420) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency(node:17420) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency(node:17420) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>확인 url: <a href="http://localhost:4000/">http://localhost:4000/</a></li><li>임시 서버 실행 취소 방법: <code>Ctrl+c</code> 입력 후, <code>y</code> 입력  </li></ul><h4 id="③-hexo-deploy-배포"><a href="#③-hexo-deploy-배포" class="headerlink" title="③ hexo deploy (배포)"></a>③ hexo deploy (배포)</h4><p>실제 블로그에 배포하기 위해 사용하는 명령어입니다.</p><pre class="line-numbers language-none"><code class="language-none">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="④-hexo-d-g"><a href="#④-hexo-d-g" class="headerlink" title="④ hexo d -g"></a>④ hexo d -g</h4><p>generate와 deploy를 한 번에 하는 명령어가 있는데요. 아래의 4가지 명령어 모두 같은 작업을 합니다. 그렇지만, 저는 굳이 사용하지는 않아요.</p><pre><code>hexo deploy --generatehexo generate --deployhexo d -ghexo g -d</code></pre><br><p>이렇게 해서 <strong>hexo 블로그 포스트 작성, 서버에 배포하는 방법</strong> 포스팅을 마치겠습니다. 가장 기본 정보만 담았으니, beginner가 참고하면 딱 좋을 거예요.</p>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Tips/">Tips</category>
      
      <category domain="https://ne-choi.github.io/categories/Tips/Blog/">Blog</category>
      
      
      <category domain="https://ne-choi.github.io/tags/blog/">blog</category>
      
      <category domain="https://ne-choi.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://ne-choi.github.io/2021/02/01/Tips/Blog/hexo-post-and-deploy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ⅱ. 컴퓨팅 사고 2부</title>
      <link>https://ne-choi.github.io/2021/01/28/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A4.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%202%EB%B6%80/</link>
      <guid>https://ne-choi.github.io/2021/01/28/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A4.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%202%EB%B6%80/</guid>
      <pubDate>Thu, 28 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 컴퓨팅 사고 Ⅱ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅴ-컴퓨팅-사고-Ⅴ&quot;&gt;&lt;a href=&quot;#Ⅴ-컴퓨팅-사고-Ⅴ&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 컴퓨팅 사고 Ⅱ 과정입니다. </li></ul><h1 id="Ⅴ-컴퓨팅-사고-Ⅴ"><a href="#Ⅴ-컴퓨팅-사고-Ⅴ" class="headerlink" title="Ⅴ. 컴퓨팅 사고 Ⅴ"></a>Ⅴ. 컴퓨팅 사고 Ⅴ</h1><h2 id="1-순서열-계산-자료의-‘더미’"><a href="#1-순서열-계산-자료의-‘더미’" class="headerlink" title="1. 순서열- 계산 자료의 ‘더미’"></a>1. 순서열- 계산 자료의 ‘더미’</h2><h3 id="계산-자료-같은-꼴의-더미"><a href="#계산-자료-같은-꼴의-더미" class="headerlink" title="계산 자료 = 같은 꼴의 더미"></a>계산 자료 = 같은 꼴의 더미</h3><ul><li>같은 꼴의 더미로 만들어주어 컴퓨터가 계산하게 함</li></ul><h3 id="순서열"><a href="#순서열" class="headerlink" title="순서열"></a>순서열</h3><ul><li>같은 꼴의 더미를 표현<ul><li>[계산자료1, 계싼자료2, …, 계산자료n]</li></ul></li><li>예<ul><li>[]</li><li>[1]</li><li>[1,2,2,3,3,3]</li><li>[‘월요일’, ‘화요일’, ‘수요일’]</li></ul></li></ul><h3 id="다음-유도하기로-더미-해석하기"><a href="#다음-유도하기로-더미-해석하기" class="headerlink" title="다음 유도하기로 더미 해석하기"></a>다음 유도하기로 더미 해석하기</h3><ul><li>최초 빈 더미<ul><li>[]</li></ul></li><li>직전 더미에 원소 하나 추가<ul><li>[1,2,3] + [100] = [100,1,2,3] (맨 앞에 덧붙여짐)</li></ul></li></ul><h3 id="다음-유도하기에-맞춰-순서열-만들기"><a href="#다음-유도하기에-맞춰-순서열-만들기" class="headerlink" title="다음 유도하기에 맞춰 순서열 만들기"></a>다음 유도하기에 맞춰 순서열 만들기</h3><ul><li>해당 기능을 바로 쓸 수 없고, 다른 기능을 이용해 표현</li><li>빈 순서열<ul><li>[]</li></ul></li><li>작은 순서열 맨 앞에 원소 하나를 덧붙여 얻은 순서열<ul><li>[원소] + 작은 순서열<ul><li>[1] == [1] + []</li><li>[2,3] == [2] + [3]</li><li>[1,2,3] == [1] + [2,3]</li></ul></li></ul></li></ul><h3 id="순서열과-여러곱"><a href="#순서열과-여러곱" class="headerlink" title="순서열과 여러곱"></a>순서열과 여러곱</h3><ul><li>여러곱<ul><li>원소 개수가 고정</li><li>원소를 추가하면 새로운 꼴의 여러곱이 나옴<ul><li>서울 그리고 대전</li><li>서울 그리고 대전 그리고 부산</li></ul></li></ul></li><li>순서열<ul><li>원소가 몇 개 포함될지 미정</li><li>원소를 추가해도 종류가 달라지지 않음<ul><li>서울, 대전 더미</li><li>서울, 대전, 부산 더미</li></ul></li></ul></li></ul><h3 id="Python-언어에서-여러합-원소-더미"><a href="#Python-언어에서-여러합-원소-더미" class="headerlink" title="Python 언어에서 여러합 원소 더미"></a>Python 언어에서 여러합 원소 더미</h3><ul><li>pythoh에서 여러합을 바로 나타낼 수 없음</li><li>예: 이름 또는 생년월일 더미<ul><li>이름 홍길동, 생년월일 1981년 9월 18일 더미</li><li>[(‘이름’,’홍길동’),(‘생년월일’,(1981,9,18))]</li><li>같은 꼴의 더미를 표현하는 순서열도 실제 원소 꼴은 다를 수 있음</li></ul></li></ul><h3 id="순서열을-쓸-수-있는-곳"><a href="#순서열을-쓸-수-있는-곳" class="headerlink" title="순서열을 쓸 수 있는 곳"></a>순서열을 쓸 수 있는 곳</h3><ul><li>기본 자료가 나올 수 있는 곳 전부<ul><li>예: 여러곱 원소, 순서열 원소</li></ul></li></ul><h3 id="해석"><a href="#해석" class="headerlink" title="해석"></a>해석</h3><ul><li>원소 두 개 여러곱 = 대응 관계<ul><li>대응 관계 해석<ul><li>(계산자료1, 계산자료2) ⇔ 계산자료1은 계산자료2에 대응된다,</li><li>(‘인천’, 40) ⇔ 인천은 40km에 대응된다. / 인천 특징은 40km이다.</li><li>(‘서울’, [(‘인천’,40),(‘대전’,163),(‘강릉’,237)])</li><li>⇔ 서울 특징으로 인천은 40km에 대응되고 대전은 163km에 대응되고 강릉은 237km에 대응된다.</li></ul></li></ul></li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li>계산 자료<ul><li>기본 자료: 정수, 논리값, 문자열</li><li>여러곱: - 그리고 -, -에 대응된다</li><li>여러합: - 또는 -</li><li>순서열: - 더미</li></ul></li></ul><h2 id="2-다음-유도하기로-계산-자료-만들기"><a href="#2-다음-유도하기로-계산-자료-만들기" class="headerlink" title="2. 다음 유도하기로 계산 자료 만들기"></a>2. 다음 유도하기로 계산 자료 만들기</h2><h3 id="다음-유도하기와-여러합"><a href="#다음-유도하기와-여러합" class="headerlink" title="다음 유도하기와 여러합"></a>다음 유도하기와 여러합</h3><ul><li>다음 유도하기에서 계산 자료<ul><li>‘최초 경우’ 또는(여러합) ‘작은 것으로부터 더 큰 것을 이끌어 내는 경우’<ul><li>여러합 원소 = (종류, 내용)</li><li>Python 언어에서 만들어 낼 수 있음</li></ul></li></ul></li></ul><h3 id="계산-자료-조합하기"><a href="#계산-자료-조합하기" class="headerlink" title="계산 자료 조합하기"></a>계산 자료 조합하기</h3><ul><li>기본 자료: 정수, 논리값, 문자열</li><li>여러곱: - 그리고 -, -에 대응된다</li><li>여러합: - 또는 -</li><li>순서열: - 더미</li><li><ul><li>다음 유도하기로 정의하기</li></ul></li></ul><h1 id="Ⅵ-컴퓨팅-사고-Ⅵ"><a href="#Ⅵ-컴퓨팅-사고-Ⅵ" class="headerlink" title="Ⅵ. 컴퓨팅 사고 Ⅵ"></a>Ⅵ. 컴퓨팅 사고 Ⅵ</h1><h2 id="1-연산"><a href="#1-연산" class="headerlink" title="1. 연산"></a>1. 연산</h2><h3 id="계산-무엇-어떻게"><a href="#계산-무엇-어떻게" class="headerlink" title="계산 = 무엇 + 어떻게"></a>계산 = 무엇 + 어떻게</h3><ul><li>계산 = 무엇(계산 대상) + 어떻게(계산 과정)<ul><li>계산 대상: 알맹이 요약하기, 계산 자료</li><li>계산 과정: 연산, 명령</li></ul></li></ul><h3 id="컴퓨터-암산"><a href="#컴퓨터-암산" class="headerlink" title="컴퓨터 암산"></a>컴퓨터 암산</h3><ul><li>계산 자료 처리하여 계산 자료 만들기<ul><li>정수 1729와 91을 더한다</li><li>정수 1729 → “더한다” ← 정수 91</li><li>정수 1729(목적어) = 1729(피연산자)</li><li>“더한다”(동사) = +(연산자)</li></ul></li></ul><h3 id="연산자-종류"><a href="#연산자-종류" class="headerlink" title="연산자 종류"></a>연산자 종류</h3><ul><li>단항 연산자<ul><li>&lt;단항 연산자&gt;&lt;피연산자&gt;</li><li><ul><li>1729</li></ul></li></ul></li><li>이항 연산자<ul><li>&lt;피연산자1&gt;&lt;이항 연산자&gt;&lt;피연산자2&gt;</li><li>1729 + 91</li></ul></li><li>고유 문법이 있는 연산자</li></ul><h3 id="Python-언어-연산자"><a href="#Python-언어-연산자" class="headerlink" title="Python 언어 연산자"></a>Python 언어 연산자</h3><ul><li>정수 연산자<ul><li>이항 연산자: 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지 지수승</li><li>단항 연산자: 부호 그대로 두기 +, 부호 바꾸기 -</li></ul></li><li>논리값 연산자<ul><li>이항 연산자: 논리곱 and, 논리합 or</li><li>단항 연산자: 논리 부정 not</li></ul></li><li>문자열 연산자<ul><li>이항 연산자 | 잇기 +</li></ul></li></ul><h2 id="2-연산식"><a href="#2-연산식" class="headerlink" title="2. 연산식"></a>2. 연산식</h2><h3 id="연산식"><a href="#연산식" class="headerlink" title="연산식"></a>연산식</h3><ul><li>연산을 표현하는 프로그램</li></ul><h3 id="Python-언어-연산자-우선-순위"><a href="#Python-언어-연산자-우선-순위" class="headerlink" title="Python 언어 연산자 우선 순위"></a>Python 언어 연산자 우선 순위</h3><ul><li><p>우선 순위: 연산자</p><ul><li>지수승 **</li><li>부호 그대로 두기 +, 부호 바꾸기 -</li><li>곱셈 *, 나눗셈 /, 나머지 %</li><li>덧셈 +, 뺄셈 -, 문자열 잇기 +</li><li>논리 부정 not</li><li>논리곱 and</li><li>논리합 or</li></ul></li><li><p>논리값 계산하는 이항 연산자</p><ul><li>왼쪽으로 결합</li><li>같은지 판별<ul><li>==: 피연산자가 똑같으면 True 계산</li><li>!=: 피연산자가 서로 다르면 True 계산</li></ul></li><li>대소 판별<ul><li>수학에서와 의미 같음</li><li>정수, 논리값, 문자열 비교</li></ul></li></ul></li></ul><h3 id="비교-연산자와-논리-연산자-결합하기"><a href="#비교-연산자와-논리-연산자-결합하기" class="headerlink" title="비교 연산자와 논리 연산자 결합하기"></a>비교 연산자와 논리 연산자 결합하기</h3><ul><li>비교 연산자 우선 순위<ul><li>논리 연산자보다 높음</li><li>그 외 연산자보다는 낮음</li></ul></li><li>괄호를 쓰지 않아도 괜찮을 때가 많음</li></ul><h1 id="Ⅶ-컴퓨팅-사고-Ⅶ"><a href="#Ⅶ-컴퓨팅-사고-Ⅶ" class="headerlink" title="Ⅶ. 컴퓨팅 사고 Ⅶ"></a>Ⅶ. 컴퓨팅 사고 Ⅶ</h1><h2 id="1-상수-컴퓨터-쪽지"><a href="#1-상수-컴퓨터-쪽지" class="headerlink" title="1. 상수- 컴퓨터 쪽지"></a>1. 상수- 컴퓨터 쪽지</h2><ul><li>이름이 있음</li><li>다시 덮어 쓸 수 있음<ul><li>항상 같은 값만 읽음</li><li>읽을 때 외부와 소통하지 않음</li><li>연산</li></ul></li><li>버리는 과정은 따로 없음</li></ul><h3 id="Python-언어에서-상수"><a href="#Python-언어에서-상수" class="headerlink" title="Python 언어에서 상수"></a>Python 언어에서 상수</h3><ul><li>변수의 특수한 경우로 흉내냄<ul><li>이름 = 연산식</li></ul></li><li>상수 이름<ul><li>영어 알파벳, 숫자, 특수 문자 _ 등을 조합</li><li>첫 글자는 숫자가 될 수 없음</li><li>컴퓨팅 환경에 따라 한글을 쓸 수 있음</li></ul></li><li>상수 이름을 잘 정하는 것이 중요함</li></ul><h3 id="어떤-계산할지-판단하기"><a href="#어떤-계산할지-판단하기" class="headerlink" title="어떤 계산할지 판단하기"></a>어떤 계산할지 판단하기</h3><ul><li>다음 유도하기<ul><li><em>만약</em> 쪽지에 적힌 수가 0<em>이면</em> 합으로 0을 계산하고 <em>아니면</em> 쪽지에 적힌 수의 직전 수까지 합을 구한 뒤 쪽지에 적힌 수를 다시 더한다.</li></ul></li><li>쪼개 풀어 합치기<ul><li><em>만약</em> 생활기록부가 하나만 남았다<em>면</em> 남은 생활기록부에서 성적을 구하고 <em>아니면</em> 생활기록부 더미를 둘로 쪼개서 각 더미에서 성적 합을 구한 뒤 더한다.</li></ul></li></ul><h3 id="Python-언어-여러곱-연산자"><a href="#Python-언어-여러곱-연산자" class="headerlink" title="Python 언어 여러곱 연산자"></a>Python 언어 여러곱 연산자</h3><ul><li><p>여러곱으로부터 원소를 뽑아 냄</p><ul><li>여러곱 연산식[정수 연산식]</li></ul></li><li><p>여러곱 연산자: ‘그리고’ 의미에 맞게 빠뜨림 없이</p><ul><li>그리고의 의미에 맞게 작동</li><li>그리고로 엮은 계산 자료를 빠뜨림 없이 처리</li></ul></li></ul><h2 id="2-여러합-연산자"><a href="#2-여러합-연산자" class="headerlink" title="2. 여러합 연산자"></a>2. 여러합 연산자</h2><h3 id="여러합-연산자"><a href="#여러합-연산자" class="headerlink" title="여러합 연산자"></a>여러합 연산자</h3><ul><li>‘또는’의 의미에 맞게 빠뜨림 없이<ul><li>또는의 의미에 맞게 작동</li><li>또는으로 정의한 여러합 원소를 빠뜨림 없이 처리</li></ul></li></ul><h1 id="Ⅷ-순퓨팅-사고Ⅷ"><a href="#Ⅷ-순퓨팅-사고Ⅷ" class="headerlink" title="Ⅷ. 순퓨팅 사고Ⅷ"></a>Ⅷ. 순퓨팅 사고Ⅷ</h1><h2 id="1-순서열-연산자"><a href="#1-순서열-연산자" class="headerlink" title="1. 순서열 연산자"></a>1. 순서열 연산자</h2><h3 id="순서열-연산자"><a href="#순서열-연산자" class="headerlink" title="순서열 연산자"></a>순서열 연산자</h3><ul><li>‘더미’의 의미에 맞게 빠뜨림 없이<ul><li>‘더미’의 의미에 맞게 작동</li><li>‘더미’로 정의한 순서열 원소를 빠뜨림 없이 처리</li></ul></li></ul><h3 id="순서열-연산자-설계-검증"><a href="#순서열-연산자-설계-검증" class="headerlink" title="순서열 연산자 설계 검증"></a>순서열 연산자 설계 검증</h3><ol><li>순서열을 만든 직후, 원소나 원소 더미를 뽑아내어 검사  </li><li>내용을 모르는 순서열을 받아서 복제할 수 있는지 검사</li></ol><h3 id="순서열-연산자-설계"><a href="#순서열-연산자-설계" class="headerlink" title="순서열 연산자 설계"></a>순서열 연산자 설계</h3><ul><li>다음 유도하기에 맞추어 순서열 만들기<ul><li>빈 순서열: []</li><li>작은 순서열 맨 앞에 원소 하나를 덧붙여 얻은 순서열: [원소] + 작은 순서열</li></ul></li><li>필요한 연산자<ol><li>두 가지를 구분하는 연산자</li><li>빈 순서열이 아닐 때, 맨 앞 원소와 작은 순서열을 계산하는 연산자<ul><li>순서열을 빈 순서열과 비교: 순서열 == []</li><li>순서열 맨 앞 원소 계산: 순서열[0]</li><li>순서열 맨 앞 원소 이후의 작은 순서열 계산: 순서열[1:]</li></ul></li></ol></li></ul><h3 id="순서열-복제하기"><a href="#순서열-복제하기" class="headerlink" title="순서열 복제하기"></a>순서열 복제하기</h3><ul><li>사용하는 연산자<ul><li>순서열 == []</li><li>순서열[0]</li><li>순서열[1:]</li></ul></li><li>상수 op에 기록된 순서열 복제하기<ul><li>[] if op == [] else [op[0]] + op[1:]</li></ul></li></ul><h3 id="하나로-통합한-순서열-연산자"><a href="#하나로-통합한-순서열-연산자" class="headerlink" title="하나로 통합한 순서열 연산자"></a>하나로 통합한 순서열 연산자</h3><ul><li>상수 op에 순서열이 기록되어 있을 때<ul><li>(빈 순서열일 때 연산식 if op == [] else<br>lambda hd, tl: 빈 순서열이 아닐 때 연산식)(op[0], op[1:]))<ul><li>hd = head</li><li>tl = tail</li></ul></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Computational/">Computational</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/">컴퓨팅사고</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%97%AC%EB%9F%AC%EA%B3%B1-%EC%97%AC%EB%9F%AC%ED%95%A9/">여러곱 여러합</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/28/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A4.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%202%EB%B6%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ⅰ. 컴퓨팅 사고 1부</title>
      <link>https://ne-choi.github.io/2021/01/25/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A0.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%201%EB%B6%80/</link>
      <guid>https://ne-choi.github.io/2021/01/25/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A0.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%201%EB%B6%80/</guid>
      <pubDate>Mon, 25 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 컴퓨팅 사고 Ⅰ 과정입니다.    &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅰ-컴퓨팅-사고-Ⅰ&quot;&gt;&lt;a href=&quot;#Ⅰ-컴퓨팅-사고-Ⅰ&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 컴퓨팅 사고 Ⅰ 과정입니다.    </li></ul><h1 id="Ⅰ-컴퓨팅-사고-Ⅰ"><a href="#Ⅰ-컴퓨팅-사고-Ⅰ" class="headerlink" title="Ⅰ. 컴퓨팅 사고 Ⅰ"></a>Ⅰ. 컴퓨팅 사고 Ⅰ</h1><h2 id="1-계산으로-풀-수-있는-문제"><a href="#1-계산으로-풀-수-있는-문제" class="headerlink" title="1. 계산으로 풀 수 있는 문제"></a>1. 계산으로 풀 수 있는 문제</h2><h3 id="계산으로-푸는-문제"><a href="#계산으로-푸는-문제" class="headerlink" title="계산으로 푸는 문제"></a>계산으로 푸는 문제</h3><ul><li>생각하는 과정이 필요</li><li>어떤 형태로든 암산을 거쳐야 함</li><li>난이도에 따라 종이에 중간 결과를 적어야 함</li></ul><h2 id="2-생활기록부-성적-평균-구하기"><a href="#2-생활기록부-성적-평균-구하기" class="headerlink" title="2. 생활기록부 성적 평균 구하기"></a>2. 생활기록부 성적 평균 구하기</h2><h3 id="생활기록부-성적-평균-구하기"><a href="#생활기록부-성적-평균-구하기" class="headerlink" title="생활기록부 성적 평균 구하기"></a>생활기록부 성적 평균 구하기</h3><ul><li><p>계산 과정</p><ol><li>성적을 모두 더한다.  </li><li>학생 수를 구한다.  </li><li>성적 총합을 학생 수로 나눈다.  </li></ol></li><li><p>필요한 가정</p><ul><li>성적을 모두 더할 수 있다.  </li><li>학생 수를 구할 수 있다.  </li></ul></li></ul><h3 id="계산-과정을-이해-못할-때"><a href="#계산-과정을-이해-못할-때" class="headerlink" title="계산 과정을 이해 못할 때,"></a>계산 과정을 이해 못할 때,</h3><ol><li><p>성적을 모두 더한다.<br>1-1. 성적 총합으로 종이에 0을 쓴다.<br>1-2. 생활기록부를 순서대로 헤아려서 개별 성적을 총합에 더해 덮어쓴다.<br>1-3. 종이에 적힌 최종 값을 읽는다.  </p></li><li><p>학생 수를 구한다.<br>2-1. 학생 수로 종이에 0을 쓴다.<br>2-2. 다시 생활기록부를 순서대로 헤어려서 학생 수에 1을 더해 덮어쓴다.<br>2-3. 종이에 적힌 최종 값을 읽는다.  </p></li><li><p>성적 총합을 학생 수로 나눈다.  </p></li></ol><h3 id="생활기록부를-순서대로-헤어린다를-이해-못할-때"><a href="#생활기록부를-순서대로-헤어린다를-이해-못할-때" class="headerlink" title="생활기록부를 순서대로 헤어린다를 이해 못할 때,"></a>생활기록부를 순서대로 헤어린다를 이해 못할 때,</h3><p>1-2. 생활기록부를 순서대로 헤아리며 개별 성적을 총합에 더해 덮어준다.<br>   1-2-1. 더미 맨 위에 놓인 생활기록부를 가져온다.<br>   1-2-2. 생활기록부에 적힌 성적을 현재 총합에 더해 기억한다.<br>   1-2-3. 종이에 새로운 성적 총합을 덮어 쓴다.<br>   1-2-4. 생활기록부가 남아 있으면 1-2-1로 돌아간다.  </p><p>2-2. 다시 생활기록부를 순서대로 헤아리며 학생 수에 1 더해서 덮어쓴다.<br>   2-2-1. 더미 맨 위에 놓인 생활기록부를 가져온다.<br>   2-2-2. 현재 학생 수에 1을 더해 기억한다.<br>   2-2-3. 종이에 새로운 학생 수를 덮어 쓴다.<br>   2-2-4. 생활기록부가 남아 있으면 2-2-1로 돌아간다.  </p><h2 id="3-계산의-네-가지-요소"><a href="#3-계산의-네-가지-요소" class="headerlink" title="3. 계산의 네 가지 요소"></a>3. 계산의 네 가지 요소</h2><h3 id="계산의-요소"><a href="#계산의-요소" class="headerlink" title="계산의 요소"></a>계산의 요소</h3><ul><li>계산 대상 → 계산</li><li>계산 언어, 계산 과정, 계산 수행이 모두 들어감</li></ul><h3 id="계산-수행-주체"><a href="#계산-수행-주체" class="headerlink" title="계산 수행 주체"></a>계산 수행 주체</h3><ul><li>계산 과정은 계산 수행 주체가 이해하는 언어로 작성해야 함</li></ul><h3 id="계산-설계"><a href="#계산-설계" class="headerlink" title="계산 설계"></a>계산 설계</h3><ul><li>계산으로 문제 풀 때 핵심</li><li>계산으로 답을 구하기까지의 시간 결정</li><li>설계가 엉망이면?<ul><li>계산 수행 주체의 능력이 뛰어나도 시간이 많이 소요됨</li></ul></li><li>설계를 잘하면?<ul><li>계산 수행 주체의 능력이 크게 영향을 미치지 않음  </li></ul></li></ul><h2 id="4-계산-설계하기"><a href="#4-계산-설계하기" class="headerlink" title="4. 계산 설계하기"></a>4. 계산 설계하기</h2><h3 id="계산-무엇-어떻게"><a href="#계산-무엇-어떻게" class="headerlink" title="계산 = 무엇 + 어떻게"></a>계산 = 무엇 + 어떻게</h3><ul><li>무엇: 계산 대상</li><li>어떻게: 계산 과정</li></ul><h3 id="생활기록부-성적-평균-구하기-1"><a href="#생활기록부-성적-평균-구하기-1" class="headerlink" title="생활기록부 성적 평균 구하기"></a>생활기록부 성적 평균 구하기</h3><ul><li><p>계산 대상: 성적(계산 자료)</p><ul><li>범위: 문제 시작, 중간 계산 결과, 문제의 답</li></ul></li><li><p>계산 자료: 계산 대상이 같아도 문제에 따라 달라짐</p></li><li><p>계산 과정: 연산과 명력의 조합</p><ul><li>연산: 외부와 소통하지 않고 수행, 외부에 영향을 미치지 않음</li><li>명령: 외부와 소통, 외부에 영향을 미침</li></ul></li><li><p>연산을 명령으로부터 구분하는 이유</p><ul><li>연산은 다시 수행해도 결과가 같음(전체 설계가 덜 복잡함)</li><li>명령은 수행할 때마다 결과가 달라짐(전체 설계가 복잡해짐)</li></ul></li></ul><h1 id="Ⅱ-컴퓨팅-사고-Ⅱ"><a href="#Ⅱ-컴퓨팅-사고-Ⅱ" class="headerlink" title="Ⅱ. 컴퓨팅 사고 Ⅱ"></a>Ⅱ. 컴퓨팅 사고 Ⅱ</h1><h2 id="1-컴퓨팅"><a href="#1-컴퓨팅" class="headerlink" title="1. 컴퓨팅"></a>1. 컴퓨팅</h2><h3 id="컴퓨팅-컴퓨터가-수행-주체인-계산"><a href="#컴퓨팅-컴퓨터가-수행-주체인-계산" class="headerlink" title="컴퓨팅: 컴퓨터가 수행 주체인 계산"></a>컴퓨팅: 컴퓨터가 수행 주체인 계산</h3><ul><li><p>프로그래밍 언어: C, Python, Haskell, Scala, …</p></li><li><p>프로그램(코드): C 프로그램, Python 프로그램, Haskell 프로그램, Scala 프로그램  </p></li><li><p>프로그래밍(코딩): 프로그래밍 언어 → 프로그램(코드)</p></li><li><p>디버깅: 코드 오류 해결</p></li></ul><h3 id="프로그래밍-언어"><a href="#프로그래밍-언어" class="headerlink" title="프로그래밍 언어"></a>프로그래밍 언어</h3><ul><li>문법<ul><li>어휘를 명시</li><li>단어 배치 규정을 정의</li></ul></li><li>의미론<ul><li>단어 조합이 연산인지 명령인지 판단</li><li>실행 결과 설명</li></ul></li><li>사람도 결과 예측 가능</li></ul><h3 id="프로그래밍"><a href="#프로그래밍" class="headerlink" title="프로그래밍"></a>프로그래밍</h3><ul><li>설명하는 글짓기와 같음<ul><li>프로그래밍으로 문제를 해결하기 위해서는 사람 언어로 설명할 수도 있어야 함</li></ul></li></ul><h2 id="2-컴퓨팅-사고"><a href="#2-컴퓨팅-사고" class="headerlink" title="2. 컴퓨팅 사고"></a>2. 컴퓨팅 사고</h2><h3 id="컴퓨팅-사고"><a href="#컴퓨팅-사고" class="headerlink" title="컴퓨팅 사고"></a>컴퓨팅 사고</h3><ul><li>컴퓨팅으로 문제를 풀고자 할 때 적합한 생각의 툴<ul><li>기계적 수행 고려</li><li>체계적 계산 설계</li></ul></li><li>프로그래밍보다 우선하는 개념</li><li>계산 대상, 계산 자료, 계산 과정을 모두 아우르는 종합적 문제 해결 방식</li></ul><h3 id="계산-주체로서-컴퓨터의-장점"><a href="#계산-주체로서-컴퓨터의-장점" class="headerlink" title="계산 주체로서 컴퓨터의 장점"></a>계산 주체로서 컴퓨터의 장점</h3><ul><li>계산 대상이 큼</li><li>계산 수행 속도가 빠름</li><li>계산 과정을 반복할 수 있음</li></ul><h3 id="계산-대상-바라보기"><a href="#계산-대상-바라보기" class="headerlink" title="계산 대상 바라보기"></a>계산 대상 바라보기</h3><ul><li>알맹이 요약하기에 필요</li></ul><h3 id="계산-자료-바라보기"><a href="#계산-자료-바라보기" class="headerlink" title="계산 자료 바라보기"></a>계산 자료 바라보기</h3><ul><li><p>작은 것으로부터 더 큰 것을 간단히 이끌어 내기</p><ul><li>자연수 100 = 자연수 99 + 1</li><li>자연수 n = ‘최소 차연수 0’ 또는 ‘직전 자연수 (n-1) 더하기 1’</li></ul></li><li><p>다음 유도하기로 바라보는 이유</p><ul><li>계산 자료가 대개 일정한 규칙에 따라 생성되기 때문</li></ul></li><li><p>다음 유도하기 이후 문제 풀기</p><ul><li>최초 경우</li><li>작은 것으로부터 더 큰 것을 이끌어 내는 경우</li></ul></li></ul><h1 id="Ⅲ-컴퓨팅-사고-Ⅲ"><a href="#Ⅲ-컴퓨팅-사고-Ⅲ" class="headerlink" title="Ⅲ. 컴퓨팅 사고 Ⅲ"></a>Ⅲ. 컴퓨팅 사고 Ⅲ</h1><h2 id="1-컴퓨팅-사고"><a href="#1-컴퓨팅-사고" class="headerlink" title="1. 컴퓨팅 사고"></a>1. 컴퓨팅 사고</h2><h3 id="계산-과정-바라보기-나누어-풀기"><a href="#계산-과정-바라보기-나누어-풀기" class="headerlink" title="계산 과정 바라보기: 나누어 풀기"></a>계산 과정 바라보기: 나누어 풀기</h3><ul><li>문제를 작은 문제 여러 개로 나눠 생각하기<ul><li>작은 문제는 각기 풀 수 있어야 함</li><li>계산 자료를 넘겨주는 것 외에는 연관성이 없어야 함</li><li>작은 문제를 또 더 작은 문제로 나눌 수 있음</li></ul></li></ul><h3 id="계산-과정-바라보기-쪼개-풀어-합치기"><a href="#계산-과정-바라보기-쪼개-풀어-합치기" class="headerlink" title="계산 과정 바라보기: 쪼개 풀어 합치기"></a>계산 과정 바라보기: 쪼개 풀어 합치기</h3><ul><li>계산 자료를 쪼개어 풀고, 다시 합쳐 최종 답을 찾아냄</li></ul><h3 id="계산-과정-바라보기-눈앞-찾기"><a href="#계산-과정-바라보기-눈앞-찾기" class="headerlink" title="계산 과정 바라보기: 눈앞 찾기"></a>계산 과정 바라보기: 눈앞 찾기</h3><ul><li>계산 자료 전체 분석이 어려울 때 사용</li><li>각 단계에서 취할 수 있는 가장 쉬운 선택을 쫓아감</li></ul><h3 id="계산-과정-바라보기-의미에-맞게-빠뜨림-없이"><a href="#계산-과정-바라보기-의미에-맞게-빠뜨림-없이" class="headerlink" title="계산 과정 바라보기: 의미에 맞게 빠뜨림 없이"></a>계산 과정 바라보기: 의미에 맞게 빠뜨림 없이</h3><ul><li>의미에 맞게<ul><li>해당 문제 의미에 맞게 처리</li><li>그렇지 않으면 의미에 어긋남</li></ul></li><li>빠뜨림 없이<ul><li>계산 자료를 모두 처리</li><li>빠뜨리는 경우가 있다면 불완전</li></ul></li></ul><h2 id="2-컴퓨팅으로-문제-풀기"><a href="#2-컴퓨팅으로-문제-풀기" class="headerlink" title="2. 컴퓨팅으로 문제 풀기"></a>2. 컴퓨팅으로 문제 풀기</h2><h3 id="컴퓨팅-사고-단계"><a href="#컴퓨팅-사고-단계" class="headerlink" title="컴퓨팅 사고 단계"></a>컴퓨팅 사고 단계</h3><ul><li>프로그래밍에도 익숙해야 함<ul><li>프로그래밍 언어가 생각하는 틀에 영향을 주기 때문</li></ul></li></ul><h2 id="3-컴퓨팅으로-풀-수-있는-문제"><a href="#3-컴퓨팅으로-풀-수-있는-문제" class="headerlink" title="3. 컴퓨팅으로 풀 수 있는 문제"></a>3. 컴퓨팅으로 풀 수 있는 문제</h2><h3 id="컴퓨터의-한계"><a href="#컴퓨터의-한계" class="headerlink" title="컴퓨터의 한계"></a>컴퓨터의 한계</h3><ul><li>어떤 문제를 컴퓨팅으로 풀 수 있는가?<ul><li>계산 시간을 고려하지 않고 이론상 답이 나오는지만 따짐</li></ul></li><li>시간을 아무리 쏟아도 컴퓨팅으로 풀 수 없는 문제가 있는가?</li></ul><h3 id="계산이란-무엇인가"><a href="#계산이란-무엇인가" class="headerlink" title="계산이란 무엇인가?"></a>계산이란 무엇인가?</h3><ul><li>계산 = 튜링 기계 = 람다 계산법 = 계산<ul><li>튜링 기계: 만능 기계</li><li>람다 계산법: C 언어, Python 언어, Haskell 언어, Scala 언어…</li></ul></li></ul><h3 id="계산으로-풀-수-없는-문제가-있는가"><a href="#계산으로-풀-수-없는-문제가-있는가" class="headerlink" title="계산으로 풀 수 없는 문제가 있는가?"></a>계산으로 풀 수 없는 문제가 있는가?</h3><ul><li>이론적으로 무수히 많음</li></ul><h1 id="Ⅳ-컴퓨팅-사고-Ⅳ"><a href="#Ⅳ-컴퓨팅-사고-Ⅳ" class="headerlink" title="Ⅳ. 컴퓨팅 사고 Ⅳ"></a>Ⅳ. 컴퓨팅 사고 Ⅳ</h1><h2 id="1-계산-자료"><a href="#1-계산-자료" class="headerlink" title="1. 계산 자료"></a>1. 계산 자료</h2><h3 id="기본-자료-더-이상-쪼갤-수-없는-자료"><a href="#기본-자료-더-이상-쪼갤-수-없는-자료" class="headerlink" title="기본 자료: 더 이상 쪼갤 수 없는 자료"></a>기본 자료: 더 이상 쪼갤 수 없는 자료</h3><ul><li>성적 총합은 1729이다</li><li>생활기록부가 아직 남아 있다</li><li>생활기록부가 이제 남아 있지 않다</li><li>가장 가까운 도시는 부산이다</li><li>시험이 끝나는 날은 수요일이다</li></ul><h3 id="Python-언어의-기본-자료"><a href="#Python-언어의-기본-자료" class="headerlink" title="Python 언어의 기본 자료"></a>Python 언어의 기본 자료</h3><ul><li>정수</li><li>논리값: True / False</li><li>문자열: ‘안녕하세요?’, ‘’, “안녕”, ‘ ‘, ‘“ㅇㅇ”‘, “‘ㄷㄷ’”</li></ul><h3 id="문자열-해석하기"><a href="#문자열-해석하기" class="headerlink" title="문자열 해석하기"></a>문자열 해석하기</h3><ul><li>문자열이 표현하는 단어와 문장을 프로그램으로 해석하지 않음<ul><li>‘1729’: 글자로 이루어진 단어, 정수 1729와 무관</li></ul></li></ul><h3 id="기본-자료-프로그램-계산-결과"><a href="#기본-자료-프로그램-계산-결과" class="headerlink" title="기본 자료 = 프로그램 = 계산 결과"></a>기본 자료 = 프로그램 = 계산 결과</h3><h2 id="2-여러곱-계산-자료의-‘그리고’"><a href="#2-여러곱-계산-자료의-‘그리고’" class="headerlink" title="2. 여러곱- 계산 자료의 ‘그리고’"></a>2. 여러곱- 계산 자료의 ‘그리고’</h2><h3 id="접속사-‘그리고’"><a href="#접속사-‘그리고’" class="headerlink" title="접속사 ‘그리고’"></a>접속사 ‘그리고’</h3><ul><li>계산 자료 종류<ul><li>생활기록부에서 이름 <strong>그리고</strong> 성적을 뽑아낸다.</li><li>지도에서 출발 도시 <strong>그리고</strong> 도착 도시를 골라서 거리를 잰다.</li></ul></li><li>계산 자료 자체<ul><li>첫째 생활기록부에는 이름 홍길동 <strong>그리고</strong> 성적 85점이 적혀 있다.</li><li>국어 <strong>그리고</strong> 영어 <strong>그리고</strong> 수학은 공통 수강생이 있다.</li></ul></li></ul><h3 id="Python-언어-여러곱"><a href="#Python-언어-여러곱" class="headerlink" title="Python 언어 여러곱"></a>Python 언어 여러곱</h3><ul><li>괄호 사이 계산 자료를 나열하고 쉼표로 분리</li><li>각 계산 자료 = 여러곱 원소(계산 자료 1, 계산 자료 2, …, 계산 자료 n)</li></ul><h3 id="여러곱의-특수한-형태"><a href="#여러곱의-특수한-형태" class="headerlink" title="여러곱의 특수한 형태"></a>여러곱의 특수한 형태</h3><ul><li>계산 자료 하나로 엮은 여러곱</li><li>원소가 없는 여러곱</li></ul><h3 id="여러곱의-특징"><a href="#여러곱의-특징" class="headerlink" title="여러곱의 특징"></a>여러곱의 특징</h3><ul><li>여러곱 = 프로그램</li><li>더 큰 여러곱을 만들 때 쓸 수 있음<ul><li>((1729, ‘Hello’), True)</li></ul></li></ul><h2 id="3-여러합-계산-자료의-‘또는’"><a href="#3-여러합-계산-자료의-‘또는’" class="headerlink" title="3. 여러합- 계산 자료의 ‘또는’"></a>3. 여러합- 계산 자료의 ‘또는’</h2><h3 id="접속사-‘또는’"><a href="#접속사-‘또는’" class="headerlink" title="접속사 ‘또는’"></a>접속사 ‘또는’</h3><ul><li>계산 자료 종류<ul><li>생활기록부를 찾으려면 이름 <strong>또는</strong> 생년월일이 필요하다.</li></ul></li><li>계산 자료 자체<ul><li>시험은 월요일 <strong>또는</strong> 화요일 <strong>또는</strong> 수요일에 시작한다.</li></ul></li></ul><h3 id="여러합"><a href="#여러합" class="headerlink" title="여러합"></a>여러합</h3><ul><li>접속사 <strong>또는</strong>을 써서 정의한 합집합</li><li>개별 원소는 종류와 내용을 포함</li></ul><h3 id="Python-언어-여러합"><a href="#Python-언어-여러합" class="headerlink" title="Python 언어 여러합"></a>Python 언어 여러합</h3><ul><li>종류와 내용 쌍으로 이뤄진 여러곱으로 여러합 원소를 표현</li><li>내용이 없으면 종류만으로 이루어진 여러곱으로 표현</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Computational/">Computational</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/">컴퓨팅사고</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%97%AC%EB%9F%AC%ED%95%A9-%EC%97%AC%EB%9F%AC%EA%B3%B1/">여러합 여러곱</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/25/Study/Postech/%EC%BB%B4%ED%93%A8%ED%8C%85%EC%82%AC%EA%B3%A0/%E2%85%A0.%20%EC%BB%B4%ED%93%A8%ED%8C%85%20%EC%82%AC%EA%B3%A0%201%EB%B6%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 프로그래밍 2: Ⅶ. 데이터 구조</title>
      <link>https://ne-choi.github.io/2021/01/22/Study/Postech/Python/%E2%85%A7.%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B3%BC%20%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5/</link>
      <guid>https://ne-choi.github.io/2021/01/22/Study/Postech/Python/%E2%85%A7.%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B3%BC%20%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5/</guid>
      <pubDate>Fri, 22 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, Python 프로그래밍 Ⅱ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅷ-파이썬과-인공지능&quot;&gt;&lt;a href=&quot;#Ⅷ-파이썬과-인</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, Python 프로그래밍 Ⅱ 과정입니다. </li></ul><h1 id="Ⅷ-파이썬과-인공지능"><a href="#Ⅷ-파이썬과-인공지능" class="headerlink" title="Ⅷ. 파이썬과 인공지능"></a>Ⅷ. 파이썬과 인공지능</h1><h2 id="1-파이썬과-인공지능"><a href="#1-파이썬과-인공지능" class="headerlink" title="1. 파이썬과 인공지능"></a>1. 파이썬과 인공지능</h2><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><ul><li>문제 해결(Problem Solving)</li><li>컴퓨팅 사고력(Computational Thinking)</li><li>4차산업혁명(Industry 4.0)</li><li>인공지능, 머신러닝, 딥러닝(AI, ML, DL)</li><li>인공지능 프로젝트 사례(AI Project)</li></ul><h3 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h3><p>문제 입력 → 문제 해결 방법과 절차 (알고리즘; Algorithm) → 해결 출력</p><h3 id="Computational-Thinking"><a href="#Computational-Thinking" class="headerlink" title="Computational Thinking"></a>Computational Thinking</h3><ul><li><p>컴퓨터 과학자처럼 생각하기</p><ul><li>컴퓨터 과학의 이론, 기술, 도구를 활용하여 현실의 복잡한 문제를 해결하는 사고 방식</li></ul></li><li><p>컴퓨터공학 사고력</p><ul><li>주어진 일상 생활 문제를 분석, 이해하고 문제 해결 방법을 컴퓨터 공학 원리로 알고리즘을 도출하여 컴퓨터가 이해하는 프로그래밍 언어로 제시하는 사고 능력</li></ul></li></ul><h3 id="4차-산업혁명-Industry-4-0"><a href="#4차-산업혁명-Industry-4-0" class="headerlink" title="4차 산업혁명(Industry 4.0)"></a>4차 산업혁명(Industry 4.0)</h3><ul><li><p>인공지능 로봇기술 생명과학 기술이 주도하는 차세대 산업기술</p><ul><li>지능정보기술: 지능(AI SW) + 정보(빅데이터, IoT, 클라우드)</li></ul></li><li><p>산업혁명 역사</p><ul><li>1차: 증기기관 → 기계적 형명</li><li>2차: 전기 → 대량 생산의 시작 (인간 육체 노동을 대체)</li><li>3차: 컴퓨터를 통한 제품 생산과 유통 자동화 (인간 지능 노동을 보조)</li><li>4차: IoT &amp; AI → 제품 생산 지능화, 고객 맞춤형 생산 (인간 지능 노동을 대체)</li></ul></li><li><p>4차산업혁명</p><ul><li>산업 + 사회 혁명</li></ul></li><li><p>3차 vs 4차산업혁명</p><ul><li>다양한 분야 융합</li><li>이미 존재하는 기술의 상호연결: 에어비앤비, 우버</li><li>제조업과 인공지능 융합하여 새로운 가치 창출</li><li>중앙집권화에서 분산화로: 블록체인 기술</li></ul></li></ul><h3 id="인공지능"><a href="#인공지능" class="headerlink" title="인공지능"></a>인공지능</h3><ul><li><p>인공지능(Artificial Intelligence)</p><ul><li>컴퓨터가 사람처럼 생각하고 판단하게 만드는 기술</li></ul></li><li><p>머신러닝(Machine Learning)</p><ul><li>인공지능의 한 분야</li><li>인간의 학습능력과 같은 기능을 컴퓨터에 부여하기 위한 기술</li></ul></li><li><p>딥러닝(Deep Learning)</p><ul><li>인공 신경망을 기반으로 한 머신러닝 방법론 중 하나</li><li>빅데이터 기반으로 스스로 학습하여 판단하는 기술</li></ul></li></ul><h2 id="2-인공지능-프로젝트-사례"><a href="#2-인공지능-프로젝트-사례" class="headerlink" title="2. 인공지능 프로젝트 사례"></a>2. 인공지능 프로젝트 사례</h2><h3 id="Application-of-AI"><a href="#Application-of-AI" class="headerlink" title="Application of AI"></a>Application of AI</h3><ul><li>사물인식 추천 프로그램</li><li>얼굴인식 추천 프로그램</li><li>기사 요약 프로그램</li><li>인공지능 챗봇 프로그램</li><li>자율주행 RC Car</li></ul><h3 id="사물-인식"><a href="#사물-인식" class="headerlink" title="사물 인식"></a>사물 인식</h3><ul><li>식자재 사물 인식을 통한 맞춤 요리 추천 모듈 구현</li><li>냉장고에 있는 음식을 확인 후, 레시피를 추천하는 알고리즘</li></ul><h3 id="얼굴-인식"><a href="#얼굴-인식" class="headerlink" title="얼굴 인식"></a>얼굴 인식</h3><ul><li>얼굴을 인식하여 구글 로그인 가능</li><li>딥러닝과 컴퓨터 비전  </li></ul><ul><li><strong>Object Detection</strong><ul><li>이미지/동영상에서 사람, 동물, 차량 등 의미 있는 객체 종류와 그 위치(bounding box)를 정확하게 찾기 위한 computer vision 기술</li><li>영상에서 관심 대상을 인식하기 위해 일반적으로 검출 대상에 관한 후보 영역을 찾고, 후보 영역에 대한 객체 종류와 위치를 학습된 모델을 통해 예측</li><li>영상 및 영상 내 객체 종류(class)와 객체 위치 정보 필요</li><li>얼굴, 도로 상 보행자 및 차량 인식 등에 딥러닝 기반 객체 탐지 기술이 주로 이용됨</li></ul></li></ul><h3 id="자연어-처리"><a href="#자연어-처리" class="headerlink" title="자연어 처리"></a>자연어 처리</h3><ul><li>신문기사 내용을 요약해주는 서비스<ul><li>브라우저에서 파이썬을 이용하여 기사를 크롤링</li><li>데이터 베이스에 넣고 txt 저장</li><li>알고리즘을 통해 기사를 요약하고 저장</li></ul></li></ul><h3 id="챗봇"><a href="#챗봇" class="headerlink" title="챗봇"></a>챗봇</h3><ul><li>사용자의 발화를 듣고 요청 내용을 이해하여 답변하는 서비스</li></ul><h3 id="자율주행-자동차"><a href="#자율주행-자동차" class="headerlink" title="자율주행 자동차"></a>자율주행 자동차</h3><ul><li>RC Car 부품에 라즈베리파이라는 작은 부품이 있음</li><li>영상 정보를 전달하면, 영상 정보를 딥러닝으로 분석하여 길인지 아닌지 분류</li><li>분류된 내용 기반으로 전송하면 차가 움직임</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Python/">Python</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/22/Study/Postech/Python/%E2%85%A7.%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B3%BC%20%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 프로그래밍 2: Ⅶ. 데이터 구조</title>
      <link>https://ne-choi.github.io/2021/01/21/Study/Postech/Python/%E2%85%A6.%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%EC%A1%B0/</link>
      <guid>https://ne-choi.github.io/2021/01/21/Study/Postech/Python/%E2%85%A6.%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%EC%A1%B0/</guid>
      <pubDate>Thu, 21 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, Python 프로그래밍 Ⅱ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅶ-데이터-구조&quot;&gt;&lt;a href=&quot;#Ⅶ-데이터-구조&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, Python 프로그래밍 Ⅱ 과정입니다. </li></ul><h1 id="Ⅶ-데이터-구조"><a href="#Ⅶ-데이터-구조" class="headerlink" title="Ⅶ. 데이터 구조"></a>Ⅶ. 데이터 구조</h1><h2 id="1-리스트"><a href="#1-리스트" class="headerlink" title="1. 리스트"></a>1. 리스트</h2><h3 id="리스트란"><a href="#리스트란" class="headerlink" title="리스트란?"></a>리스트란?</h3><ul><li><p>리스트(list)는 여러 개의 데이터가 저장된 장소</p></li><li><p>선언: [] 안에 쉼표로 구분하여 정보를 기입하면 됨</p><pre class="line-numbers language-none"><code class="language-none">리스트 이름 &#x3D; [값1, 값2, 값3]scores &#x3D; [32, 56, 64, 72, 12, 37, 98, 77, 59, 69]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>리스트는 여러 개 데이터를 하나의 이름으로 관리할 수 있는 데이터 구조</p></li><li><p>서로 다른 타입의 데이터를 하나의 리스트 이름으로 관리할 수 있음</p></li><li><p>리스트 종류</p><ul><li>문자열 원소</li><li>숫자 원소</li><li>여러 타입 원소</li><li>Empty list<ul><li>empty_list = []</li></ul></li></ul></li></ul><h3 id="리스트-원소에-접근하기"><a href="#리스트-원소에-접근하기" class="headerlink" title="리스트 원소에 접근하기"></a>리스트 원소에 접근하기</h3><ul><li>인덱스<ul><li>원소가 배열된 순서 (0부터 시작_</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">season &#x3D; [&#39;spring&#39;, &#39;summer&#39;, &#39;fall&#39;, &#39;winter&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>인덱스를 이용해 원소 접근 가능<ul><li>season[1]: ‘summer’</li></ul></li></ul><h3 id="리스트와-연산자"><a href="#리스트와-연산자" class="headerlink" title="리스트와 연산자"></a>리스트와 연산자</h3><ul><li>‘in’ &amp; ‘not in’<ul><li>in: list의 element인가를 결정하는 연산자</li><li>not it: list의 element가 아닌 element를 결정하는 연산자</li></ul></li></ul><h3 id="리스트-순회하기"><a href="#리스트-순회하기" class="headerlink" title="리스트 순회하기"></a>리스트 순회하기</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">]</span><span class="token keyword">for</span> element <span class="token keyword">in</span> scores<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment">#end=" ": 가로로 배열</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>32 56 64 72 12 37 98 77 59 69 </code></pre><h3 id="예제-성적-처리-프로그램"><a href="#예제-성적-처리-프로그램" class="headerlink" title="예제: 성적 처리 프로그램"></a>예제: 성적 처리 프로그램</h3><ul><li>학생 성적 처리 프로그램 작성<ul><li>사용자로부터 성적을 입력받아 리스트에 저장</li><li>성적 평균을 구하고 80점 이상 성적 받은 학생 수를 계산하여 출력</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">STUDENTS <span class="token operator">=</span> <span class="token number">5</span>scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>scoreSum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>STUDENTS<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"성적을 입력하세요: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">#리스트에 값 추가</span>    scoreSum <span class="token operator">+=</span> valuescoreAvg <span class="token operator">=</span> scoreSum <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>highScoreStudents <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>        highScoreStudents <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"성적 평균은"</span><span class="token punctuation">,</span> scoreAvg<span class="token punctuation">,</span> <span class="token string">"입니다."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"80점 이상 성적을 받은 학생은"</span><span class="token punctuation">,</span> highScoreStudents<span class="token punctuation">,</span><span class="token string">"명입니다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>성적을 입력하세요: 40성적을 입력하세요: 80성적을 입력하세요: 50성적을 입력하세요: 70성적을 입력하세요: 90성적 평균은 66.0 입니다.80점 이상 성적을 받은 학생은 2 명입니다.</code></pre><h3 id="예제-문자열-처리-프로그램"><a href="#예제-문자열-처리-프로그램" class="headerlink" title="예제: 문자열 처리 프로그램"></a>예제: 문자열 처리 프로그램</h3><ul><li>학생 이름을 저장했다가 출력하는 프로그램 작성</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"학생 이름을 입력하세요: "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    Names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"학생 이름:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> Names<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">", "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>학생 이름을 입력하세요: 나은학생 이름을 입력하세요: 선호학생 이름을 입력하세요: 더는 안 돼학생 이름을 입력하세요: 더 없어학생 이름을 입력하세요: 둘이 끝이야학생 이름을 입력하세요: 안 돼학생 이름을 입력하세요: 학생 이름:나은, 선호, 더는 안 돼, 더 없어, 둘이 끝이야, 안 돼, </code></pre><h2 id="2-데이터-구조"><a href="#2-데이터-구조" class="headerlink" title="2. 데이터 구조"></a>2. 데이터 구조</h2><h3 id="데이터-구조"><a href="#데이터-구조" class="headerlink" title="데이터 구조"></a>데이터 구조</h3><ul><li>자료 구조(data structure)<ul><li>프로그램에서 자료를 저장하는 여러 구조</li><li>파이썬: 리스트, 튜플, 딕셔너리, 문자열 등 제공</li></ul></li></ul><h3 id="리스트-예제-연락처-관리-프로그램"><a href="#리스트-예제-연락처-관리-프로그램" class="headerlink" title="리스트 예제: 연락처 관리 프로그램"></a>리스트 예제: 연락처 관리 프로그램</h3><ul><li>리스트 자료구조를 이용해 연락처를 관리하는 프로그램을 작성</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">menu <span class="token operator">=</span> <span class="token number">0</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#리스트 생성</span><span class="token keyword">while</span> menu <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1. 친구 리스트 출력"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2. 친구 추가"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3. 친구 삭제"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4. 이름 변경"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"9. 종료"</span><span class="token punctuation">)</span>    menu <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"메뉴를 선택하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> menu <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>friends<span class="token punctuation">)</span>    <span class="token keyword">elif</span> menu <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"이름을 입력하시오: "</span><span class="token punctuation">)</span>        friends<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">elif</span> menu <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        del_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"삭제할 이름을 입력하시오: "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> del_name <span class="token keyword">in</span> friends<span class="token punctuation">:</span>            friends<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>del_name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            pinrt<span class="token punctuation">(</span><span class="token string">"해당되는 이름이 없습니다."</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> menu <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        old_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"변경하고 싶은 이름을 입력하시오: "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> old_name <span class="token keyword">in</span> friends<span class="token punctuation">:</span>            index <span class="token operator">=</span> friends<span class="token punctuation">.</span>index<span class="token punctuation">(</span>old_name<span class="token punctuation">)</span>            new_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"새로운 이름을 입력하시오: "</span><span class="token punctuation">)</span>            friends<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> new_name        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"해당되는 이름이 없습니다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------1. 친구 리스트 출력2. 친구 추가3. 친구 삭제4. 이름 변경9. 종료---------------------------------------------------------------------------KeyboardInterrupt                         Traceback (most recent call last)&lt;ipython-input-10-b5244f1bc6b3&gt; in &lt;module&gt;      9     print(&quot;4. 이름 변경&quot;)     10     print(&quot;9. 종료&quot;)---&gt; 11     menu = int(input(&quot;메뉴를 선택하시오: &quot;))     12     if menu == 1:     13         print(friends)~\anaconda3\lib\site-packages\ipykernel\kernelbase.py in raw_input(self, prompt)    858                 &quot;raw_input was called, but this frontend does not support input requests.&quot;    859             )--&gt; 860         return self._input_request(str(prompt),    861             self._parent_ident,    862             self._parent_header,~\anaconda3\lib\site-packages\ipykernel\kernelbase.py in _input_request(self, prompt, ident, parent, password)    902             except KeyboardInterrupt:    903                 # re-raise KeyboardInterrupt, to truncate traceback--&gt; 904                 raise KeyboardInterrupt(&quot;Interrupted by user&quot;) from None    905             except Exception as e:    906                 self.log.warning(&quot;Invalid Message:&quot;, exc_info=True)KeyboardInterrupt: Interrupted by user</code></pre><h3 id="튜플-tuple"><a href="#튜플-tuple" class="headerlink" title="튜플(tuple)"></a>튜플(tuple)</h3><ul><li>값을 변경할 수 없는 리스트</li></ul><pre class="line-numbers language-none"><code class="language-none">튜플 &#x3D; (항목1, 항목2, ..., 항목n)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> numbers <span class="token operator">+</span> colors<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(1, 2, 3, 4, 5, &#39;red&#39;, &#39;pink&#39;, &#39;blue&#39;, &#39;purple&#39;)</code></pre><h3 id="딕셔너리"><a href="#딕셔너리" class="headerlink" title="딕셔너리"></a>딕셔너리</h3><ul><li>키(key)와 값(value) 쌍을 저장할 수 있는 객체<pre class="line-numbers language-none"><code class="language-none">딕셔너리 &#x3D; &#123;키1:값1, 키2:값2, 키3:값3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">contacts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Kim'</span><span class="token punctuation">:</span><span class="token string">'0102345678'</span><span class="token punctuation">,</span> <span class="token string">'Choi'</span><span class="token punctuation">:</span><span class="token string">'01067891234'</span><span class="token punctuation">,</span> <span class="token string">'Hwang'</span><span class="token punctuation">:</span><span class="token string">'01013467946'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>contacts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#123;&#39;Kim&#39;: &#39;0102345678&#39;, &#39;Choi&#39;: &#39;01067891234&#39;, &#39;Hwang&#39;: &#39;01013467946&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">contacts<span class="token punctuation">[</span><span class="token string">'Kim'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;0102345678&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">'Kim'</span> <span class="token keyword">in</span> contacts<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"키가 딕셔너리에 있음"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>키가 딕셔너리에 있음</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">contacts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Kim'</span><span class="token punctuation">:</span><span class="token string">'0102345678'</span><span class="token punctuation">,</span> <span class="token string">'Choi'</span><span class="token punctuation">:</span><span class="token string">'01067891234'</span><span class="token punctuation">,</span> <span class="token string">'Hwang'</span><span class="token punctuation">:</span><span class="token string">'01013467946'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> item <span class="token keyword">in</span> contacts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(&#39;Kim&#39;, &#39;0102345678&#39;)(&#39;Choi&#39;, &#39;01067891234&#39;)(&#39;Hwang&#39;, &#39;01013467946&#39;)</code></pre><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><ul><li>문자열은 문자들의 시퀀스로 정의</li><li>글자들이 실(string)로 묶인 것</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"Naeun"</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">"Seonho"</span>s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>NaeunSeonho</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">## 슬라이싱</span>word1 <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#인덱스 2보다 작을 때까지 → 0, 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>afab</code></pre><h3 id="in-연산자-not-in-연산자"><a href="#in-연산자-not-in-연산자" class="headerlink" title="in 연산자 not in 연산자"></a>in 연산자 not in 연산자</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'Love will find a way.'</span><span class="token string">'Love'</span> <span class="token keyword">in</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'wi'</span> <span class="token keyword">in</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'e w'</span> <span class="token keyword">in</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Python/">Python</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/Python/">Python</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%A6%AC%EC%8A%A4%ED%8A%B8/">리스트</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%8A%9C%ED%94%8C/">튜플</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/21/Study/Postech/Python/%E2%85%A6.%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%EC%A1%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 프로그래밍 2: Ⅵ. 함수와 모듈</title>
      <link>https://ne-choi.github.io/2021/01/20/Study/Postech/Python/%E2%85%A5.%20%ED%95%A8%EC%88%98%EC%99%80%20%EB%AA%A8%EB%93%88/</link>
      <guid>https://ne-choi.github.io/2021/01/20/Study/Postech/Python/%E2%85%A5.%20%ED%95%A8%EC%88%98%EC%99%80%20%EB%AA%A8%EB%93%88/</guid>
      <pubDate>Wed, 20 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, Python 프로그래밍 Ⅱ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅵ-함수와-모듈&quot;&gt;&lt;a href=&quot;#Ⅵ-함수와-모듈&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, Python 프로그래밍 Ⅱ 과정입니다. </li></ul><h1 id="Ⅵ-함수와-모듈"><a href="#Ⅵ-함수와-모듈" class="headerlink" title="Ⅵ. 함수와 모듈"></a>Ⅵ. 함수와 모듈</h1><h2 id="1-함수-개념"><a href="#1-함수-개념" class="headerlink" title="1. 함수 개념"></a>1. 함수 개념</h2><h3 id="함수의-개념"><a href="#함수의-개념" class="headerlink" title="함수의 개념"></a>함수의 개념</h3><ul><li>함수(function)<ul><li>독립적으로 수행하는 프로그램 단위로 특정 작업을 수행하는 명령어 모음에 이름 붙인 것</li><li>프로그램에서 반복적으로 수행되는 기능을 함수로 만들어 호출할 수 있음</li><li>함수는 작업에 필요한 데이터(매개변수)를 받을 수 있고, 작업 완료 후에는 작업 결과를 호출자에게 반환할 수 있음</li></ul></li></ul><h3 id="함수-정의-Python"><a href="#함수-정의-Python" class="headerlink" title="함수 정의_Python"></a>함수 정의_Python</h3><ul><li>함수 정의는 def로 시작하고 콜론(:)으로 끝</li><li>함수 시작과 끝은 코드의 들여쓰기로 구분</li><li>시작과 끝 명시할 필요 없음</li></ul><pre class="line-numbers language-none"><code class="language-none">def 함수이름(입력 인수):    수행할 문장    ...    return 반환값<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"add 결과: "</span><span class="token punctuation">,</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>add 결과:  20</code></pre><ul><li><p>함수 정의</p><pre class="line-numbers language-none"><code class="language-none">def add(a,b):    result &#x3D; a + b    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>함수 호출</p><pre class="line-numbers language-none"><code class="language-none">sum &#x3D; add(100,200)print(sum)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="함수-매개변수와-반환값"><a href="#함수-매개변수와-반환값" class="headerlink" title="함수 매개변수와 반환값"></a>함수 매개변수와 반환값</h3><p>(함수 내 정의된 문장은 바로 실행되지 않음)  </p></li><li><p>입력값, 반환값이 없는 함수</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>입력값은 없고 반환값이 있는 함수</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="함수-작성-예시"><a href="#함수-작성-예시" class="headerlink" title="함수 작성 예시"></a>함수 작성 예시</h3><ul><li>정수 거듭제곱값을 계산하여 반환하는 함수 작성(** 연산자 사용 가능)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> x    <span class="token keyword">return</span> result<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"power 함수 실행: "</span><span class="token punctuation">,</span>power<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>power 함수 실행:  100</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## main() 함수 호출 활용</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>power<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> x    <span class="token keyword">return</span> resultmain<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>100</code></pre><h2 id="2-함수-실습"><a href="#2-함수-실습" class="headerlink" title="2. 함수 실습"></a>2. 함수 실습</h2><h3 id="일상-생활-문제-성적-처리"><a href="#일상-생활-문제-성적-처리" class="headerlink" title="일상 생활 문제: 성적 처리"></a>일상 생활 문제: 성적 처리</h3><ul><li><p>문제</p><ul><li>데이터: 점수</li><li>처리 기능: 총점, 정렬(두 수의 교환)</li></ul></li><li><p>처리</p><ul><li>총점 계산(add())</li><li>총점으로 평균 계산</li><li>총점 반영하여 성적순 정렬</li><li>정렬 시, 두 변수의 값을 바꾸는 함수 필요(swap())<ul><li>a, b = b, a</li></ul></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 함수</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">def</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token comment">## 시작코드</span>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"정수 1 입력: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"정수 2 입력: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> add<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>average<span class="token operator">=</span><span class="token builtin">sum</span><span class="token operator">/</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"두 수의 합: "</span><span class="token punctuation">,</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"두 수의 평균: "</span><span class="token punctuation">,</span>average<span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span>swap<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"두 수 교환: "</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>정수 1 입력: 4정수 2 입력: 5두 수의 합:  9두 수의 평균:  4.5두 수 교환:  5 4</code></pre>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Python/">Python</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/Python/">Python</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%95%A8%EC%88%98/">함수</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/20/Study/Postech/Python/%E2%85%A5.%20%ED%95%A8%EC%88%98%EC%99%80%20%EB%AA%A8%EB%93%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 프로그래밍 2: Ⅴ. 제어 문장 2</title>
      <link>https://ne-choi.github.io/2021/01/19/Study/Postech/Python/%E2%85%A4.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%202/</link>
      <guid>https://ne-choi.github.io/2021/01/19/Study/Postech/Python/%E2%85%A4.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%202/</guid>
      <pubDate>Tue, 19 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, Python 프로그래밍 Ⅱ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅴ-제어-문장-2&quot;&gt;&lt;a href=&quot;#Ⅴ-제어-문장-2&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, Python 프로그래밍 Ⅱ 과정입니다. </li></ul><h1 id="Ⅴ-제어-문장-2"><a href="#Ⅴ-제어-문장-2" class="headerlink" title="Ⅴ. 제어 문장 2"></a>Ⅴ. 제어 문장 2</h1><h2 id="1-반복문-for-while"><a href="#1-반복문-for-while" class="headerlink" title="1. 반복문(for, while)"></a>1. 반복문(for, while)</h2><h3 id="제어문-Control-statements-종류"><a href="#제어문-Control-statements-종류" class="headerlink" title="제어문(Control statements) 종류"></a>제어문(Control statements) 종류</h3><ul><li>조건문: 조건에 따라 프로그램 흐름을 제어하는 명령문<ul><li>if, if elif</li></ul></li><li>반복문: 조건에 따라 정해진 문장을 반복 수행하는 명령문<ul><li>for, while</li></ul></li><li>분기문(Jump Statements)<ul><li>return, break, continue</li></ul></li></ul><h3 id="Computational-Thinking"><a href="#Computational-Thinking" class="headerlink" title="Computational Thinking"></a>Computational Thinking</h3><ul><li>컴퓨팅 사고력: 컴퓨터가 문제를 해결하는 방식을 현실 문제 해결에 적용하는 것<ul><li>추상화: 실제 세계 문제를 해결 가능한 형태로 표현하기 위한 사고 과정</li><li>자동화: 추상화 과정에서 만들어진 해결 모델을 컴퓨터가 이해할 수 있는 프로그래밍 언어로 표현하는 것</li></ul></li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ul><li>반복적이고 지루한 작업을 컴퓨터를 이용해 자동화</li><li>for: 리스트나 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어 “수행할 문장 1”, “수행할 문장 2” 등 수행</li></ul><pre class="line-numbers language-none"><code class="language-none">for 변수 in 리스트(or 튜플, 문자열):    수행할 문장 1    수행할 문장 2    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="참고-range-함수"><a href="#참고-range-함수" class="headerlink" title="참고: range() 함수"></a>참고: range() 함수</h3><pre class="line-numbers language-none"><code class="language-none">range([start,] stop [,step]) # [] 생략 가능<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>range(start, stop)과 같이 호출하면 start부터 시작해서 (stop-1)까지의 정수 생성</li><li>stop은 포함되지 않음</li><li>start부터 stop-1까지 step 간격으로 정수 생성</li><li>range(10): 0부터 9까지의 정수가 생성</li></ul><pre class="line-numbers language-none"><code class="language-none">range(start, stop, step)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>지정된 범위 값을 반환</li><li>특정 구간의 정수 생성 가능</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello Python~!!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Hello Python~!!Hello Python~!!Hello Python~!!Hello Python~!!Hello Python~!!</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 리스트형</span><span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"나은"</span><span class="token punctuation">,</span> <span class="token string">"선호"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"안녕! "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>안녕! 나은안녕! 선호</code></pre><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul><li>조건의 결과(참 or 거짓)에 따라 특정 부분 처리를 반복 실행하는 제어문장</li><li>조건문이 참인 동안 while문 아래에 속하는 문장들이 반복하여 수행</li></ul><pre class="line-numbers language-none"><code class="language-none">while 조건문:    수행할 문장 1    수행할 문장 2    수행할 문장 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello 김선호 배우님"</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"반복이 종료되었습니다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Hello 김선호 배우님Hello 김선호 배우님Hello 김선호 배우님Hello 김선호 배우님Hello 김선호 배우님반복이 종료되었습니다.</code></pre><h3 id="분기문-Jump-Statement"><a href="#분기문-Jump-Statement" class="headerlink" title="분기문(Jump Statement)"></a>분기문(Jump Statement)</h3><ul><li>반복문 탈출하는 break문</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"for문을 %d번 실행"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>for문을 1번 실행</code></pre><ul><li>반복문으로 다시 돌아가는 continue문<ul><li>블록 남은 부분을 건너 뛰고 무조건 처음으로 돌아감</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">hap<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    hap <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1-100의 합계(3의 배수 제외): %d"</span> <span class="token operator">%</span> hap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1-100의 합계(3의 배수 제외): 3367</code></pre><h2 id="2-반복문-실습"><a href="#2-반복문-실습" class="headerlink" title="2. 반복문 실습"></a>2. 반복문 실습</h2><h3 id="정수들의-합"><a href="#정수들의-합" class="headerlink" title="정수들의 합"></a>정수들의 합</h3><ul><li>for문 사용</li><li>1부터 사용자가 입력한 수 n까지 더하여 (1+2+3+…+n)을 계산하는 프로그램 작성</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 반복을 이용한 정수합 프로그램</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#sum을 저장할 수 있는 변수 생성</span>limit <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"어디까지 계산할까요?: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> limit<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#stop이 -1 되어 있기 때문에 +1 해줌</span>    <span class="token builtin">sum</span> <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1부터 "</span><span class="token punctuation">,</span>limit<span class="token punctuation">,</span><span class="token string">"까지의 정수 합 ="</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>어디까지 계산할까요?: 501부터  50 까지의 정수 합 = 1275</code></pre><h3 id="팩토리얼-계산"><a href="#팩토리얼-계산" class="headerlink" title="팩토리얼 계산"></a>팩토리얼 계산</h3><ul><li>for문 사용</li><li>팩토리얼 n!은 1부터 n까지 정수를 모두 곱한 것</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">fact <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token comment">#초기값으로 실수를 넣음</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"정수를 입력하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#range의 stop이 n-1이기 때문에 +1을 해줌</span>    fact <span class="token operator">=</span> fact <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">"!은"</span><span class="token punctuation">,</span> fact<span class="token punctuation">,</span><span class="token string">"이다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>정수를 입력하시오: 55 !은 120.0 이다.</code></pre><h3 id="자리수의-합"><a href="#자리수의-합" class="headerlink" title="자리수의 합"></a>자리수의 합</h3><ul><li>정수 안 각 자리수의 합을 계산하는 프로그램 작성</li><li>e.g. 1234 → 1+2+3+4</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">number <span class="token operator">=</span> <span class="token number">1234</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    digit <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">10</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> digit    number <span class="token operator">=</span> number <span class="token operator">//</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"자리수의 합은 %d입니다."</span> <span class="token operator">%</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>자리수의 합은 10입니다.</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"정수를 입력하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"입력한 수는: "</span><span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    digit <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">10</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> digit    number <span class="token operator">=</span> number <span class="token operator">//</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"자리수의 합은 %d입니다."</span> <span class="token operator">%</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>정수를 입력하시오: 555입력한 수는:  555자리수의 합은 15입니다.</code></pre><h3 id="숫자-맞추기-게임"><a href="#숫자-맞추기-게임" class="headerlink" title="숫자 맞추기 게임"></a>숫자 맞추기 게임</h3><ul><li>컴퓨터가 선택한 숫자를 사용자가 맞추는 게임</li><li>입력한 숫자가 선택한 숫자보다 높은 수인지 낮은 수인지 정보 제공</li><li>시도 횟수 제공</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomtries <span class="token operator">=</span> <span class="token number">0</span>number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#1부터 100사이의 숫자를 랜덤으로 컴퓨터가 선택</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1부터 100 사이의 숫자를 맞추시오."</span><span class="token punctuation">)</span><span class="token keyword">while</span> tries <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token comment">#시도횟수 제한: 10회</span>    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"숫자를 입력하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tries <span class="token operator">=</span> tries <span class="token operator">+</span> <span class="token number">199</span>    <span class="token keyword">if</span> guess <span class="token operator">&lt;</span> number<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Up."</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> guess <span class="token operator">></span> number<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Down."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">if</span> guess <span class="token operator">==</span> number<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"축하합니다. 시도횟수: "</span><span class="token punctuation">,</span> tries<span class="token punctuation">,</span><span class="token string">"회"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"정답은 "</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span><span class="token string">"입니다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1부터 100 사이의 숫자를 맞추시오.숫자를 입력하시오: 55Down.정답은  51 입니다.</code></pre><h3 id="커피-자판기"><a href="#커피-자판기" class="headerlink" title="커피 자판기"></a>커피 자판기</h3><ul><li>수정 필요</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">coffee <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"커피 재고: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>money <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"돈: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> money<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n돈을 받았으니 4000원 짜리 커피를 줍니다."</span><span class="token punctuation">)</span>    money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">4000</span>    <span class="token keyword">if</span> money <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"커피를 구매할 수 없습니다."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> money <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"커피를 1잔 구매했습니다. 남은 돈은 %d원입니다."</span> <span class="token operator">%</span> money<span class="token punctuation">)</span>        coffee <span class="token operator">=</span> coffee <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"남은 커피의 양은 %d개입니다."</span> <span class="token operator">%</span> coffee<span class="token punctuation">)</span>        coffee <span class="token operator">&lt;</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"커피가 다 떨어졌습니다. 판매를 중지합니다."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> money<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"예산이 다 떨어졌습니다. 커피를 구매할 수 없습니다."</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Python/">Python</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/Python/">Python</category>
      
      <category domain="https://ne-choi.github.io/tags/for%EB%AC%B8/">for문</category>
      
      <category domain="https://ne-choi.github.io/tags/while%EB%AC%B8/">while문</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/19/Study/Postech/Python/%E2%85%A4.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%202/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 프로그래밍 1: Ⅳ. 제어 문장 1</title>
      <link>https://ne-choi.github.io/2021/01/18/Study/Postech/Python/%E2%85%A3.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%201/</link>
      <guid>https://ne-choi.github.io/2021/01/18/Study/Postech/Python/%E2%85%A3.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%201/</guid>
      <pubDate>Mon, 18 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, Python 프로그래밍 Ⅰ 과정입니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅳ-제어-문장-1&quot;&gt;&lt;a href=&quot;#Ⅳ-제어-문장-1&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, Python 프로그래밍 Ⅰ 과정입니다. </li></ul><h1 id="Ⅳ-제어-문장-1"><a href="#Ⅳ-제어-문장-1" class="headerlink" title="Ⅳ. 제어 문장 1"></a>Ⅳ. 제어 문장 1</h1><h2 id="1-조건문-if-else"><a href="#1-조건문-if-else" class="headerlink" title="1. 조건문(if else)"></a>1. 조건문(if else)</h2><h3 id="제어-문장"><a href="#제어-문장" class="headerlink" title="제어 문장"></a>제어 문장</h3><ul><li>Sequence (순차)</li><li>Selecton (선택) - 조건문<ul><li>if else, if elif</li></ul></li><li>Repetition (반복) - 조건문<ul><li>loop: for, while</li></ul></li></ul><h3 id="조건문-공부가-필요한-이유"><a href="#조건문-공부가-필요한-이유" class="headerlink" title="조건문 공부가 필요한 이유"></a>조건문 공부가 필요한 이유</h3><ul><li>예제: 일상 생활 문제_성적처리<ol><li>성적자료를 입력 받아 변수에 저장<ul><li>변수 선언 (python101)</li><li>입력 함수: input 함수 (int형으로 입력 받기)</li></ul></li><li>점수에 따라 학점을 계산하기 위해 필요한 연산자<ul><li>관계 연산자: (python101 &gt;= 90)</li></ul></li><li>조건에 따라 프로그램의 흐름을 제어하는 명령어<ul><li>조건 명령어: if else</li><li>여러 조건 비교 명령어: if elif</li></ul></li></ol></li></ul><h3 id="조건문-if"><a href="#조건문-if" class="headerlink" title="조건문_if"></a>조건문_if</h3><ul><li>조건의 결과(참 or 거짓)에 따라 프로그램 흐름을 제어하는 문장</li><li>어떤 조건을 만족하면 그에 해당하는 일이 처리되는 문장</li></ul><pre class="line-numbers language-none"><code class="language-none">if (expression):        statement1next_statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>조건문의 결과가 참(True)이면 A를 수행<pre class="line-numbers language-none"><code class="language-none">if 조건문:---→수행할 문장 1---→수행할 문장 2     ...  ...---→수행할 문장 n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>블록(Block)<ul><li>여러 코드가 이루는 일정한 구역</li><li>python의 경우, 들여쓰기로 구역을 나눔</li><li>들여쓰기는 스페이스나 탭을 사용<ul><li>스페이스 4칸 사용 권장</li></ul></li></ul></li></ul><h3 id="조건문-if-else"><a href="#조건문-if-else" class="headerlink" title="조건문_if else"></a>조건문_if else</h3><ul><li>조건의 결과가 참(True)이면 if문 바로 다음 문장(if 블록)들을 수행</li><li>조건의 결과가 거짓(False)이면 else문 다음의 문장(else 블록)들을 수행<pre class="line-numbers language-none"><code class="language-none">if 조건문:    수행할 문장 1    수행할 문장 2else:    수행할 문장 A    수행할 문장 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">200</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"참"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"100보다 작다"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"거짓"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"100보다 크거나 같다"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"프로그램 끝"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>거짓100보다 크거나 같다프로그램 끝</code></pre><h3 id="조건문-중첩-if"><a href="#조건문-중첩-if" class="headerlink" title="조건문_중첩 if"></a>조건문_중첩 if</h3><pre class="line-numbers language-none"><code class="language-none">if 조건 A:    if 조건 1:         수행할 문장 A1    else:        수행할 문장 A2else:    수행할 문장 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>예제<br>마트에 사과가 신선하면 사과를 사기로 한다. 만약 사과가 개당 1,000원 미만이면 10개를 산다. 하지만, 사과가 개당 1,000원 이상이면 5개만 산다.</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">appleQuality <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"사과의 상태를 입력하시오: "</span><span class="token punctuation">)</span>applePrice <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"사과 1개의 가격을 입력하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> appleQuality <span class="token operator">==</span> <span class="token string">"신선"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> applePrice <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10개를 산다."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5개를 산다."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"사과를 사지 않는다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>사과의 상태를 입력하시오: 안신선사과 1개의 가격을 입력하시오: 400사과를 사지 않는다.</code></pre><h3 id="조건문-if-elif"><a href="#조건문-if-elif" class="headerlink" title="조건문_if elif"></a>조건문_if elif</h3><ul><li>여러 개의 조건을 비교하여 조건에 맞는 문장 수행<pre class="line-numbers language-none"><code class="language-none">if 조건 A:    수행할 문장 Aelif 조건 B:    수행할 문장 Belif 조건 C:    수행할 문장 Celse:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>예제<br>1개의 정수를 입력 받아 양수, 0 , 음수를 판별</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"정수를 입력하시오: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"입력된 정수는 음수입니다."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"입력된 정수는 0입니다."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"입력된 정수는 양수입니다."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>정수를 입력하시오: -4입력된 정수는 음수입니다.</code></pre><h2 id="2-조건문-실습"><a href="#2-조건문-실습" class="headerlink" title="2. 조건문 실습"></a>2. 조건문 실습</h2><ul><li>성적 처리 예제 실습</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">python101 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"python 점수를 입력하세요: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> python101 <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"파이썬 프로그래밍 학점은 A입니다."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> python101 <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"파이썬 프로그래밍 학점은 B입니다."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> python101 <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"파이썬 프로그래밍 학점은 C입니다."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> python101 <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"파이썬 프로그래밍 학점은 D입니다."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"파이썬 프로그래밍 학점은 F입니다."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"고생하셨습니다!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>python 점수를 입력하세요: 80파이썬 프로그래밍 학점은 B입니다.고생하셨습니다!</code></pre><ul><li>가위바위보 게임 예제 실습<ol><li>난수 생성 (컴퓨터의 가위바위보 선택을 위해)<ul><li>라이브러리 함수 활용(import random)</li></ul></li><li>사용자 선택 변수를 입력 받아 변수에 저장<ul><li>변수 선언(player)</li><li>입력 함수: input 함수</li></ul></li><li>조건에 따라 난수 생성<ul><li>난수 함수 활용 (number = random.randint(0,2))</li></ul></li><li>생성된 난수를 활용해 가위바위보 게임 알고리즘 만들기<ul><li>게임 규칙에 따라</li><li>여러 조건에 따라 수행되는 문장 만들기 (if elif)</li></ul></li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random <span class="token comment"># 난수 생성</span>player <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"(가위, 바위, 보) 중 하나를 선택하세요: "</span><span class="token punctuation">)</span>number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 정수 난수 0,1,2 중 1개 생성</span><span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    computer <span class="token operator">=</span> <span class="token string">"가위"</span><span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    computer <span class="token operator">=</span> <span class="token string">"바위"</span><span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>     computer <span class="token operator">=</span> <span class="token string">"보"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"사용자: "</span><span class="token punctuation">,</span> player<span class="token punctuation">,</span> <span class="token string">"컴퓨터: "</span><span class="token punctuation">,</span> computer<span class="token punctuation">)</span><span class="token keyword">if</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"비겼음"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> <span class="token string">"가위"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> computer <span class="token operator">==</span> <span class="token string">"바위"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"컴퓨터 승"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"사용자 승"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> <span class="token string">"바위"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> computer <span class="token operator">==</span> <span class="token string">"보"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"컴퓨터 승"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"사용자 승"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> player <span class="token operator">==</span> <span class="token string">"보"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> computer <span class="token operator">==</span> <span class="token string">"가위"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"컴퓨터 승"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"사용자 승"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(가위, 바위, 보) 중 하나를 선택하세요: 가위사용자:  가위 컴퓨터:  바위컴퓨터 승</code></pre>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Python/">Python</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/18/Study/Postech/Python/%E2%85%A3.%20%EC%A0%9C%EC%96%B4%20%EB%AC%B8%EC%9E%A5%201/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 2: Ⅷ. 회귀분석을 이용한 예측모형</title>
      <link>https://ne-choi.github.io/2021/01/14/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A7_%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D%EC%9D%84_%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</link>
      <guid>https://ne-choi.github.io/2021/01/14/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A7_%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D%EC%9D%84_%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</guid>
      <pubDate>Thu, 14 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅷ-회귀분석을-이용한-예측모형&quot;&gt;&lt;a href=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.</li></ul><h1 id="Ⅷ-회귀분석을-이용한-예측모형"><a href="#Ⅷ-회귀분석을-이용한-예측모형" class="headerlink" title="Ⅷ. 회귀분석을 이용한 예측모형"></a>Ⅷ. 회귀분석을 이용한 예측모형</h1><h2 id="1-선형모형의-특성과-상관분석"><a href="#1-선형모형의-특성과-상관분석" class="headerlink" title="1. 선형모형의 특성과 상관분석"></a>1. 선형모형의 특성과 상관분석</h2><h3 id="데이터의-상관관계"><a href="#데이터의-상관관계" class="headerlink" title="데이터의 상관관계"></a>데이터의 상관관계</h3><ul><li>데이터 탐색: 변수 간 관계<ul><li>변수 간 상관관계 여부</li><li>상관관계 형태</li></ul></li></ul><h3 id="상관계수-Pearson’s"><a href="#상관계수-Pearson’s" class="headerlink" title="상관계수(Pearson’s)"></a>상관계수(Pearson’s)</h3><ul><li>상관계수(correlation coefficient)<ul><li>두 변수 간 선형관계의 강도를 나타내주는 척도</li></ul></li><li>상관계수(r) 절댓값은 0-1 사이<ul><li>0에 가까울수록 상관관계가 없음</li><li>1에 가까울수록 강한 상관성이 있음</li></ul></li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li>상관계수 및 변수 간 산점도: 데이터 탐색</li><li>X, Y 간 선형관계를 산점도에 도식화</li><li>X, Y 간 선형함수식 추정: 회귀모형</li><li>Y 분산에 관한 독립변수를 추가함으로써 선형모형 설명력 향상</li></ul><h2 id="2-실제데이터-예측모형구현"><a href="#2-실제데이터-예측모형구현" class="headerlink" title="2. 실제데이터 예측모형구현"></a>2. 실제데이터 예측모형구현</h2><h3 id="회귀모형의-적합-조선"><a href="#회귀모형의-적합-조선" class="headerlink" title="회귀모형의 적합 조선"></a>회귀모형의 적합 조선</h3><ul><li><p>회귀분석- 예측모형</p></li><li><p>회귀분석의 목적: 예측(prediction)과 추정(estimation)</p><ul><li>선형모형: 독립변수와 종속변수 관계가 선형식으로 적합<ul><li>최소자승법(least squares method): 예측값과 관측치 오차를 최소화시키는 회귀계수 추정</li></ul></li></ul></li><li><p>예측 모형</p><ul><li>회귀 계수(regression coefficient)와 독립변수의 선형 결합으로 표현되는 예측모형</li><li>Y = β<del>0</del> + β<del>1</del>x<del>1</del> + β<del>2</del>x<del>2</del> + … + β<del>k</del>x<del>k</del><ul><li>Y: 종속변수(dependent variable), 반응변수, 타겟변수</li><li>x: 독립변수(independent variable), 설명변수, 원인 역할을 하는 변수</li></ul></li></ul></li></ul><h3 id="회귀모형의-적합도-및-회귀성-검정"><a href="#회귀모형의-적합도-및-회귀성-검정" class="headerlink" title="회귀모형의 적합도 및 회귀성 검정"></a>회귀모형의 적합도 및 회귀성 검정</h3><ul><li>모형의 적합도와 결정계수 (R^2^)<ul><li>회귀식이 데이터를 얼마나 잘 설명하는지에 관한 척도</li><li>회귀모형으로 설명할 수 있는 부분의 비율</li><li>0 ≤ R^2^ ≤ 1</li><li>R^2^ = $\frac{SSR}{SST}$ = 1 - $\frac{SSE}{SST}$</li></ul></li></ul><h3 id="회귀모형의-가정과-진단"><a href="#회귀모형의-가정과-진단" class="headerlink" title="회귀모형의 가정과 진단"></a>회귀모형의 가정과 진단</h3><ul><li><p>가정</p><ul><li>X와 Y는 선형적 관계</li><li>오차항(ε<del>i</del>)은 정규분포를 따름</li><li>오차항의 평균은 0</li><li>오차항의 등분산성</li><li>오차항은 서로 독립</li></ul></li><li><p>진단</p><ul><li>잔차 e<del>i</del>와 Y 산점도</li><li>스튜던트화 잔차</li><li>정규확률분포도</li></ul></li></ul><h3 id="회귀계수에-대한-검정"><a href="#회귀계수에-대한-검정" class="headerlink" title="회귀계수에 대한 검정"></a>회귀계수에 대한 검정</h3><ul><li><p>β<del>1</del> 관한 t-검정</p><ul><li>해당 독립변수가 유의한 영향을 갖고 있는지 판단</li></ul></li><li><p>회귀계수의 p-value</p><ul><li>특정변수의 회귀계수에 관한 p-value가 유의수준(α)보다 작으면 그 변수는 유의(significant)하다고 판단</li></ul></li></ul><h3 id="정리-1"><a href="#정리-1" class="headerlink" title="정리"></a>정리</h3><ul><li>회귀모형의 적합도 검정<ul><li>이론적인 모형이 실제 관측 데이터에 의해 어느 정도 지지를 받는지 검정하는 것<ul><li>R^2^ 결정계수: 회귀모형의 설명력</li><li>개별 β<del>k</del>값 검정: 어떤 변수가 중요한지</li><li>잔차에 관한 가정 확인: 잔차산점도</li></ul></li></ul></li></ul><h2 id="3-회귀모형의-적합조건"><a href="#3-회귀모형의-적합조건" class="headerlink" title="3. 회귀모형의 적합조건"></a>3. 회귀모형의 적합조건</h2><h3 id="실제-데이터로-예측모형-구현"><a href="#실제-데이터로-예측모형-구현" class="headerlink" title="실제 데이터로 예측모형 구현"></a>실제 데이터로 예측모형 구현</h3><ul><li>다중회귀모형(multiple regression)<ul><li>종속변수 Y를 설명하는 데 k개의 독립변수가 있을 때의 회귀모형</li><li>Y<del>i</del> = β<del>0</del> + β<del>1</del>x<del>1</del> + β<del>2</del>x<del>2</del> + … + β<del>k</del>x<del>k</del> + ε<del>i</del>(잔차)</li><li>회귀계수 β<del>k</del>의 해석: 다른 독립변수가 일정할 때, X<del>k</del> 한 단위 변화에 따른 평균변화량</li></ul></li></ul><h3 id="다중회귀모형-예제"><a href="#다중회귀모형-예제" class="headerlink" title="다중회귀모형 예제"></a>다중회귀모형 예제</h3><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">car &lt;- read.csv(&#39;.&#x2F;data&#x2F;autompg.csv&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">r1 &lt;- lm(mpg ~ disp+hp+wt+accler, data&#x3D;car)summary(r1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>결과 해석</p><ul><li>선형회귀식: mpg = 40.88 - 0.001 disp + 0.0048 hp - 0.0061 wt + 0.17 accler</li><li>선형회귀식의 결정계수: R^2^ = 0.7006<ul><li>분산을 70% 정도 설명한다고 해석할 수 있음</li></ul></li></ul></li><li><p>문제</p><ul><li>마력(hp)이 높을수록 연비가 좋은가? 일반적으로는 아니기 때문에 데이터 탐색 필요</li></ul></li></ul><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">var1 &lt;- c(&quot;mpg&quot;, &quot;disp&quot;, &quot;hp&quot;, &quot;wt&quot;, &quot;accler&quot;)pairs(car[var1], main&#x3D;&quot;Autompg&quot;, cex&#x3D;1, col&#x3D;as.integer(car$cyl))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>다중공선성(Multicollinearity)<ul><li>독립변수들 사이 상관관계가 높은 경우</li><li>다중공선성이 존재하면, 회귀계수 분산이 크고 모형이 불안정</li><li>해당 예제에서는 disp(배기량) 제외하는 것이 더 좋음</li></ul></li></ul><ul><li>hp 기준으로 두 개의 모델로 분류해 예측하기<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">car2 &lt;- subset(car, hp&lt;50)attach(car2)r2 &lt;- lm(mpg~hp+wt+accler, data&#x3D;car2)summary(r2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">car3 &lt;- subset(car, hp&gt;&#x3D;50)attach(car3)r3 &lt;- lm(mpg~hp+wt+accler, data&#x3D;car2)summary(r3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-예측모형의-핵심과-고려사항"><a href="#4-예측모형의-핵심과-고려사항" class="headerlink" title="4. 예측모형의 핵심과 고려사항"></a>4. 예측모형의 핵심과 고려사항</h2><h3 id="분류분석-로지스틱회귀모형"><a href="#분류분석-로지스틱회귀모형" class="headerlink" title="분류분석- 로지스틱회귀모형"></a>분류분석- 로지스틱회귀모형</h3><ul><li><p>타겟변수(Y)가 범주형일 때</p><ul><li>binary: 2개의 범주 (보험사기, 질병)</li><li>ordinal(서열): 서열이 있는 범주 (순위)</li><li>nominal(명목): 서열이 없는 범주 (직업군)</li></ul></li><li><p>로지스틱회귀모형</p><ul><li>Y가 범주이기 때문에 선형 조합이 나옴</li><li>로짓 트랜스포메이션을 해서 확률값으로 변형</li></ul></li></ul><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">re &lt;- read.csv(&#39;.&#x2F;data&#x2F;remiss.csv&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">t3 &lt;- glm(remiss~cell+li+temp, data&#x3D;re,family&#x3D;binomial(logit))summary(t3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>결과 해석<ul><li>logistic equation<ul><li>logit(p) = 67.63 + 9.65 Cell + 3.87 Li - 82.07 Temp</li></ul></li><li>Li 1단위 증가 시 remission 확률: exp(3.867) = 47.79</li></ul></li></ul><ul><li>예측확률값 출력: 원래 데이터 + 예측확률값<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">dat1_pred &lt;- cbind(re,t3$fitted.values)write.table(dat1_pred,file&#x3D;&#39;dat1_pred.csv&#39;, row.names&#x3D;FALSE, sep&#x3D;&quot;,&quot;, na&#x3D;&quot; &quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="예측모형-고려사항"><a href="#예측모형-고려사항" class="headerlink" title="예측모형 고려사항"></a>예측모형 고려사항</h3><ul><li><p>예측모형 선택</p><ul><li>예측모형(어느 모형, 어느 기법)<ul><li>결정계수(기여율)가 높은 회귀식: 설명변수가 많을수록 결정계수가 높아짐</li><li>추정값의 표준오차(잔차의 표준편차)가 낮은 회귀식</li></ul></li><li>변수 선택방법<ul><li>모든 가능한 회귀: 모든 설명변수를 포함한 모형을 시도</li><li>단계적 선택법(stepwise regression): 설명변수를 단계적으로 선택하는 방법</li></ul></li></ul></li><li><p>이상치(outlier) 탐지</p><ul><li>이상치(outlier): 보편적인 데이터 값 번위를 벗어나는 데이터</li><li>왜곡된 예측모형 위험이 있으므로 이상치 제외 후 분석</li><li>이상치 탐색<ul><li>거리 계산: 각 데이터와 독립변수 평균과의 거리가 크거나, 회귀모형에서의 잔차 이상 수치 확인</li><li>산점도: 변수들 간 산점도에서 탐색</li></ul></li></ul></li></ul><h3 id="정리-2"><a href="#정리-2" class="headerlink" title="정리"></a>정리</h3><ol><li>데이터 수집(DB, 설문조사)</li><li>종속변수(타겟변수)와 관계 있는 독립변수(설명변수) 확인</li><li>산포도 작성 → 데이터 특성 파악 및 이상치 탐색</li><li>회귀모형 결정(변수 선택/ 특징 변환)</li><li>회귀모형 적합도 평가</li></ol>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%9A%8C%EA%B7%80%EB%AA%A8%ED%98%95/">회귀모형</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/14/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A7_%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D%EC%9D%84_%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 2: Ⅶ. 빅데이터 차원축소와 예측모형</title>
      <link>https://ne-choi.github.io/2021/01/13/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A6_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%B0%A8%EC%9B%90%EC%B6%95%EC%86%8C%EC%99%80_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</link>
      <guid>https://ne-choi.github.io/2021/01/13/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A6_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%B0%A8%EC%9B%90%EC%B6%95%EC%86%8C%EC%99%80_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</guid>
      <pubDate>Wed, 13 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅶ-빅데이터-차원축소와-예측모형&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.</li></ul><h1 id="Ⅶ-빅데이터-차원축소와-예측모형"><a href="#Ⅶ-빅데이터-차원축소와-예측모형" class="headerlink" title="Ⅶ. 빅데이터 차원축소와 예측모형"></a>Ⅶ. 빅데이터 차원축소와 예측모형</h1><h2 id="1-데이터-탐색과-정제"><a href="#1-데이터-탐색과-정제" class="headerlink" title="1. 데이터 탐색과 정제"></a>1. 데이터 탐색과 정제</h2><h3 id="데이터-탐색"><a href="#데이터-탐색" class="headerlink" title="데이터 탐색"></a>데이터 탐색</h3><ul><li>Basic Information: 분포, 평균, 최솟값, 최댓값, 분산 등</li><li>Variation: 변동성, 시계열</li><li>Outlier: 모든 데이터가 상식적인 범위 안에 존재하는가?</li><li>Correlation: 변수 간 상관성, 변수 간 상호작용이 있는가?</li></ul><h2 id="2-빅데이터의-차원축소"><a href="#2-빅데이터의-차원축소" class="headerlink" title="2. 빅데이터의 차원축소"></a>2. 빅데이터의 차원축소</h2><h3 id="차원축소기법은-왜-필요한가"><a href="#차원축소기법은-왜-필요한가" class="headerlink" title="차원축소기법은 왜 필요한가"></a>차원축소기법은 왜 필요한가</h3><ul><li><p>현업 데이터의 특성</p><ul><li>타겟변수 특성에 영향을 미치는 요인이 매우 많음</li></ul></li><li><p>변수 간 다중공선성(높은 상관관계, 상호작용)</p></li><li><p>과적합 위험 증가</p></li><li><p>타겟값 정보가 들어있는 구조 파악이 어려움</p></li></ul><h3 id="차원축소기법-주성분분석"><a href="#차원축소기법-주성분분석" class="headerlink" title="차원축소기법- 주성분분석"></a>차원축소기법- 주성분분석</h3><ul><li><p>주성분분석(Principal Component Analysis; PCA)</p><ul><li>가장 대표적인 차원 숙소 방법</li><li>첫 번째 변수가 전체 분산을 가장 많이 설명하고, 다음 변수가 나머지 분산을 가장 많이 설명하는 방식으로 변수 생성</li><li>새로 구성된 변수는 서로 독립</li></ul></li><li><p>주성분분석 시행 방법</p><ol><li>데이터 공간에서 분산이 최대인 축을 찾는다. (첫 번째 주성분: PC1)</li><li>첫 번째 축과 직교하며 분산이 최대인 두 번째 축을 찾는다. (두 번째 주성분: PC2)</li></ol></li><li><p>최적 주성분 찾기</p><ul><li>전체 변동에 대한 기여도: 전체 변동의 약 90%를 설명하는 차원까지</li><li>Scree plot 활용: 기울기가 갑자기 줄어드는 차원까지</li></ul></li></ul><h2 id="3-데이터-변환에-의한-저차원-시각화"><a href="#3-데이터-변환에-의한-저차원-시각화" class="headerlink" title="3. 데이터 변환에 의한 저차원 시각화"></a>3. 데이터 변환에 의한 저차원 시각화</h2><h3 id="고차원데이터의-차원축소"><a href="#고차원데이터의-차원축소" class="headerlink" title="고차원데이터의 차원축소"></a>고차원데이터의 차원축소</h3><ul><li><p>데이터 유형 파악</p><ul><li>Classification(Y: 범주형)</li><li>Prediction(Y: 연속형)</li></ul></li><li><p>변수 선택(feature selection) 기법</p><ul><li>특정 변수를 선택하여 모델링</li><li>다중공선성 존재하는 변수는 그 중 하나의 변수만 선택</li></ul></li><li><p>특징 추출(feature extraction) 기법</p><ul><li>새로운 축을 생성했을 때 생기는 변화</li><li>고차원 데이터 정보를 보존하며 노이즈를 제거하는 방식으로 특징 추출</li></ul></li></ul><h3 id="고차원데이터의-저차원-시각화"><a href="#고차원데이터의-저차원-시각화" class="headerlink" title="고차원데이터의 저차원 시각화"></a>고차원데이터의 저차원 시각화</h3><ul><li>주성분분석: 선형 추출 기법</li><li>인접보존기법: 비선형 추출 기법</li></ul><h3 id="차원축소와-예측모형"><a href="#차원축소와-예측모형" class="headerlink" title="차원축소와 예측모형"></a>차원축소와 예측모형</h3><ul><li>Feature Ectraction<ul><li>인접보존기법</li><li>제한적 볼츠만머신</li><li>오토인코더</li></ul></li><li>Classifier</li></ul><h2 id="4-데이터와-예측모형"><a href="#4-데이터와-예측모형" class="headerlink" title="4. 데이터와 예측모형"></a>4. 데이터와 예측모형</h2><h3 id="데이터와-예측모형"><a href="#데이터와-예측모형" class="headerlink" title="데이터와 예측모형"></a>데이터와 예측모형</h3><ul><li><p><code>데이터 정제 → 데이터 탐색</code> → 통계적 모델링(통계모형, 기계학습, 인공지능)</p></li><li><p>데이터 분석목적</p><ul><li>예측(prediction)</li><li>분류(classification)</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%A3%BC%EC%84%B1%EB%B6%84%EB%B6%84%EC%84%9D/">주성분분석</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%B0%A8%EC%9B%90%EC%B6%95%EC%86%8C/">차원축소</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/13/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A6_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%B0%A8%EC%9B%90%EC%B6%95%EC%86%8C%EC%99%80_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 2: Ⅵ. 현업 데이터 특성과 예측모형</title>
      <link>https://ne-choi.github.io/2021/01/12/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A5_%ED%98%84%EC%97%85_%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8A%B9%EC%84%B1%EA%B3%BC_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</link>
      <guid>https://ne-choi.github.io/2021/01/12/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A5_%ED%98%84%EC%97%85_%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8A%B9%EC%84%B1%EA%B3%BC_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/</guid>
      <pubDate>Tue, 12 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅵ-현업-데이터-특성과-예측모형&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.</li></ul><h1 id="Ⅵ-현업-데이터-특성과-예측모형"><a href="#Ⅵ-현업-데이터-특성과-예측모형" class="headerlink" title="Ⅵ. 현업 데이터 특성과 예측모형"></a>Ⅵ. 현업 데이터 특성과 예측모형</h1><h2 id="1-데이터-수집-random의-의미"><a href="#1-데이터-수집-random의-의미" class="headerlink" title="1. 데이터 수집- random의 의미"></a>1. 데이터 수집- random의 의미</h2><h3 id="데이터-수집"><a href="#데이터-수집" class="headerlink" title="데이터 수집"></a>데이터 수집</h3><ul><li>데이터 수집에서는 양질의 데이터를 확보하는 것이 중요<ul><li>나쁜 데이터로는 나쁜 모델밖에 만들 수 없음</li><li>‘대표성’, ‘랜덤’ 데이터</li></ul></li></ul><h3 id="데이터-수집-표본-추출"><a href="#데이터-수집-표본-추출" class="headerlink" title="데이터 수집_표본 추출"></a>데이터 수집_표본 추출</h3><ul><li>좋은 표본: 모집단의 특성을 가능한 정확하게 반영한 표본</li><li>표본추출에서 가장 중요한 문제는 대표성 있는 표본을 확보하는 것</li></ul><h3 id="전수조사-vs-표본조사"><a href="#전수조사-vs-표본조사" class="headerlink" title="전수조사 vs 표본조사"></a>전수조사 vs 표본조사</h3><ul><li>전수조사: 연구대상집단의 모든 데이터 수집</li><li>표본조사: 연구대상집단 일부 데이터 추출</li></ul><h3 id="랜덤의-의미"><a href="#랜덤의-의미" class="headerlink" title="랜덤의 의미"></a>랜덤의 의미</h3><ul><li>무작위 추출(Random sampling)<ul><li>모집단에서 표본을 뽑을 때 각 개체가 선택될 확률은 동일</li><li>무작위로 추출된 표본은 편의가 최대한 배제됨</li></ul></li></ul><h3 id="군집표본추출-vs-층화표본추출"><a href="#군집표본추출-vs-층화표본추출" class="headerlink" title="군집표본추출 vs 층화표본추출"></a>군집표본추출 vs 층화표본추출</h3><ul><li><p>군집표본추출(cluster sampling)</p><ul><li>각 군집(cluster)이 동일한 특성을 갖고 있다면, 그 중 무작위로 cluster 선택<ul><li>e.g. 학급, ##구, ##동</li></ul></li></ul></li><li><p>층화표본추출(stratified sampling)</p><ul><li>모집단 내 하위집단 특성이 다를 때, 하위집단을 기반으로 표본 선택<ul><li>e.g. 정치적 의견(연령별, 지역별)</li></ul></li></ul></li></ul><h3 id="복원추출-vs-비복원추출"><a href="#복원추출-vs-비복원추출" class="headerlink" title="복원추출 vs 비복원추출"></a>복원추출 vs 비복원추출</h3><ul><li>복원추출: 표본추출 시 뽑은 표본의 데이터를 다시 넣고 추출</li><li>비복원추출: 표본추출 시 추출된 표본을 제외하고 다음 추출</li></ul><h2 id="2-예측모형에서-training과-test-set"><a href="#2-예측모형에서-training과-test-set" class="headerlink" title="2. 예측모형에서 training과 test set"></a>2. 예측모형에서 training과 test set</h2><h3 id="예측모형을-구현할-때"><a href="#예측모형을-구현할-때" class="headerlink" title="예측모형을 구현할 때"></a>예측모형을 구현할 때</h3><ul><li><p>e.g. 영화 추천, 음악 추천</p></li><li><p>어떻게 원하는 콘텐츠를 예측하여 추천하는가?</p><ul><li>과거 구매패턴을 분석하여 미래 구매를 예측(추천)<ul><li>과거 데이터 → 분석 → 예측 모형 → 예측</li></ul></li></ul></li><li><p>주어진 데이터 → 예측모형</p><ul><li>모형이 적절한지 어떻게 판단하는가?</li></ul></li></ul><h3 id="예측모형-좋은-예측모형"><a href="#예측모형-좋은-예측모형" class="headerlink" title="예측모형: 좋은 예측모형"></a>예측모형: 좋은 예측모형</h3><ul><li><p>좋은 예측모형이란</p><ul><li>새로운 데이터가 들어왔을 때 정확하게 예측하는 모형<ul><li>훈련데이터(Training set): 모형을 만들기 위해 사용</li><li>검증데이터(Test set): 만들어진 모형 성능 평가에 사용</li></ul></li></ul></li><li><p>k-fold cross-validation (k=3, 5, 10)</p><ul><li>주어진 데이터를 몇 개로 나눌 것인지</li><li>k-1/k는 훈련데이터로, 1/k는 검증데이터로 사용</li><li>데이터 나누는 것은 random split으로</li></ul></li></ul><h2 id="3-예측모형의-과적합-overfitting"><a href="#3-예측모형의-과적합-overfitting" class="headerlink" title="3. 예측모형의 과적합(overfitting)"></a>3. 예측모형의 과적합(overfitting)</h2><h3 id="예측모형의-과적합"><a href="#예측모형의-과적합" class="headerlink" title="예측모형의 과적합"></a>예측모형의 과적합</h3><ul><li><p>과적합(overfitting): 주어진 데이터에 과하게 적합하여, 새로운 데이터가 들어왔을 때 정확도를 보장할 수 없는 경우</p></li><li><p>과소적합(Under-fitted)</p></li><li><p>적정적합(Generalized-fitted)</p></li><li><p>과잉적합(Over-fitted)</p></li></ul><h2 id="4-over-amp-under-sampling-문제"><a href="#4-over-amp-under-sampling-문제" class="headerlink" title="4. over &amp; under sampling 문제"></a>4. over &amp; under sampling 문제</h2><h3 id="데이터-기반-예측-모형"><a href="#데이터-기반-예측-모형" class="headerlink" title="데이터 기반 예측 모형"></a>데이터 기반 예측 모형</h3><ul><li>데이터를 기반으로 모델을 생성하여 새로운 데이터 예측 가능</li></ul><h3 id="데이터-불균형-문제"><a href="#데이터-불균형-문제" class="headerlink" title="데이터 불균형 문제"></a>데이터 불균형 문제</h3><ul><li>집단 간 데이터 비율 차이가 크면 다수 집단의 정확도를 기준으로 예측모형이 결정될 수 있음<ul><li>e.g. 보험 사기 건 수</li><li>전체 데이터 25개 중, 범주 1인 22개만 정확히 분류하고 범주 2인 3개는 모두 오분류된다고 해도 전체 정확도는 88%로 높음</li></ul></li></ul><p>→ 전체 정확도 기준 이외, 소수집단 오분류율에 위험 비용을 주고 최적화된 모형을 찾는 것이 바람직함</p><h3 id="데이터-균형-맞추기"><a href="#데이터-균형-맞추기" class="headerlink" title="데이터 균형 맞추기"></a>데이터 균형 맞추기</h3><ul><li><strong>Over-sampling</strong>: 소수범주에서 다수범주 수만큼 복원 추출<ul><li>장) 정보 손실 없음</li><li>단) 소수 데이터가 단순 복사되어 과적합 가능성 있음</li></ul></li><li><strong>Under-sampling</strong>: 다수범주에서 소수범주 수만큼 랜덤하게 추출<ul><li>장) 데이터 저장 용량 감소, 데이터가 적어 실행 속도 향상</li><li>단) 중요 정보 누락될 가능성 있음</li></ul></li></ul><p>→ 혼합형 방식의 sampling 사용</p>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%91%9C%EB%B3%B8%EC%B6%94%EC%B6%9C/">표본추출</category>
      
      <category domain="https://ne-choi.github.io/tags/%EA%B3%BC%EC%A0%81%ED%95%A9/">과적합</category>
      
      <category domain="https://ne-choi.github.io/tags/%EA%B3%BC%EC%86%8C%EC%A0%81%ED%95%A9/">과소적합</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/12/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A5_%ED%98%84%EC%97%85_%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8A%B9%EC%84%B1%EA%B3%BC_%EC%98%88%EC%B8%A1%EB%AA%A8%ED%98%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 2: Ⅴ. 통계검정방법</title>
      <link>https://ne-choi.github.io/2021/01/11/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A4_%ED%86%B5%EA%B3%84%EA%B2%80%EC%A0%95%EB%B0%A9%EB%B2%95/</link>
      <guid>https://ne-choi.github.io/2021/01/11/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A4_%ED%86%B5%EA%B3%84%EA%B2%80%EC%A0%95%EB%B0%A9%EB%B2%95/</guid>
      <pubDate>Mon, 11 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅴ-통계검정방법&quot;&gt;&lt;a href=&quot;#Ⅴ-통계검정방</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅱ 과정입니다.</li></ul><h1 id="Ⅴ-통계검정방법"><a href="#Ⅴ-통계검정방법" class="headerlink" title="Ⅴ. 통계검정방법"></a>Ⅴ. 통계검정방법</h1><h2 id="1-신뢰구간의-의미"><a href="#1-신뢰구간의-의미" class="headerlink" title="1. 신뢰구간의 의미"></a>1. 신뢰구간의 의미</h2><h3 id="신뢰구간"><a href="#신뢰구간" class="headerlink" title="신뢰구간"></a>신뢰구간</h3><ul><li>신뢰구간: 구간추정<ul><li>실제 모수가 존재할 가능성이 높은 구간으로 추정</li><li>모평균, 모비율 등 모수를 포함할 확률</li><li>신뢰수준(Confidence level): 구간에 모수 μ가 포함될 확률</li><li>일반적으로 100(1-α)%로 나타냄  </li></ul></li></ul><h3 id="95-신뢰구간의-의미"><a href="#95-신뢰구간의-의미" class="headerlink" title="95% 신뢰구간의 의미"></a>95% 신뢰구간의 의미</h3><ul><li>100번의 반복샘플링으로 얻은 평균과 편차로 계산한 100개의 신뢰구간 중, 5개는 실제 모평균(μ)을 포함하고 있지 않는다.</li><li>표본을 통해 얻은 95% 신뢰구간에 실제 모평균이 포함되지 않을 확률은 5%이다</li><li>전체 집단(즉, 모집단 전체)을 조사할 수 없기 때문에 이용한다</li><li>신뢰구간은 고정된 단일 값이 아닌 움직이는 여러 값이다.</li></ul><h3 id="적당한-신뢰구간은"><a href="#적당한-신뢰구간은" class="headerlink" title="적당한 신뢰구간은?"></a>적당한 신뢰구간은?</h3><ul><li>90% 신뢰구간: z<del>α/2</del> = z<del>0.5</del> = 1.65</li><li>95% 신뢰구간: z<del>α/2</del> = z<del>0.25</del> = 1.96</li><li>99% 신뢰구간: z<del>α/2</del> = z<del>0.05</del> = 2.57  </li></ul><h3 id="표본사이즈와-허용오차"><a href="#표본사이즈와-허용오차" class="headerlink" title="표본사이즈와 허용오차"></a>표본사이즈와 허용오차</h3><ul><li>허용오차를 일정수준으로 정하면 그에 따른 표본크기가 정해짐</li><li>신뢰구간에서 허용오차에 영향을 미치는 요소<ul><li>표본의 크기, 유의수준, 표준편차 (표본평균은 X)</li></ul></li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>실험 및 조사설계 시에는 허용오차 및 신뢰수준을 고려해야 정확한 분석이 가능</li></ul><h2 id="2-통계적-검정은-왜-필요한가"><a href="#2-통계적-검정은-왜-필요한가" class="headerlink" title="2. 통계적 검정은 왜 필요한가"></a>2. 통계적 검정은 왜 필요한가</h2><h3 id="통계적-검정이란"><a href="#통계적-검정이란" class="headerlink" title="통계적 검정이란?"></a>통계적 검정이란?</h3><ul><li><p>가설의 진위 여부를 판단, 증명, 검정하는 통계적 추론 방식</p><ul><li><p><strong>귀무가설(Null Hypothesis, H0)</strong></p><ul><li>검정 대상이 되는 가설</li><li>기각(reject)을 목표로 함</li></ul></li><li><p><strong>대립가설(Alternative Hypothesis, H1)</strong></p><ul><li>귀무가설이 기각될 때 받아들여지는 가설</li><li>채택(accept)을 목표로 함</li></ul></li></ul></li><li><p>가설 검정 절차</p><ul><li>가설 설정 → 유의수준 설정 → 검정통계량 산출 → 가설 기각/채택</li></ul></li></ul><h3 id="검정-예시-T-test"><a href="#검정-예시-T-test" class="headerlink" title="검정 예시: T-test"></a>검정 예시: T-test</h3><ul><li>단측검정(one-sided test)</li><li>양측검정(two-sided test): 기각역이 양측</li></ul><h3 id="단측검정"><a href="#단측검정" class="headerlink" title="단측검정"></a>단측검정</h3><ul><li>소비자 주장) 카페에서 파는 커피 용량이 200ml보다 작다.<ul><li>귀무가설(H<del>0</del>): 커피 용량은 200ml다</li><li>대립가설(H<del>1</del>): 커피 용량은 200ml보다 적다</li></ul></li></ul><h3 id="t-분포를-이용한-검정"><a href="#t-분포를-이용한-검정" class="headerlink" title="t-분포를 이용한 검정"></a>t-분포를 이용한 검정</h3><ul><li>한 집단 혹은 두 집단 간 평균 차이에 대한 통계적 검정 방법<ul><li><strong>T-distribution</strong><ul><li>사회 현상은 평균 데이터가 많으므로 정규 분포(normal distribution) 형태</li><li>정규 분포는 표본의 데이터 수가 많아야 신뢰도가 향상됨(일반적으로 30개 이상)</li><li>데이터가 적은 경우, 예측 범위가 더 넓은 T-distribution 사용</li></ul></li><li><strong>T-test의 가정</strong><ul><li>독립성: 두 집단 변수는 서로 독립</li><li>정규성: 두 집단 데이터는 정규분포를 만족</li><li>등분산성: 두 집단 분산은 동일</li></ul></li></ul></li></ul><h3 id="통계적-검정의-계산-예시"><a href="#통계적-검정의-계산-예시" class="headerlink" title="통계적 검정의 계산 예시"></a>통계적 검정의 계산 예시</h3><ul><li>t = 표본평균 - μ / (표본표준편차(s)/표본의 수 루트)</li></ul><h2 id="3-두-집단-t-검정"><a href="#3-두-집단-t-검정" class="headerlink" title="3. 두 집단 t-검정"></a>3. 두 집단 t-검정</h2><h3 id="두-집단-간-평균-비교"><a href="#두-집단-간-평균-비교" class="headerlink" title="두 집단 간 평균 비교"></a>두 집단 간 평균 비교</h3><ul><li>학습 목표<ul><li>두 모집단 평균 비교를 위한 t-검정 계산 과정 익히기</li></ul></li></ul><h3 id="t-검정-검정통계량과-기각역"><a href="#t-검정-검정통계량과-기각역" class="headerlink" title="t-검정 검정통계량과 기각역"></a>t-검정 검정통계량과 기각역</h3><ul><li>가설 → 조사 → 데이터 → 검정통계량 → 가설에 대한 결정 (유의수준 α)<ul><li>검정통계량이 기각역 안에 있으면 귀무가설 기각 → 대립가설 인정</li></ul></li></ul><h3 id="퀴즈"><a href="#퀴즈" class="headerlink" title="퀴즈"></a>퀴즈</h3><h2 id="4-p-value의-실제-의미"><a href="#4-p-value의-실제-의미" class="headerlink" title="4. p-value의 실제 의미"></a>4. p-value의 실제 의미</h2><h3 id="p-value"><a href="#p-value" class="headerlink" title="p-value"></a>p-value</h3><ul><li>데이터 결과 자료에서 보게 되는 값</li><li>변수의 통계적 유의도를 나타내는 값 (유의확률)</li></ul><h3 id="p-value-찾기"><a href="#p-value-찾기" class="headerlink" title="p-value 찾기"></a>p-value 찾기</h3><ul><li><p>예제</p><ul><li><p>25개 표본의 과자 한 팩 평균 무게가 87g이다. (모표준편차 = 15g) 유의수준 α = 0.05에서 과자 한 팩이 80g 이상이라고 할 수 있는가?</p></li><li><p>귀무가설: μ = 80, 대립가설: μ &gt; 80</p></li><li><p>검정통계량 Z = 2.33</p></li><li><p>검정통계량이 기각역 하에 있으면 귀무가설을 기각</p></li></ul></li><li><p>결과: 과자 한 팩 무게는 80g이라는 주장을 인정</p></li><li><p>통계검정에서 p-value는?</p><ul><li>p-value는 유의확률: 대립가설에 대한 증거의 정도</li><li>p-value가 작다는 것은 그 검정이 매우 유의하다는 증거<br>→ p-value는 변수의 유의성 정도 혹은 검정의 유의도를 나타냄</li></ul></li></ul><h3 id="검정의-오류"><a href="#검정의-오류" class="headerlink" title="검정의 오류"></a>검정의 오류</h3><ul><li>통계적 추정을 해석할 때 발생하는 오차<ul><li>Type 1 error: H<del>0</del>이 참인데 기각하는 오류</li><li>Type 2 error: H<del>0</del>이 거짓인데 채택하는 오류</li></ul></li></ul><p>|||H<del>0</del> true|H<del>0</del> false|<br>|—|—|—|<br>|H<del>0</del> accept|1-α|Type 2 error(β)|<br>|H<del>0</del> reject|Type 1 error(α)|Power(1-β)|</p>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%8B%A0%EB%A2%B0%EA%B5%AC%EA%B0%84/">신뢰구간</category>
      
      <category domain="https://ne-choi.github.io/tags/t-test/">t-test</category>
      
      <category domain="https://ne-choi.github.io/tags/p-value/">p-value</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/11/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A4_%ED%86%B5%EA%B3%84%EA%B2%80%EC%A0%95%EB%B0%A9%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 1: Ⅳ. 빅데이터 분석에서 확률과 분포</title>
      <link>https://ne-choi.github.io/2021/01/07/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A3_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B6%84%EC%84%9D%EC%97%90%EC%84%9C_%ED%99%95%EB%A5%A0%EA%B3%BC_%EB%B6%84%ED%8F%AC/</link>
      <guid>https://ne-choi.github.io/2021/01/07/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A3_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B6%84%EC%84%9D%EC%97%90%EC%84%9C_%ED%99%95%EB%A5%A0%EA%B3%BC_%EB%B6%84%ED%8F%AC/</guid>
      <pubDate>Thu, 07 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅳ-빅데이터-분석에서-확률과-분포&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.</li></ul><h1 id="Ⅳ-빅데이터-분석에서-확률과-분포"><a href="#Ⅳ-빅데이터-분석에서-확률과-분포" class="headerlink" title="Ⅳ. 빅데이터 분석에서 확률과 분포"></a>Ⅳ. 빅데이터 분석에서 확률과 분포</h1><h2 id="1-확률의-기초개념"><a href="#1-확률의-기초개념" class="headerlink" title="1. 확률의 기초개념"></a>1. 확률의 기초개념</h2><h3 id="통계에-확률-개념이-필요한-이유"><a href="#통계에-확률-개념이-필요한-이유" class="headerlink" title="통계에 확률 개념이 필요한 이유"></a>통계에 확률 개념이 필요한 이유</h3><ul><li><p><strong>통계(Statistics)</strong></p><ul><li>데이터를 수집, 처리, 분석, 활용하는 지식</li><li>실제 얻어진 데이터를 바탕으로 정보 도출</li></ul></li><li><p><strong>확률(Probabilities)</strong></p><ul><li>특정 사건이 일어날 가능성을 0과 1 사이 값으로 나타낸 것</li><li>관측 전에 가능성을 논하는 것</li></ul></li><li><p>현실 세계는 매우 랜덤하여 미리 결과를 알 수 없음</p></li><li><p>단기적으로 어떤 사건이 일어날 비율은 매우 랜덤함</p></li><li><p>단, 장기적으로 어떤 사건이 일어날 가능성은 <strong>확률적으로 예측 가능</strong></p></li></ul><h3 id="확률-사건-표본공간"><a href="#확률-사건-표본공간" class="headerlink" title="확률, 사건, 표본공간"></a>확률, 사건, 표본공간</h3><ul><li><p>확률: 특정 사건이 일어날 가능성을 0과 1 사이 값으로 나타낸 것</p></li><li><p>사건: 표본공간에서 관심 대상인 부분집합</p></li><li><p>표본공간: 확률실험의 모든 가능한 결과의 집합</p></li><li><p>P(A) = $\frac{사건 A가 일어나는 경우의 수}{모든 가능한 결과의 수}$</p><br></li><li><p>합집합사건: 사건 A 또는 사건 B가 일어날 때</p></li><li><p>교집합사건: 사건 A와 사건 B가 동시에 일어날 때</p></li><li><p>여집합사건: 표본공간 S에서 사건 A가 일어나지 않을 때</p></li><li><p>배반사건: 교집합사건이 공사건일 때, 사건 A와 B가 서로 배반(mutually exclusive)</p></li></ul><h3 id="확률변수와-기대값"><a href="#확률변수와-기대값" class="headerlink" title="확률변수와 기대값"></a>확률변수와 기대값</h3><ul><li><p>확률변수: 확률 실험에서 나타난 결과에 실수를 할당한 점수</p><table><thead><tr><th>표본공간</th><th>확률변수</th></tr></thead><tbody><tr><td>HH</td><td>0</td></tr><tr><td>HT</td><td>1</td></tr><tr><td>TH</td><td>1</td></tr><tr><td>TT</td><td>2</td></tr></tbody></table></li><li><p>기대값: 확률변수의 중심척도</p><ul><li>랜덤한 상황에서 수치로 나타난 결과가 A<del>1</del>, A<del>2</del>, …, A<del>k</del>이고 각 결과 확률이 P<del>1</del>, P<del>2</del>, …, P<del>k</del>면 기대값은 각 결과에 확률을 곱하여 전부 합한 것</li><li>기대값 = A<del>1</del>P<del>1</del> + A<del>2</del>P<del>2</del> + … + A<del>k</del>P<del>k</del></li></ul></li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>확률: 특정 사건이 일어날 가능성을 0과 1 사이 값으로 나타낸 것</li><li>사건 하나하나를 미리 아는 것은 불가능하지만, 확률적 모형으로 많은 시행 결과 예측이 가능</li><li>표본공간과 사건을 밴다이어그램으로 나타내 특정 사건에 관한 확률을 구할 수 있음</li><li>확률변수: 확률 실험으로부터 나타난 결과에 실수를 할당한 함수</li></ul><h2 id="2-조건부-확률과-베이즈확률"><a href="#2-조건부-확률과-베이즈확률" class="headerlink" title="2. 조건부 확률과 베이즈확률"></a>2. 조건부 확률과 베이즈확률</h2><h3 id="조건부-확률과-통계적-독립"><a href="#조건부-확률과-통계적-독립" class="headerlink" title="조건부 확률과 통계적 독립"></a>조건부 확률과 통계적 독립</h3><ul><li><p>예제</p><ul><li>두 개의 주사위를 던져 두 눈 합이 10일 확률: 1/12</li><li>첫 번째 주사위 눈이 4라는 것을 아는 상황</li><li>두 눈의 합이 10일 확률은?</li><li>→ 확률이 1/6으로 바뀜<br></li></ul></li><li><p>조건부 확률(conditional probability)</p><ul><li>어떤 사건(B)이 발생한다는 조건 하에서 다른 사건(A)이 발생할 확률</li><li>P(A|B) = $\frac{P(A∩B)}{P(B)}$</li></ul></li><li><p>P(A|B) = P(A)일 때, 즉 사건 B가 일어난다는 정보가 사건 A 발생에 전혀 영향을 주지 않을 때, ‘두 사건이 통계적 독립(independent)’이라고 한다.</p></li></ul><h3 id="베이즈-정리"><a href="#베이즈-정리" class="headerlink" title="베이즈 정리"></a>베이즈 정리</h3><ul><li><p>베이즈 정리(Bayes’ Theorem)</p><ul><li>P(A<del>1</del>|B) = $\frac{P(B∩A<del>1</del>)}{P(B)}$<br>= $\frac{P(B|A<del>1</del>)P(A<del>1</del>)}{P(B)}$<br>= $\frac{[P(B|A<del>1</del>)P(A<del>1</del>)]}{P(B|A<del>1</del>)P(A<del>1</del>) + P(B|A<del>2</del>)P(A<del>2</del>)}$</li></ul></li><li><p>베이즈 정리도 아래와 같은 조건부 확률 계산식으로 볼 수 있음</p><ul><li>P(A<del>1</del>|B) = $\frac{P(B∩A<del>1</del>)}{P(B)}$<ul><li>사건 B가 발생했을 때, 사건 A<del>1</del>이 발생할 확률을 조건부 확률 공식으로 표현</li></ul></li><li>$\frac{P(B|A<del>1</del>)P(A<del>1</del>)}{P(B)}$<ul><li>P(B|A<del>1</del>)에 대한 조건부 확률 공식 이용</li></ul></li><li>$\frac{[P(B|A<del>1</del>)P(A<del>1</del>)]}{P(B|A<del>1</del>)P(A<del>1</del>) + P(B|A<del>2</del>)P(A<del>2</del>)}$<ul><li>P(B)를 P(B∩A<del>1</del>) + P(B∩A<del>2</del>)로 계산할 수 있음</li></ul></li></ul></li><li><p>주어진(사전정보) 가설에 새로운 정보(B)가 주어졌을 때, 사후확률을 계산함</p><ul><li>$\frac{[P(B|A<del>1</del>)P(A<del>1</del>)]}{P(B|A<del>1</del>)P(A<del>1</del>) + P(B|A<del>2</del>)P(A<del>2</del>)}$</li><li>P(B|A<del>1</del>): 가농도, P(A<del>1</del>): 사전확률</li></ul></li></ul><h3 id="요약-1"><a href="#요약-1" class="headerlink" title="요약"></a>요약</h3><ul><li>조건부 확률: 어떤 사건이 발생한다는 조건 하 다른 사건이 발생할 확률</li><li>베이즈 정리: 사후확률을 사전확률과 가능도를 이용해 계산할 수 있게 하는 확률 변환식</li><li>머신러닝기법 중, ‘나이브베이즈 분류’ 기법 계산에서 베이즈정리가 활용됨</li></ul><h2 id="3-정규분포-연속형-와-포아송분포-이산형"><a href="#3-정규분포-연속형-와-포아송분포-이산형" class="headerlink" title="3. 정규분포(연속형)와 포아송분포(이산형)"></a>3. 정규분포(연속형)와 포아송분포(이산형)</h2><h3 id="확률분포란"><a href="#확률분포란" class="headerlink" title="확률분포란?"></a>확률분포란?</h3><ul><li>확률분포에는 이산형(discrete) 분포와 연속형(continuous) 분포가 있음<ul><li>이산형 분포: 점이 띄엄띄엄 분포되어 있음</li><li>연속형 분포: 점이 연속적으로 분포되어 있음</li></ul></li></ul><h3 id="이산형-분포"><a href="#이산형-분포" class="headerlink" title="이산형 분포"></a>이산형 분포</h3><ul><li>확률변수가 이산형(discrete)일 때의 확률분포<ul><li>기대값 E(X) = Σx*p(x) ← 가중치 평균의 개념</li><li>분산 Var(X) = E(X^2^) - E(X)^2^</li></ul></li><li>이항분포, 다항분포, 초기하분포, 포아송분포 등</li></ul><ol><li><p><strong>이항분포</strong></p><ul><li>어떤 시행의 결과가 단순히 ‘성공’ 또는 ‘실패’로 나타날 때(베르누이 시행), 성공이 나오는 횟수에 대한 확률분포</li><li>성공화귤이 p인 베르누이시행을 n회 반복할 때 성공 횟수 X</li><li>E(X) = np</li><li>Var(X) = np(1-p)</li></ul></li><li><p><strong>포아송분포</strong></p><ul><li>단위 시간 안에 어떤 사건이 몇 번 발생하는가에 대한 확률분포</li><li>확률변수 X가 포아송확률변수이고, 모수(평균발생횟수)가 λ</li><li>E(X) = λ</li><li>Var(X) = λ</li></ul></li></ol><h3 id="연속형-분포"><a href="#연속형-분포" class="headerlink" title="연속형 분포"></a>연속형 분포</h3><ul><li>확률변수가 연속형(continuous)일 때의 확률분포</li><li>연속형 분포에서는 정규분포(Normal distribution)가 가장 중요함<ul><li>모집단의 분포가 정규분포를 가진다고 가정하면 통계 분석이 쉬워짐</li><li>사회적 자연적 현상 통계치의 분포가 정규분포와 비슷한 형태를 띔</li></ul></li></ul><ol><li><p><strong>표준정규분포</strong></p><ul><li>평균이 0이고 분산이 1인 정규분포</li><li>정규분포를 표준정규분포로 만드는 법<ul><li>X<del>N(μ,σ^2^) → Z = $\frac{X-μ}{σ}$</del>N(0,1)</li></ul></li><li>표준화를 하는 이유?<ul><li>표준정규분포에서의 구간 면적을 미리 구해두면 이를 이용해서 모든 정규분포 면적을 구할 수 있음</li></ul></li></ul></li><li><p><strong>카이제곱(x^2^)분포</strong></p><ul><li>확률변수 Z가 표준정규분포 N(0,1)을 따를 때, z^2^은 자유도가 1인 카이제곱분포를 따름</li></ul></li><li><p><strong>F-분포</strong></p><ul><li>두 확률변수 X<del>1</del>^2^과 x<del>2</del>^2^이 서로 독립이며, 각각의 자유도가 v<del>1</del>, v<del>2</del>인 카이제곱분포를 따를 때, 확률변수 F는 자유도가 (v<del>1</del>, v<del>2</del>)인 F-분포를 따름</li></ul></li></ol><h3 id="요약-2"><a href="#요약-2" class="headerlink" title="요약"></a>요약</h3><ul><li>이산형 분포: 확률변수가 이산형일 때의 확률분포</li><li>이항분포: 베르누이시행에서 ‘성공’이 나오는 횟수에 대한 확률분포</li><li>포아송 분포: 단위시간 안에 어떤 사건이 몇 번 발생하는가에 대한 확률분포</li><li>연속형 분포: 확률변수가 연속형일 때의 확률분포</li><li>정규분포: 정규분포는 평균을 중심으로 대칭을 이루는 종모양의 연속확률분포</li></ul><h2 id="4-데이터에서-출발하는-확률과-분포-중심극한"><a href="#4-데이터에서-출발하는-확률과-분포-중심극한" class="headerlink" title="4. 데이터에서 출발하는 확률과 분포(중심극한)"></a>4. 데이터에서 출발하는 확률과 분포(중심극한)</h2><h3 id="현실의-분포"><a href="#현실의-분포" class="headerlink" title="현실의 분포"></a>현실의 분포</h3><ul><li>현실의 다양한 분포 → 설명할 수 없는 분포 존재</li><li>중심극한정리(central limit theorem)</li></ul><h3 id="중심극한정리"><a href="#중심극한정리" class="headerlink" title="중심극한정리"></a>중심극한정리</h3><ul><li><p>이항분포에서 표본 수가 증가함에 따라 표본들의 전체 합이 점점 정규분포에 근접해짐</p></li><li><p>지수분포에서도 표본 수의 증가에 따른 표본평균의 분포가 점점 정규분포와 비슷해짐</p></li><li><p>원래의 분포가 정규분포가 아니더라도, 표본 수가 증가함에 따라 표본평균이 점점 정규분포모형과 비슷해짐</p></li></ul><h3 id="중심극한정리-정리"><a href="#중심극한정리-정리" class="headerlink" title="중심극한정리 정리"></a>중심극한정리 정리</h3><ul><li>모집단이 정규분포가 아닌 경우에도 표본 수가 증가하면 표본평균의 분포가 정규분포에 근접</li><li>평균이 μ이고 분산이 σ^2^인 모집단으로부터 크기 n인 확률표본을 추출할 때, n이 크면 표뵨평균 X는 N(μ, σ^2^/n)에 근접</li><li>보통 n이 30 이상이면 모집단의 분포에 관계 없이 X는 정규분포에 근사</li></ul><h3 id="중심극한정리가-유용한-이유"><a href="#중심극한정리가-유용한-이유" class="headerlink" title="중심극한정리가 유용한 이유"></a>중심극한정리가 유용한 이유</h3><ul><li>대부분의 통계적 검정과 추정은 모집단이 정규분포를 따른다는 가정 하에 이루어짐<ul><li>→ 모집단의 분포를 몰라도 중심극한정리를 이용하면 표본평균의 통계적 검정과 추정이 가능해짐</li></ul></li></ul><h3 id="요약-3"><a href="#요약-3" class="headerlink" title="요약"></a>요약</h3><ul><li>중심극한정리란 모집단의 분포에 관계 없이 표본의 수가 증가하면 표본평균의 분포가 정규분포에 근접한다는 이론</li><li>평균이 μ이고 분산이 σ^2^인 모집단으로부터 크기 n(≥ 30)인 확률표본을 추출할 때 표본평균 X는 N(μ, σ^2^/n)에 근접</li><li>모집단의 분포를 몰라도 중심극한정리를 이용하면 표본평균의 통계적 검정과 추정이 가능해짐</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%86%B5%EA%B3%84/">통계</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94/">데이터시각화</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/07/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A3_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B6%84%EC%84%9D%EC%97%90%EC%84%9C_%ED%99%95%EB%A5%A0%EA%B3%BC_%EB%B6%84%ED%8F%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle: The future of ML(Americans vs Indians)</title>
      <link>https://ne-choi.github.io/2021/01/07/Projects/Kaggle%20Competition-The_future_of_ML_americans_vs_indians/</link>
      <guid>https://ne-choi.github.io/2021/01/07/Projects/Kaggle%20Competition-The_future_of_ML_americans_vs_indians/</guid>
      <pubDate>Thu, 07 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://www.kaggle.com/nechoi/the-future-of-ml-americans-vs-indians&quot;&gt;View to Kaggle&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;The-future-of-ML-Americans-v</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://www.kaggle.com/nechoi/the-future-of-ml-americans-vs-indians">View to Kaggle</a></p><h1 id="The-future-of-ML-Americans-vs-Indians"><a href="#The-future-of-ML-Americans-vs-Indians" class="headerlink" title="The future of ML (Americans vs Indians)"></a><strong>The future of ML (Americans vs Indians)</strong></h1><p>Since I started Kaggle competitions, I have a question. I called it beginner’s curiosity.   </p><p><strong>“Have you ever thought about which countries have the biggest impact on Kaggle competition?”</strong>  </p><p>As everybody knows, USA is an obvious IT powerhouse along with Silicon Valley. It has the largest number of Kaggle Grandmaster Champions. There is no doubt that the USA has the most influence on Kaggle competitions.  </p><p>You can also see a lot of Indians on the list of participants. India, known as the rising IT powerhouse, is interested in the Kaggle competitions. It can be confirmed easily by checking a percentage of respondents to the 《2020 Kaggle Machine Learning &amp; data Science Survey》. The response rate for Indians is the highest about 29.2%(5,850 people). It is higher than the second-ranked country, which I would explain. </p><p>In addition, a few years ago, every country emphasized the importance of machine learning because It can be used in lots of fields in the world. I also wondered about the future of machine learning, so I decided to look into the future of Machine Learning through responses from two leader countries. Actually, if we look at the current trend of machine learning, we can easily discover it.  </p><p><strong>“Do you know the future of Machine Learning?”</strong>  </p><p>To sum up, I will compare the responses of American and Indian especially about Machine Learning in the order below.  </p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><p><a href="#chapter1">1. Responses Rate by Country</a><br><a href="#chapter2">2. Percentage by age &amp; gender</a><br><a href="#chapter3">3. Education &amp; Job</a><br><a href="#chapter4">4. Development Environment</a><br><a href="#chapter5">5. Basic of Machine Learning</a><br><a href="#chapter6">6. CV &amp; NLP</a><br><a href="#chapter7">7. Machine Learning in the business</a><br><a href="#chapter8">8. Want to learn machine learning product</a>  </p><h2 id="Library-amp-Data-Import"><a href="#Library-amp-Data-Import" class="headerlink" title="Library &amp; Data Import"></a>Library &amp; Data Import</h2><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">import numpy as npimport pandas as pd# Visualizationimport matplotlib.pyplot as plt%matplotlib inlinefrom matplotlib import rcParamsplt.rcParams[&#39;figure.dpi&#39;] &#x3D; 200plt.rcParams[&#39;lines.linewidth&#39;] &#x3D; 2import matplotlib as mplfrom matplotlib import stylestyle.use(&#39;fivethirtyeight&#39;)import plotly.express as pximport seaborn as snssns.set_style(&quot;whitegrid&quot;)import warningswarnings.filterwarnings(&quot;ignore&quot;, category&#x3D;FutureWarning)warnings.filterwarnings(&quot;ignore&quot;, category&#x3D;DeprecationWarning)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">pd.set_option(&#39;mode.chained_assignment&#39;, None)survey &#x3D; pd.read_csv(&#39;..&#x2F;input&#x2F;kaggle-survey-2020&#x2F;kaggle_survey_2020_responses.csv&#39;)question &#x3D; survey.iloc[0,:].Tfull_df &#x3D; survey.iloc[1:,:]full_df[full_df.columns[3]].replace(&#123;&#39;United States of America&#39;:&#39;USA&#39;,                                         &#39;United Kingdom of Great Britain and Northern Ireland&#39;:&#39;UK&#39;&#125;, inplace&#x3D;True)df &#x3D; full_df[(full_df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;India&#39;)|(full_df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;USA&#39;)]df &#x3D; df.iloc[1:,:]df.reset_index(drop&#x3D;True, inplace&#x3D;True)df &#x3D; df[(df[&#39;Q2&#39;]&#x3D;&#x3D;&#39;Man&#39;)|(df[&#39;Q2&#39;]&#x3D;&#x3D;&#39;Woman&#39;)]df &#x3D; df.iloc[1:,:]df.reset_index(drop&#x3D;True, inplace&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>/opt/conda/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (0) have mixed types.Specify dtype option on import or set low_memory=False.  interactivity=interactivity, compiler=compiler, result=result)</code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Extract data by countryIndia &#x3D; df[df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;India&#39;]India &#x3D; India.iloc[1:,:]India.reset_index(drop&#x3D;True, inplace&#x3D;True)USA &#x3D; df[df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;USA&#39;]USA &#x3D; USA.iloc[1:,:]USA.reset_index(drop&#x3D;True, inplace&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">question.head()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Time from Start to Finish (seconds)                                Duration (in seconds)Q1                                                           What is your age (# years)?Q2                                                What is your gender? - Selected ChoiceQ3                                             In which country do you currently reside?Q4                                     What is the highest level of formal education ...Name: 0, dtype: object</code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">full_df.head()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-Responses-Rate-by-Country"><a href="#1-Responses-Rate-by-Country" class="headerlink" title="1. Responses Rate by Country "></a>1. Responses Rate by Country <a class="anchor" id="chapter1"></a></h2><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">full_pie &#x3D; px.pie(full_df, full_df.columns[3],                 title&#x3D;&#39;Survey Responses Rate by Country&#39;,                 template&#x3D;&#39;seaborn&#39;, hole&#x3D;0.5)full_pie.update_traces(textposition&#x3D;&#39;inside&#39;, textinfo&#x3D;&#39;percent+label&#39;)full_pie.update_layout(uniformtext_minsize&#x3D;10, uniformtext_mode&#x3D;&#39;hide&#39;)full_pie.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The response rate for Indians is the highest which is about 29.2% or 5,850 people. It is about 2.6 times higher than USA, a second-ranked country. Based on the response of the Americans and Indians for this report, I extracted the data by 2 using the two countries.</p><h2 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h2><p>To organize the data neatly, I pre-processed a gender column in which only females and males would remain. (146 responses will be deleted)</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df &#x3D; df[(df[df.columns[2]]&#x3D;&#x3D;&#39;Man&#39;)|(df[df.columns[2]]&#x3D;&#x3D;&#39;Woman&#39;)]df &#x3D; df.iloc[1:,:]df.reset_index(drop&#x3D;True, inplace&#x3D;True)df.shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(7940, 355)</code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">print(&quot;- Valid American Response: &quot;,len(df[df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;USA&#39;]))print(&quot;- Valid Indian Response: &quot;,len(df[df[&#39;Q3&#39;]&#x3D;&#x3D;&#39;India&#39;]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>- Valid American Response:  2161- Valid Indian Response:  5779</code></pre><p>I also made each data set(‘USA’, ‘India’) to make pie graphs.</p><h2 id="2-Percentage-by-age-amp-gender"><a href="#2-Percentage-by-age-amp-gender" class="headerlink" title="2. Percentage by age &amp; gender "></a>2. Percentage by age &amp; gender <a class="anchor" id="chapter2"></a></h2><p>To see their interest in coding, let’s look at the age and gender data.</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">legend_list &#x3D; [&#39;USA&#39;, &#39;India&#39;]def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;18-21&#39;,&#39;22-24&#39;,&#39;25-29&#39;,&#39;30-34&#39;,&#39;35-39&#39;,&#39;40-44&#39;,&#39;45-49&#39;,&#39;50-54&#39;,&#39;55-59&#39;,&#39;60-69&#39;,&#39;70+&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 2200])  plt.xticks(rotation&#x3D;0, fontsize&#x3D;8)  plt.xlabel(&#39;age group&#39;, fontsize&#x3D;8)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Age Distribution&#39;, fontsize&#x3D;15)  plt.show()q1_order &#x3D; [&#39;18-21&#39;,&#39;22-24&#39;,&#39;25-29&#39;,&#39;30-34&#39;,&#39;35-39&#39;,&#39;40-44&#39;,&#39;45-49&#39;,&#39;50-54&#39;,&#39;55-59&#39;,&#39;60-69&#39;,&#39;70+&#39;]col_name &#x3D; &quot;Q1&quot;countplot_(df, col_name, q1_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_16_0.png"></p><p>You can easily notice in USA the distribution of age groups is more regular than India. It represents the cording fever especially among young Indians. It can be interpreted that India has a craze for coding.</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">q3_order &#x3D; df[&#39;Q3&#39;].value_counts()[:11].indexdf_q2q3 &#x3D; df[[&#39;Q2&#39;,&#39;Q3&#39;]].groupby(&#39;Q3&#39;)[&#39;Q2&#39;].value_counts().unstack().loc[q3_order]df_q2q3[&#39;sum&#39;] &#x3D; df_q2q3.sum(axis&#x3D;1)df_q2q3_ratio &#x3D; (df_q2q3.T &#x2F; df_q2q3[&#39;sum&#39;]).T[[&#39;Man&#39;,&#39;Woman&#39;]][::-1]fig, ax &#x3D; plt.subplots(1,1,figsize&#x3D;(10, 1.5))ax.barh(df_q2q3_ratio.index, df_q2q3_ratio[&#39;Man&#39;], alpha&#x3D;0.5, label&#x3D;&#39;Man&#39;)ax.barh(df_q2q3_ratio.index, df_q2q3_ratio[&#39;Woman&#39;],        left&#x3D;df_q2q3_ratio[&#39;Man&#39;], alpha&#x3D;0.5, label&#x3D;&#39;Woman&#39;)ax.set_xlim(0, 1)ax.set_xticks([])ax.set_yticklabels(df_q2q3_ratio.index, fontsize&#x3D;15)# male percentagefor i in df_q2q3_ratio.index:    ax.annotate(f&quot;&#123;df_q2q3_ratio[&#39;Man&#39;][i]*100:.3&#125;%&quot;,                    xy&#x3D;(df_q2q3_ratio[&#39;Man&#39;][i]&#x2F;2, i), fontsize&#x3D;12, va&#x3D;&#39;center&#39;)for i in df_q2q3_ratio.index:    ax.annotate(f&quot;&#123;df_q2q3_ratio[&#39;Woman&#39;][i]*100:.3&#125;%&quot;,                    xy&#x3D;(df_q2q3_ratio[&#39;Man&#39;][i]+df_q2q3_ratio[&#39;Woman&#39;][i]&#x2F;2, i),                   va&#x3D;&#39;center&#39;, ha&#x3D;&#39;center&#39;, fontsize&#x3D;12)    plt.title(&#39;Gender Distribution&#39;, fontsize&#x3D;20)   for s in [&#39;top&#39;, &#39;left&#39;, &#39;right&#39;, &#39;bottom&#39;]:    ax.spines[s].set_visible(False)    ax.legend(loc&#x3D;&#39;lower center&#39;, ncol&#x3D;2, bbox_to_anchor&#x3D;(0.5, -0.40))plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_18_0.png"></p><p>The gender ratio of two countries is alike. In both countries, male respondents are about 3.4 times more than female respondents.</p><h2 id="3-Education-amp-Job"><a href="#3-Education-amp-Job" class="headerlink" title="3. Education &amp; Job "></a>3. Education &amp; Job <a class="anchor" id="chapter3"></a></h2><p>Then I checked their education level and their current job.</p><h3 id="3-1-Level-of-Education"><a href="#3-1-Level-of-Education" class="headerlink" title="3-1. Level of Education"></a>3-1. Level of Education</h3><p>Please notice that I can just confirm their degree level, not major. However, many respondents study above bachelor’s degree, so I think it is okay to assume that their major is related to coding or programming.</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df[&#39;Q4&#39;] &#x3D; df[&#39;Q4&#39;].str.replace(&quot;[^A-Za-z0-9-\s]+&quot;, &quot;&quot;)df[&#39;Q4&#39;].replace(&#123;&#39;No formal education past high school&#39;:&#39;~ High school&#39;,                   &#39;I prefer not to answer&#39;:&#39;Not answer&#39;,                   &#39;Some collegeuniversity study without earning a bachelors degree&#39;:&#39;Study without a BD&#39;,                   &#39;Masters degree&#39;:&quot;Master&#39;s degree&quot;,                   &#39;Bachelors degree&#39;:&quot;Bachelor&#39;s degree&quot;,                   &#39; High school&#39;:&#39;~ High school&#39;&#125;, inplace&#x3D;True)def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;~ High school&#39;, &#39;Professional degree&#39;, &#39;Study without a BD&#39;, &quot;Bachelor&#39;s degree&quot;,&quot;Master&#39;s degree&quot;,&#39;Doctoral degree&#39;, &#39;Not answer&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 3200])  plt.xticks(rotation&#x3D;15, fontsize&#x3D;8)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Level of Education &#39;, fontsize&#x3D;15)  plt.show()q4_order &#x3D; [&#39;~ High school&#39;, &#39;Professional degree&#39;, &#39;Study without a BD&#39;, &quot;Bachelor&#39;s degree&quot;,&quot;Master&#39;s degree&quot;,&#39;Doctoral degree&#39;, &#39;Not answer&#39;]col_name &#x3D; &quot;Q4&quot;countplot_(df, col_name, q4_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_21_0.png"></p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df_normalize4 &#x3D; df.groupby([&#39;Q3&#39;])[&#39;Q4&#39;].value_counts(dropna&#x3D;False, normalize&#x3D;True, ascending&#x3D;False)df_normalize4 &#x3D; pd.DataFrame(df_normalize4)df_normalize4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Q4</th>    </tr>    <tr>      <th>Q3</th>      <th>Q4</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="8" valign="top">India</th>      <th>Bachelor's degree</th>      <td>0.518602</td>    </tr>    <tr>      <th>Master's degree</th>      <td>0.316145</td>    </tr>    <tr>      <th>Doctoral degree</th>      <td>0.046548</td>    </tr>    <tr>      <th>Professional degree</th>      <td>0.036512</td>    </tr>    <tr>      <th>Study without a BD</th>      <td>0.035127</td>    </tr>    <tr>      <th>NaN</th>      <td>0.021284</td>    </tr>    <tr>      <th>Not answer</th>      <td>0.020938</td>    </tr>    <tr>      <th>~ High school</th>      <td>0.004845</td>    </tr>    <tr>      <th rowspan="8" valign="top">USA</th>      <th>Master's degree</th>      <td>0.469227</td>    </tr>    <tr>      <th>Bachelor's degree</th>      <td>0.256826</td>    </tr>    <tr>      <th>Doctoral degree</th>      <td>0.184174</td>    </tr>    <tr>      <th>Study without a BD</th>      <td>0.056918</td>    </tr>    <tr>      <th>Professional degree</th>      <td>0.017122</td>    </tr>    <tr>      <th>NaN</th>      <td>0.006941</td>    </tr>    <tr>      <th>~ High school</th>      <td>0.004627</td>    </tr>    <tr>      <th>Not answer</th>      <td>0.004165</td>    </tr>  </tbody></table></div><p>In the case of master and doctor, the percentage of Americans(46.9%, 18.4%) is higher than Indians (31.6%, 4.7%). Many Indians obtained their bachelor’s degree(51.9%) and I also noticed that 3.7% of the Indians had a professional degree.  </p><p>It shows that USA already has many IT technicians that are highly educated, and India’s level of coding education is growing.</p><h3 id="3-2-Current-Job"><a href="#3-2-Current-Job" class="headerlink" title="3-2. Current Job"></a>3-2. Current Job</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df[&#39;Q5&#39;].replace(&#123;&#39;Currently not employed&#39;:&#39;Not employed&#39;&#125;,inplace&#x3D;True)def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;Business Analyst&#39;,&#39;Data Analyst&#39;,&#39;Data Engineer&#39;,&#39;Data Scientist&#39;,                             &#39;DBA&#x2F;Database Engineer&#39;,&#39;Machine Learning Engineer&#39;,&#39;Product&#x2F;Project Manager&#39;,                             &#39;Research Scientist&#39;,&#39;Software Engineer&#39;,&#39;Statistician&#39;,&#39;Student&#39;,&#39;Not employed&#39;,&#39;Other&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 2400])  plt.xticks(rotation&#x3D;20, fontsize&#x3D;6)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper left&#39;)  plt.title(&#39;Current Job&#39;, fontsize&#x3D;15)  plt.show()q5_order &#x3D; [&#39;Business Analyst&#39;,&#39;Data Analyst&#39;,&#39;Data Engineer&#39;,&#39;Data Scientist&#39;,            &#39;DBA&#x2F;Database Engineer&#39;,&#39;Machine Learning Engineer&#39;,&#39;Product&#x2F;Project Manager&#39;,            &#39;Research Scientist&#39;,&#39;Software Engineer&#39;,&#39;Statistician&#39;,&#39;Student&#39;,&#39;Not employed&#39;,&#39;Other&#39;]col_name &#x3D; &quot;Q5&quot;countplot_(df, col_name, q5_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_25_0.png"></p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df_normalize5 &#x3D; df.groupby([&#39;Q3&#39;])[&#39;Q5&#39;].value_counts(dropna&#x3D;False, normalize&#x3D;True, ascending&#x3D;False)df_normalize5 &#x3D; pd.DataFrame(df_normalize5)df_normalize5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Q5</th>    </tr>    <tr>      <th>Q3</th>      <th>Q5</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="14" valign="top">India</th>      <th>Student</th>      <td>0.383803</td>    </tr>    <tr>      <th>Software Engineer</th>      <td>0.102094</td>    </tr>    <tr>      <th>Data Scientist</th>      <td>0.099844</td>    </tr>    <tr>      <th>Not employed</th>      <td>0.097076</td>    </tr>    <tr>      <th>Other</th>      <td>0.069389</td>    </tr>    <tr>      <th>Data Analyst</th>      <td>0.058661</td>    </tr>    <tr>      <th>Machine Learning Engineer</th>      <td>0.050874</td>    </tr>    <tr>      <th>NaN</th>      <td>0.035473</td>    </tr>    <tr>      <th>Business Analyst</th>      <td>0.033916</td>    </tr>    <tr>      <th>Research Scientist</th>      <td>0.023707</td>    </tr>    <tr>      <th>Product/Project Manager</th>      <td>0.021457</td>    </tr>    <tr>      <th>Data Engineer</th>      <td>0.013497</td>    </tr>    <tr>      <th>Statistician</th>      <td>0.005883</td>    </tr>    <tr>      <th>DBA/Database Engineer</th>      <td>0.004326</td>    </tr>    <tr>      <th rowspan="14" valign="top">USA</th>      <th>Data Scientist</th>      <td>0.173994</td>    </tr>    <tr>      <th>Student</th>      <td>0.156872</td>    </tr>    <tr>      <th>Other</th>      <td>0.132346</td>    </tr>    <tr>      <th>Software Engineer</th>      <td>0.097640</td>    </tr>    <tr>      <th>Data Analyst</th>      <td>0.086997</td>    </tr>    <tr>      <th>Not employed</th>      <td>0.074965</td>    </tr>    <tr>      <th>Research Scientist</th>      <td>0.061083</td>    </tr>    <tr>      <th>Product/Project Manager</th>      <td>0.052753</td>    </tr>    <tr>      <th>Business Analyst</th>      <td>0.047200</td>    </tr>    <tr>      <th>Machine Learning Engineer</th>      <td>0.043961</td>    </tr>    <tr>      <th>Data Engineer</th>      <td>0.031004</td>    </tr>    <tr>      <th>Statistician</th>      <td>0.017584</td>    </tr>    <tr>      <th>NaN</th>      <td>0.016659</td>    </tr>    <tr>      <th>DBA/Database Engineer</th>      <td>0.006941</td>    </tr>  </tbody></table></div><p>Most noticeably, more than 38% of Indians are students. That’s because 61.2% of the respondents in India are under 25. In the USA, there are lots of Data Scientists(17.4%), and Software Engineers(9.8%). Likewise, India has a lot of Sotfware Engineers(10.2%), and Data Scientists(10.0%). The results of the fewest jobs are the same, too. Both of the countries have few DBA/Database Engineers and Statisticians.</p><h2 id="4-Development-Environment"><a href="#4-Development-Environment" class="headerlink" title="4. Development Environment "></a>4. Development Environment <a class="anchor" id="chapter4"></a></h2><p>In this part, I examined a more detailed part of the development environment. Compared to the period of coding, I discovered each country’s interest in writing code or programming. Furthermore, I will check their basic programming languages and the languages recommended by people who already used it.</p><h3 id="4-1-Period-of-coding"><a href="#4-1-Period-of-coding" class="headerlink" title="4-1. Period of coding"></a>4-1. Period of coding</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df[&#39;Q6&#39;].replace(&#123;&#39;I have never written code&#39;:&#39;Never&#39;,                  &#39;&lt; 1 years&#39;:&#39;&lt; 1 year&#39;&#125;, inplace&#x3D;True)def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;&lt; 1 year&#39;,&#39;1-2 years&#39;,&#39;3-5 years&#39;,&#39;5-10 years&#39;,&#39;10-20 years&#39;,&#39;20+ years&#39;,&#39;Never&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 1850])  plt.xticks(rotation&#x3D;0, fontsize&#x3D;8)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Period of Coding&#39;, fontsize&#x3D;15)  plt.show()q6_order &#x3D; [&#39;&lt; 1 year&#39;,&#39;1-2 years&#39;,&#39;3-5 years&#39;,&#39;5-10 years&#39;,&#39;10-20 years&#39;,&#39;20+ years&#39;,&#39;Never&#39;]col_name &#x3D; &quot;Q6&quot;countplot_(df, col_name, q6_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_29_0.png"></p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df_normalize6 &#x3D; df.groupby([&#39;Q3&#39;])[&#39;Q6&#39;].value_counts(dropna&#x3D;False, normalize&#x3D;True, ascending&#x3D;False)df_normalize6 &#x3D; pd.DataFrame(df_normalize6)df_normalize6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Q6</th>    </tr>    <tr>      <th>Q3</th>      <th>Q6</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="8" valign="top">India</th>      <th>1-2 years</th>      <td>0.305416</td>    </tr>    <tr>      <th>3-5 years</th>      <td>0.243295</td>    </tr>    <tr>      <th>&lt; 1 year</th>      <td>0.198131</td>    </tr>    <tr>      <th>5-10 years</th>      <td>0.091711</td>    </tr>    <tr>      <th>Never</th>      <td>0.061429</td>    </tr>    <tr>      <th>10-20 years</th>      <td>0.045856</td>    </tr>    <tr>      <th>NaN</th>      <td>0.043087</td>    </tr>    <tr>      <th>20+ years</th>      <td>0.011075</td>    </tr>    <tr>      <th rowspan="8" valign="top">USA</th>      <th>3-5 years</th>      <td>0.229986</td>    </tr>    <tr>      <th>5-10 years</th>      <td>0.174456</td>    </tr>    <tr>      <th>20+ years</th>      <td>0.164276</td>    </tr>    <tr>      <th>1-2 years</th>      <td>0.143915</td>    </tr>    <tr>      <th>10-20 years</th>      <td>0.136974</td>    </tr>    <tr>      <th>&lt; 1 year</th>      <td>0.089311</td>    </tr>    <tr>      <th>Never</th>      <td>0.037483</td>    </tr>    <tr>      <th>NaN</th>      <td>0.023600</td>    </tr>  </tbody></table></div><p>In the case of the USA respondents, the number of people who have never coded nor programmed is less than that of other groups. It show us that Americans have always been interested in it. More than 30.1% of the respondents are experts who have coded for more than 10 years. Additionally, it is noticeable that the number of beginners is decreasing.</p><p>India, on the other hand, has about 6.1% of respondents who have never done coding nor programming. Plus, there are numerous beginners. Almost 74.6% of Indians studied coding for less than 5 years, and about half of the respondents in India coded for less than 3 years.</p><p>This graph also shows that there are already lots of coding masters in the USA, and that there are many beginners in India.</p><h3 id="4-2-Basic-programming-language-multiple"><a href="#4-2-Basic-programming-language-multiple" class="headerlink" title="4-2. Basic programming language (multiple)"></a>4-2. Basic programming language (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess Basic programming language dataUSA7 &#x3D; (USA[&#39;Q7_Part_1&#39;], USA[&#39;Q7_Part_2&#39;], USA[&#39;Q7_Part_3&#39;], USA[&#39;Q7_Part_4&#39;],        USA[&#39;Q7_Part_5&#39;], USA[&#39;Q7_Part_6&#39;], USA[&#39;Q7_Part_7&#39;], USA[&#39;Q7_Part_8&#39;],        USA[&#39;Q7_OTHER&#39;])USA7 &#x3D; pd.concat(USA7)India7 &#x3D; (India[&#39;Q7_Part_1&#39;], India[&#39;Q7_Part_2&#39;], India[&#39;Q7_Part_3&#39;], India[&#39;Q7_Part_4&#39;],          India[&#39;Q7_Part_5&#39;], India[&#39;Q7_Part_6&#39;], India[&#39;Q7_Part_7&#39;], India[&#39;Q7_Part_8&#39;],          India[&#39;Q7_OTHER&#39;])India7 &#x3D; pd.concat(India7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 20f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))USA7.replace(&#123;&#39;General purpose image&#x2F;video tools (PIL, cv2, skimage, etc)&#39;:&#39;General image&#x2F;video&#39;,               &#39;Image segmentation methods (U-Net, Mask R-CNN, etc)&#39;:&#39;Image segmentation methods&#39;,               &#39;Object detection methods (YOLOv3, RetinaNet, etc)&#39;:&#39;Object detection methods&#39;,               &#39;Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)&#39;:&#39;Image classification &amp; networks&#39;,               &#39;Generative Networks (GAN, VAE, etc)&#39;:&#39;Generative Networks&#39;&#125;, inplace&#x3D;True)               India7.replace(&#123;&#39;General purpose image&#x2F;video tools (PIL, cv2, skimage, etc)&#39;:&#39;General image&#x2F;video&#39;,                 &#39;Image segmentation methods (U-Net, Mask R-CNN, etc)&#39;:&#39;Image segmentation methods&#39;,                 &#39;Object detection methods (YOLOv3, RetinaNet, etc)&#39;:&#39;Object detection methods&#39;,                 &#39;Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)&#39;:&#39;Image classification &amp; networks&#39;,                 &#39;Generative Networks (GAN, VAE, etc)&#39;:&#39;Generative Networks&#39;&#125;, inplace&#x3D;True)   USA7.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;Basic Program Language in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India7.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;Basic Program Language in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_34_0.png"></p><p>Both countries use Python the most. The next is SQL. A noticeable difference is shown in the 3rd most used language. In the USA, 14.6% of respondents use R, but in India the 3rd most used programming language is C. In India, R is the third- lowest programming language used whereas in the USA, C is the second-lowest.</p><p>Nevertheless, it is clear that the most commonly used languages of both countries are Python and SQL.</p><h3 id="4-3-Recommend-programming-language-for-starter"><a href="#4-3-Recommend-programming-language-for-starter" class="headerlink" title="4-3. Recommend programming language for starter"></a>4-3. Recommend programming language for starter</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;)  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 4500])  plt.xticks(rotation&#x3D;0, fontsize&#x3D;8)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Recommend Language for Starter&#39;, fontsize&#x3D;15)  plt.show()q8_order &#x3D; []col_name &#x3D; &quot;Q8&quot;countplot_(df, col_name, q8_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_37_0.png"></p><p>The graph shows that Python has an overwhelming proportion. What is unusual is that Indians who use relatively less R recommended R.</p><h3 id="4-4-Integrated-development-environments-multiple"><a href="#4-4-Integrated-development-environments-multiple" class="headerlink" title="4-4. Integrated development environments (multiple)"></a>4-4. Integrated development environments (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess integrated development environments dataUSA9 &#x3D; (USA[&#39;Q9_Part_1&#39;], USA[&#39;Q9_Part_2&#39;], USA[&#39;Q9_Part_3&#39;], USA[&#39;Q9_Part_4&#39;],        USA[&#39;Q9_Part_5&#39;], USA[&#39;Q9_Part_6&#39;], USA[&#39;Q9_Part_7&#39;], USA[&#39;Q9_Part_8&#39;],        USA[&#39;Q9_Part_9&#39;], USA[&#39;Q9_Part_10&#39;], USA[&#39;Q9_Part_11&#39;], USA[&#39;Q9_OTHER&#39;])USA9 &#x3D; pd.concat(USA9)India9 &#x3D; (India[&#39;Q9_Part_1&#39;], India[&#39;Q9_Part_2&#39;], India[&#39;Q9_Part_3&#39;], India[&#39;Q9_Part_4&#39;],        India[&#39;Q9_Part_5&#39;], India[&#39;Q9_Part_6&#39;], India[&#39;Q9_Part_7&#39;], India[&#39;Q9_Part_8&#39;],        India[&#39;Q9_Part_9&#39;], India[&#39;Q9_Part_10&#39;], India[&#39;Q9_Part_11&#39;], India[&#39;Q9_OTHER&#39;])India9 &#x3D; pd.concat(India9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 13USA9.replace(&#123;&#39;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#39;:&#39;Jupyter&#39;,              &#39;Visual Studio Code (VSCode)&#39;:&#39;VSCode&#39;&#125;, inplace&#x3D;True)India9.replace(&#123;&#39;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#39;:&#39;Jupyter&#39;,              &#39;Visual Studio Code (VSCode)&#39;:&#39;VSCode&#39;&#125;, inplace&#x3D;True)f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))    USA9.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;Using IDE in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India9.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;Using IDE in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_41_0.png"></p><p>The development environment used frequently is similar except for RStudio. As we saw in 4-2, the reason why the ratio of RStudio in India is not high is Indian less use R.</p><ul><li><h2 id="5-Basic-of-Machine-Learning"><a href="#5-Basic-of-Machine-Learning" class="headerlink" title="5. Basic of Machine Learning "></a>5. Basic of Machine Learning <a class="anchor" id="chapter5"></a></h2></li></ul><p>It’s time to check the machine learning section. First, I check to period of using machine learning in each country. And then, let’s look at the machine learning framework and algorithms that they use.</p><h3 id="5-1-Period-of-Using-Machine-Learning"><a href="#5-1-Period-of-Using-Machine-Learning" class="headerlink" title="5-1. Period of Using Machine Learning"></a>5-1. Period of Using Machine Learning</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df[&#39;Q15&#39;].replace(&#123;&#39;Under 1 year&#39;:&#39;&lt; 1 year&#39;,                   &#39;20 or more years&#39;:&#39;20+ years&#39;,                   &#39;I do not use machine learning methods&#39;:&#39;Never&#39;&#125;, inplace&#x3D;True)def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;&lt; 1 year&#39;,&#39;1-2 years&#39;,&#39;2-3 years&#39;,&#39;3-4 years&#39;,&#39;4-5 years&#39;,&#39;5-10 years&#39;,&#39;10-20 years&#39;,&#39;20+ years&#39;,&#39;Never&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 2400])  plt.xticks(rotation&#x3D;0, fontsize&#x3D;8)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Period of Using Machine Learning&#39;, fontsize&#x3D;15)  plt.show()q15_order &#x3D; [&#39;&lt; 1 year&#39;,&#39;1-2 years&#39;,&#39;2-3 years&#39;,&#39;3-4 years&#39;,&#39;4-5 years&#39;,&#39;5-10 years&#39;,&#39;10-20 years&#39;,&#39;20+ years&#39;,&#39;Never&#39;]col_name &#x3D; &quot;Q15&quot;countplot_(df, col_name, q15_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_44_0.png"></p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df_normalize15 &#x3D; df.groupby([&#39;Q3&#39;])[&#39;Q15&#39;].value_counts(dropna&#x3D;False, normalize&#x3D;True, ascending&#x3D;False)df_normalize15 &#x3D; pd.DataFrame(df_normalize15)df_normalize15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Q15</th>    </tr>    <tr>      <th>Q3</th>      <th>Q15</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="10" valign="top">India</th>      <th>&lt; 1 year</th>      <td>0.395224</td>    </tr>    <tr>      <th>NaN</th>      <td>0.201938</td>    </tr>    <tr>      <th>1-2 years</th>      <td>0.179270</td>    </tr>    <tr>      <th>Never</th>      <td>0.100536</td>    </tr>    <tr>      <th>2-3 years</th>      <td>0.060391</td>    </tr>    <tr>      <th>3-4 years</th>      <td>0.025091</td>    </tr>    <tr>      <th>4-5 years</th>      <td>0.017996</td>    </tr>    <tr>      <th>5-10 years</th>      <td>0.015747</td>    </tr>    <tr>      <th>10-20 years</th>      <td>0.003461</td>    </tr>    <tr>      <th>20+ years</th>      <td>0.000346</td>    </tr>    <tr>      <th rowspan="10" valign="top">USA</th>      <th>&lt; 1 year</th>      <td>0.213790</td>    </tr>    <tr>      <th>1-2 years</th>      <td>0.159186</td>    </tr>    <tr>      <th>NaN</th>      <td>0.127256</td>    </tr>    <tr>      <th>Never</th>      <td>0.116613</td>    </tr>    <tr>      <th>2-3 years</th>      <td>0.109671</td>    </tr>    <tr>      <th>5-10 years</th>      <td>0.084683</td>    </tr>    <tr>      <th>3-4 years</th>      <td>0.071263</td>    </tr>    <tr>      <th>4-5 years</th>      <td>0.068024</td>    </tr>    <tr>      <th>10-20 years</th>      <td>0.027765</td>    </tr>    <tr>      <th>20+ years</th>      <td>0.021749</td>    </tr>  </tbody></table></div><p>The results of this graph shows the two countries similar. In the USA, many people have been coding for a long time, but there are many beginners in machine learning. Expecially in India, there are about 57.4% of respondents using machine learning. It can be said that <strong>India’s coding craze began with the development of machine learning.</strong></p><h3 id="5-2-Using-machine-learning-framework-multiple"><a href="#5-2-Using-machine-learning-framework-multiple" class="headerlink" title="5-2. Using machine learning framework (multiple)"></a>5-2. Using machine learning framework (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess machine learning framework dataUSA16 &#x3D; (USA[&#39;Q16_Part_1&#39;], USA[&#39;Q16_Part_2&#39;], USA[&#39;Q16_Part_3&#39;], USA[&#39;Q16_Part_4&#39;],        USA[&#39;Q16_Part_5&#39;], USA[&#39;Q16_Part_6&#39;], USA[&#39;Q16_Part_7&#39;], USA[&#39;Q16_Part_8&#39;],        USA[&#39;Q16_Part_9&#39;], USA[&#39;Q16_Part_10&#39;], USA[&#39;Q16_Part_11&#39;], USA[&#39;Q16_Part_12&#39;],        USA[&#39;Q16_Part_13&#39;], USA[&#39;Q16_Part_14&#39;], USA[&#39;Q16_Part_15&#39;], USA[&#39;Q16_OTHER&#39;])USA16 &#x3D; pd.concat(USA16)India16 &#x3D; (India[&#39;Q16_Part_1&#39;], India[&#39;Q16_Part_2&#39;], India[&#39;Q16_Part_3&#39;], India[&#39;Q16_Part_4&#39;],        India[&#39;Q16_Part_5&#39;], India[&#39;Q16_Part_6&#39;], India[&#39;Q16_Part_7&#39;], India[&#39;Q16_Part_8&#39;],        India[&#39;Q16_Part_9&#39;], India[&#39;Q16_Part_10&#39;], India[&#39;Q16_Part_11&#39;], India[&#39;Q16_Part_12&#39;],        India[&#39;Q16_Part_13&#39;], India[&#39;Q16_Part_14&#39;], India[&#39;Q16_Part_15&#39;], India[&#39;Q16_OTHER&#39;])India16 &#x3D; pd.concat(India16)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 13f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))    USA16.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;Machine Learning Framework in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India16.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;Machine Learning Framework in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_49_0.png"></p><p>The ranking of machine learning framework of both countries is almost similar. There is a difference between the rank 4th and 5th graphs  which is PyTorch and Xgboost. The most popular framework used is Scikit-learn, with about 25.9% in the USA and about 27.6% in India. TensorFlow and Keras showed about 14.5%, and about 13.4% in the USA and in India about 19.0% and about 17.3% are observed. It shows that more than three quarters of people uses 5 types of framework and one quarter of people uses various framework which occupy less than about 10% each.</p><h3 id="5-3-Using-machine-learning-algorithm-multiple"><a href="#5-3-Using-machine-learning-algorithm-multiple" class="headerlink" title="5-3. Using machine learning algorithm (multiple)"></a>5-3. Using machine learning algorithm (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess machine learning algorithm dataUSA17 &#x3D; (USA[&#39;Q17_Part_1&#39;], USA[&#39;Q17_Part_2&#39;], USA[&#39;Q17_Part_3&#39;], USA[&#39;Q17_Part_4&#39;],        USA[&#39;Q17_Part_5&#39;], USA[&#39;Q17_Part_6&#39;], USA[&#39;Q17_Part_7&#39;], USA[&#39;Q17_Part_8&#39;],        USA[&#39;Q17_Part_9&#39;], USA[&#39;Q17_Part_10&#39;], USA[&#39;Q17_Part_11&#39;], USA[&#39;Q17_OTHER&#39;])USA17 &#x3D; pd.concat(USA17)India17 &#x3D; (India[&#39;Q17_Part_1&#39;], India[&#39;Q17_Part_2&#39;], India[&#39;Q17_Part_3&#39;], India[&#39;Q17_Part_4&#39;],        India[&#39;Q17_Part_5&#39;], India[&#39;Q17_Part_6&#39;], India[&#39;Q17_Part_7&#39;], India[&#39;Q17_Part_8&#39;],        India[&#39;Q17_Part_9&#39;], India[&#39;Q17_Part_10&#39;], India[&#39;Q17_Part_11&#39;], India[&#39;Q17_OTHER&#39;])India17 &#x3D; pd.concat(India17)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 10f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))USA17.replace(&#123;&#39;Gradient Boosting Machines (xgboost, lightgbm, etc)&#39;:&#39;Gradient Boosting Machines&#39;,               &#39;Dense Neural Networks (MLPs, etc)&#39;:&#39;Dense Neural Networks&#39;,               &#39;Transformer Networks (BERT, gpt-3, etc)&#39;:&#39;Transformer Networks&#39;&#125;, inplace&#x3D;True)India17.replace(&#123;&#39;Gradient Boosting Machines (xgboost, lightgbm, etc)&#39;:&#39;Gradient Boosting Machines&#39;,                 &#39;Dense Neural Networks (MLPs, etc)&#39;:&#39;Dense Neural Networks&#39;,                 &#39;Transformer Networks (BERT, gpt-3, etc)&#39;:&#39;Transformer Networks&#39;&#125;, inplace&#x3D;True)USA17.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;Machine Learning Algorithm in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India17.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;Machine Learning Algorithm in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_53_0.png"></p><p>The ranking of used machine learning algorithm of both countries is almost similar, too. Linear or logistic regression and decision trees or random forests are most popular in two countries. And there are no significant thing because the result of both countries is alike.</p><h2 id="6-CV-amp-NLP"><a href="#6-CV-amp-NLP" class="headerlink" title="6. CV &amp; NLP "></a>6. CV &amp; NLP <a class="anchor" id="chapter6"></a></h2><p>Then, I check about Computer Vision and Natural Language Processing because it is importance part of machine learning. Therefore I assumed lots of beginners and exports are interested in this field. In this part, the difference between the USA and India is not visible clearly, so I just show you the ratio graphs.</p><h3 id="6-1-Computer-Vision-multiple"><a href="#6-1-Computer-Vision-multiple" class="headerlink" title="6-1. Computer Vision (multiple)"></a>6-1. Computer Vision (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess CV dataUSA18 &#x3D; (USA[&#39;Q18_Part_1&#39;], USA[&#39;Q18_Part_2&#39;], USA[&#39;Q18_Part_3&#39;],                  USA[&#39;Q18_Part_4&#39;], USA[&#39;Q18_Part_5&#39;], USA[&#39;Q18_Part_6&#39;],                  USA[&#39;Q18_OTHER&#39;])USA18 &#x3D; pd.concat(USA18)India18 &#x3D; (India[&#39;Q18_Part_1&#39;], India[&#39;Q18_Part_2&#39;], India[&#39;Q18_Part_3&#39;],                  India[&#39;Q18_Part_4&#39;], India[&#39;Q18_Part_5&#39;], India[&#39;Q18_Part_6&#39;],                  India[&#39;Q18_OTHER&#39;])India18 &#x3D; pd.concat(India18)# Preprocess NLP dataUSA19 &#x3D; (USA[&#39;Q19_Part_1&#39;], USA[&#39;Q19_Part_2&#39;], USA[&#39;Q19_Part_3&#39;],                  USA[&#39;Q19_Part_4&#39;], USA[&#39;Q19_Part_5&#39;], USA[&#39;Q19_OTHER&#39;])USA19 &#x3D; pd.concat(USA19)India19 &#x3D; (India[&#39;Q19_Part_1&#39;], India[&#39;Q19_Part_2&#39;], India[&#39;Q19_Part_3&#39;],                  India[&#39;Q19_Part_4&#39;], India[&#39;Q19_Part_5&#39;], India[&#39;Q19_OTHER&#39;])India19 &#x3D; pd.concat(India19)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 10f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))USA18.replace(&#123;&#39;General purpose image&#x2F;video tools (PIL, cv2, skimage, etc)&#39;:&#39;General image&#x2F;video&#39;,               &#39;Image segmentation methods (U-Net, Mask R-CNN, etc)&#39;:&#39;Image segmentation methods&#39;,               &#39;Object detection methods (YOLOv3, RetinaNet, etc)&#39;:&#39;Object detection methods&#39;,               &#39;Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)&#39;:&#39;Image classification &amp; networks&#39;,               &#39;Generative Networks (GAN, VAE, etc)&#39;:&#39;Generative Networks&#39;&#125;, inplace&#x3D;True)               India18.replace(&#123;&#39;General purpose image&#x2F;video tools (PIL, cv2, skimage, etc)&#39;:&#39;General image&#x2F;video&#39;,                 &#39;Image segmentation methods (U-Net, Mask R-CNN, etc)&#39;:&#39;Image segmentation methods&#39;,                 &#39;Object detection methods (YOLOv3, RetinaNet, etc)&#39;:&#39;Object detection methods&#39;,                 &#39;Image classification and other general purpose networks (VGG, Inception, ResNet, ResNeXt, NASNet, EfficientNet, etc)&#39;:&#39;Image classification &amp; networks&#39;,                 &#39;Generative Networks (GAN, VAE, etc)&#39;:&#39;Generative Networks&#39;&#125;, inplace&#x3D;True)       USA18.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;CV Method in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India18.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;CV Method in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_57_0.png"></p><h3 id="6-2-Natural-Language-Processing-multiple"><a href="#6-2-Natural-Language-Processing-multiple" class="headerlink" title="6-2. Natural Language Processing (multiple)"></a>6-2. Natural Language Processing (multiple)</h3><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 10f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))USA19.replace(&#123;&#39;Word embeddings&#x2F;vectors (GLoVe, fastText, word2vec)&#39;:&#39;Word embeddings&#x2F;vectors&#39;,               &#39;Encoder-decorder models (seq2seq, vanilla transformers)&#39;:&#39;Encoder-decoder models&#39;,               &#39;Contextualized embeddings (ELMo, CoVe)&#39;:&#39;Contextualized embeddings&#39;,               &#39;Transformer language models (GPT-3, BERT, XLnet, etc)&#39;:&#39;Transformer language models&#39;&#125;, inplace&#x3D;True)India19.replace(&#123;&#39;Word embeddings&#x2F;vectors (GLoVe, fastText, word2vec)&#39;:&#39;Word embeddings&#x2F;vectors&#39;,                 &#39;Encoder-decorder models (seq2seq, vanilla transformers)&#39;:&#39;Encoder-decoder models&#39;,                 &#39;Contextualized embeddings (ELMo, CoVe)&#39;:&#39;Contextualized embeddings&#39;,                 &#39;Transformer language models (GPT-3, BERT, XLnet, etc)&#39;:&#39;Transformer language models&#39;&#125;, inplace&#x3D;True)USA19.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;NLP Method in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India19.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;NLP Method in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_59_0.png"></p><h2 id="7-Machine-Learning-in-the-business"><a href="#7-Machine-Learning-in-the-business" class="headerlink" title="7. Machine Learning in the business "></a>7. Machine Learning in the business <a class="anchor" id="chapter7"></a></h2><p>I wondered if the company actually uses machine learning in their business, so I choose this question. Unfortunately, there are few answers that could be used because there are many missing values.</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df &#x3D; df.dropna(subset&#x3D;[&#39;Q22&#39;]) # drop NaNdf[&#39;Q22&#39;].replace(&#123;&#39;We are exploring ML methods (and may one day put a model into production)&#39;:&#39;Exploring step&#39;,                   &#39;We use ML methods for generating insights (but do not put working models into production)&#39;:&#39;Use for insights&#39;,                   &#39;We recently started using ML methods (i.e., models in production for less than 2 years)&#39;:&#39;Started using ML methods&#39;,                   &#39;We have well established ML methods (i.e., models in production for more than 2 years)&#39;:&#39;Have well established ML methods&#39;,                   &#39;No (we do not use ML methods)&#39;:&#39;Do not use&#39;,                   &#39;I do not know&#39;:&#39;Do not know&#39;&#125;, inplace&#x3D;True)def countplot_(data, col_name, q_order):  values &#x3D; data[col_name].value_counts()[q_order].values  ax &#x3D; sns.countplot(x &#x3D; col_name, hue&#x3D;data.columns[3], data&#x3D;data, hue_order &#x3D; legend_list, palette &#x3D; &quot;husl&quot;,                    order &#x3D; [&#39;Exploring step&#39;,&#39;Use for insights&#39;,&#39;Started using ML methods&#39;,&#39;Have well established ML methods&#39;,&#39;Do not use&#39;,&#39;Do not know&#39;])  for p in ax.patches:    height &#x3D; p.get_height()    ax.text(p.get_x() + p.get_width()&#x2F;2.,            height+3, height, ha&#x3D;&#39;center&#39;, size&#x3D;6)  ax.set_ylim([0, 550])  plt.xticks(rotation&#x3D;20, fontsize&#x3D;8)  plt.xlabel(&#39;&#39;)  plt.yticks(fontsize&#x3D;8)  plt.ylabel(&#39;&#39;)  plt.legend(fontsize&#x3D;8, loc&#x3D;&#39;upper right&#39;)  plt.title(&#39;Using ML in the business&#39;, fontsize&#x3D;15)  plt.show()q22_order &#x3D; [&#39;Exploring step&#39;,&#39;Use for insights&#39;,&#39;Started using ML methods&#39;,&#39;Have well established ML methods&#39;,&#39;Do not use&#39;,&#39;Do not know&#39;]col_name &#x3D; &quot;Q22&quot;countplot_(df, col_name, q22_order)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_61_0.png"></p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">df_normalize22 &#x3D; df.groupby([&#39;Q3&#39;])[&#39;Q22&#39;].value_counts(dropna&#x3D;False, normalize&#x3D;True, ascending&#x3D;False)df_normalize22 &#x3D; pd.DataFrame(df_normalize22)df_normalize22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>Q22</th>    </tr>    <tr>      <th>Q3</th>      <th>Q22</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="6" valign="top">India</th>      <th>Exploring step</th>      <td>0.217248</td>    </tr>    <tr>      <th>Have well established ML methods</th>      <td>0.179466</td>    </tr>    <tr>      <th>Do not know</th>      <td>0.177823</td>    </tr>    <tr>      <th>Started using ML methods</th>      <td>0.165092</td>    </tr>    <tr>      <th>Do not use</th>      <td>0.156468</td>    </tr>    <tr>      <th>Use for insights</th>      <td>0.103901</td>    </tr>    <tr>      <th rowspan="6" valign="top">USA</th>      <th>Have well established ML methods</th>      <td>0.262517</td>    </tr>    <tr>      <th>Exploring step</th>      <td>0.165088</td>    </tr>    <tr>      <th>Started using ML methods</th>      <td>0.163058</td>    </tr>    <tr>      <th>Do not use</th>      <td>0.146143</td>    </tr>    <tr>      <th>Do not know</th>      <td>0.132612</td>    </tr>    <tr>      <th>Use for insights</th>      <td>0.130582</td>    </tr>  </tbody></table></div><p>There are so many NaN. I think they didn’t know about it, so they just skipped that question. I dropped all NaN in this question.</p><p>In the USA, there are about 72.3% of respondents’s firm use machine learning for their business. In India there are about 66.4% of respondents’s firm use it for their business. It is noticeable that the ratio of using machine learning in the business in both counrty is not big different.</p><p>However, it may be an uncertain value because all missing values are deleted. Therefore if you wondered about it, I strongly recommend find some useful reports.</p><h2 id="8-Want-to-learn-machine-learning-product-multiple"><a href="#8-Want-to-learn-machine-learning-product-multiple" class="headerlink" title="8. Want to learn machine learning product (multiple) "></a>8. Want to learn machine learning product (multiple) <a class="anchor" id="chapter8"></a></h2><p>Finally, I comfirm that the machine learning products what Americans and Indians want to learn. Because the importance and potential of machine learning is continuosly emphasized, I feel like it help us to understand the trend of indusrty.</p><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;"># Preprocess dataUSA28b &#x3D; (USA[&#39;Q28_B_Part_1&#39;], USA[&#39;Q28_B_Part_2&#39;], USA[&#39;Q28_B_Part_3&#39;],          USA[&#39;Q28_B_Part_4&#39;], USA[&#39;Q28_B_Part_5&#39;], USA[&#39;Q28_B_Part_6&#39;],          USA[&#39;Q28_B_Part_7&#39;], USA[&#39;Q28_B_Part_8&#39;], USA[&#39;Q28_B_Part_9&#39;], USA[&#39;Q28_B_OTHER&#39;])USA28b &#x3D; pd.concat(USA28b)India28b &#x3D; (India[&#39;Q28_B_Part_1&#39;], India[&#39;Q28_B_Part_2&#39;], India[&#39;Q28_B_Part_3&#39;],            India[&#39;Q28_B_Part_4&#39;], India[&#39;Q28_B_Part_5&#39;], India[&#39;Q28_B_Part_6&#39;],            India[&#39;Q28_B_Part_7&#39;], India[&#39;Q28_B_Part_8&#39;], India[&#39;Q28_B_Part_9&#39;], India[&#39;Q28_B_OTHER&#39;])India28b &#x3D; pd.concat(India28b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;python&#125;" data-language="&#123;python&#125;"><code class="language-&#123;python&#125;">mpl.rcParams[&#39;font.size&#39;] &#x3D; 10f, ax &#x3D; plt.subplots(1, 2, figsize &#x3D; (12, 8))USA28b.replace(&#123;&#39; Azure Machine Learning Studio &#39;:&#39;Azure ML Studio&#39;,                &#39; Google Cloud AI Platform &#x2F; Google Cloud ML Engine&#39;:&#39;Google Cloud AI Platform&#x2F;ML Engine&#39;&#125;, inplace&#x3D;True)    India28b.replace(&#123;&#39; Azure Machine Learning Studio &#39;:&#39;Azure ML Studio&#39;,                &#39; Google Cloud AI Platform &#x2F; Google Cloud ML Engine&#39;:&#39;Google Cloud AI Platform&#x2F;ML Engine&#39;&#125;, inplace&#x3D;True)                    USA28b.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[0])ax[0].set_title(&#39;Want to learn in USA&#39;, fontsize&#x3D;20)ax[0].set_ylabel(&#39;&#39;)India28b.value_counts().plot.pie(autopct&#x3D;&#39;%.1f%%&#39;, ax &#x3D; ax[1])ax[1].set_title(&#39;Want to learn in India&#39;, fontsize&#x3D;20)ax[1].set_ylabel(&#39;&#39;)plt.tight_layout()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/kaggle_survey_2020/output_66_0.png"></p><p>Everything was chosen by similarly ratio. Above all, Google Cloud AI Platform / Google Cloud ML Engine is the most popular among beginners in two countries.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h3><p>Through exploratory data analysis of 《2020 Kaggle Machine Learning &amp; df Science Survey》, we were able to learn about trends of coding and machine learning. Comparing with an obvious IT powerhouse country, the USA and the rising IT powerhouse India is very meaningful to explore trends of it. Most noticeable is that the USA has been interested in coding and programs from long ago, and India is a country with coding craze especially among young ages. It is amazing that the two countries’ response are very similar in the part of machine learning surveys. I think it is proven the importance of machine learning these days. It was an interesting work.</p>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Project/">Project</category>
      
      <category domain="https://ne-choi.github.io/categories/Project/Kaggle/">Kaggle</category>
      
      
      <category domain="https://ne-choi.github.io/tags/EDA/">EDA</category>
      
      <category domain="https://ne-choi.github.io/tags/Kaggle/">Kaggle</category>
      
      <category domain="https://ne-choi.github.io/tags/Kaggle-beginner/">Kaggle beginner</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/07/Projects/Kaggle%20Competition-The_future_of_ML_americans_vs_indians/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 1: Ⅲ. 데이터 시각화와 통계적 해석</title>
      <link>https://ne-choi.github.io/2021/01/06/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A2_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%8B%9C%EA%B0%81%ED%99%94%EC%99%80_%ED%86%B5%EA%B3%84%EC%A0%81_%ED%95%B4%EC%84%9D/</link>
      <guid>https://ne-choi.github.io/2021/01/06/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A2_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%8B%9C%EA%B0%81%ED%99%94%EC%99%80_%ED%86%B5%EA%B3%84%EC%A0%81_%ED%95%B4%EC%84%9D/</guid>
      <pubDate>Wed, 06 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅲ-데이터-시각화와-통계적-해석&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.</li></ul><h1 id="Ⅲ-데이터-시각화와-통계적-해석"><a href="#Ⅲ-데이터-시각화와-통계적-해석" class="headerlink" title="Ⅲ. 데이터 시각화와 통계적 해석"></a>Ⅲ. 데이터 시각화와 통계적 해석</h1><h2 id="1-데이터-시각화"><a href="#1-데이터-시각화" class="headerlink" title="1. 데이터 시각화"></a>1. 데이터 시각화</h2><h3 id="데이터-분석단계"><a href="#데이터-분석단계" class="headerlink" title="데이터 분석단계"></a>데이터 분석단계</h3><ul><li>수집 → 정제 → 시각화 → 예측모형/분석</li></ul><h2 id="2-그래프의-유용성과-오류"><a href="#2-그래프의-유용성과-오류" class="headerlink" title="2. 그래프의 유용성과 오류"></a>2. 그래프의 유용성과 오류</h2><h3 id="그래프의-유용성"><a href="#그래프의-유용성" class="headerlink" title="그래프의 유용성"></a>그래프의 유용성</h3><ul><li>그래프는 데이터 시각화의 일종</li><li>그래프의 올바른 해석은 데이터사이언티스트의 필수 능력이자 커뮤니케이션 도구</li></ul><ul><li>히스토그램<ul><li>같은 분산이라도 데이터 분포를 더 잘 파악할 수 있음</li><li>계급 구간 설정에 따라 히스토그램 그래프가 완전히 달라짐</li></ul></li></ul><h3 id="데이터-시각화-주의할-점"><a href="#데이터-시각화-주의할-점" class="headerlink" title="데이터 시각화 주의할 점"></a>데이터 시각화 주의할 점</h3><ul><li>그래프 목적은 데이터를 분명하게 표현하는 것<ol><li>그래프 작성 시, 축의 범위와 간격 등을 잘 정해야 함</li><li>그래프를 보는 사람의 수준을 고려해야 함</li><li>그래프 종류별 장단점을 정확히 파악하고 사용해야 함</li></ol></li></ul><h3 id="퀴즈-오답"><a href="#퀴즈-오답" class="headerlink" title="퀴즈 오답"></a>퀴즈 오답</h3><ol><li>히스토그램을 통해 알 수 있는 것<ul><li>데이터의 분포 범위</li><li>이상치(Outlier)의 존재 유무</li></ul></li></ol><h2 id="3-상자그림이-주는-정보와-해석"><a href="#3-상자그림이-주는-정보와-해석" class="headerlink" title="3. 상자그림이 주는 정보와 해석"></a>3. 상자그림이 주는 정보와 해석</h2><h3 id="상자그림이-필요한-이유"><a href="#상자그림이-필요한-이유" class="headerlink" title="상자그림이 필요한 이유?"></a>상자그림이 필요한 이유?</h3><ul><li>평균과 분산(기술통계치)만으로는 부족함<ul><li>평균, 분산을 안다고 데이터가 어느 쪽에 더 많이 분포하는지 알 수 없음</li><li>이상치 존재 여부를 알 수 없음</li><li>데이터 분포 범위(최대값, 최소값)를 한눈에 알기 어려움</li></ul></li></ul><h3 id="상자그림이-주는-정보"><a href="#상자그림이-주는-정보" class="headerlink" title="상자그림이 주는 정보"></a>상자그림이 주는 정보</h3><ul><li>한눈에 5가지 정보를 제공<ul><li>중앙값, 일사분위수, 삼사분위수, 최대값, 최소값</li><li>데이터 분포의 대칭성, 치우침, 이상치를 쉽게 파악할 수 있음</li></ul></li></ul><h3 id="상자그림-그리는-방법"><a href="#상자그림-그리는-방법" class="headerlink" title="상자그림 그리는 방법"></a>상자그림 그리는 방법</h3><ol><li><p>데이터의 중앙값(median)을 찾는다.</p><ul><li>중앙값이란?<ul><li>n개의 관측치를 오름차순으로 배열했을 때, 중앙 위치에 놓이는 값</li><li>데이터 수가 작고 이상치가 있을 때, 평균보다 더 정확한 모집단의 중심값이 됨</li></ul></li></ul></li><li><p>일사분위수(Q1)와 삼사분위수(Q3)을 찾는다.</p><ul><li>일사분위수(Q1)<ul><li>데이터를 크기 순서로 배열했을 때, 25% 지점 값</li></ul></li><li>삼사분위수(Q3)<ul><li>데이터를 크기 순서로 배열했을 때, 75% 지점 값</li></ul></li></ul></li><li><p>일사분위수 ~ 삼사분위수를 상자로 그린다. (사분위범위)</p></li><li><p>최소값 ~ 일사분위수, 삼사분위수 ~ 최대값을 그린다.</p></li><li><p>이상치를 표시한다.</p><ul><li>일사분위로부터 -(1.5)*사분위범위를 넘는 관측치는 이상치로 표시</li><li>삼사분위로부터 +(1.5)*사분위범위를 넘는 관측치는 이상치로 표시</li></ul></li></ol><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>상자그림은 다섯 가지 숫자로 데이터를 요약한 그래프<ul><li>가운데 상자는 Q1에서 Q1까지 그림</li><li>상자 안의 선은 중앙값을 나타냄</li><li>상자 밖 선은 최대값과 최소값까지 이어짐</li><li>상자와 수염 밖 데이터는 이상치</li></ul></li></ul><h2 id="4-산점도와-상관관계-트렌드-분석"><a href="#4-산점도와-상관관계-트렌드-분석" class="headerlink" title="4. 산점도와 상관관계: 트렌드 분석"></a>4. 산점도와 상관관계: 트렌드 분석</h2><h3 id="산점도-필요-이유"><a href="#산점도-필요-이유" class="headerlink" title="산점도 필요 이유"></a>산점도 필요 이유</h3><ul><li>지금까지 히스토그램, 상자그림으로 변수 1개의 데이터 분포를 살펴봄</li><li><strong>두 변수 사이 관계</strong>를 아는 방법은?</li></ul><h3 id="산점도-Scatter-plot"><a href="#산점도-Scatter-plot" class="headerlink" title="산점도(Scatter plot)"></a>산점도(Scatter plot)</h3><ul><li><p>변수 간 관계 방향, 트렌드, 강도를 알 수 있음</p></li><li><p>산점도의 x축과 y축은 독립변수와 종속변수로 이루어짐</p><ul><li>독립변수: 원인 역할을 하는 변수, X</li><li>종속변수: 결과 관측 변수, Y</li><li>ex. 학점 - 공부 시간</li></ul></li><li><p>산점도로부터 알 수 있는 3가지</p><ul><li>트렌드: linear, curved, clusters, no pattern</li><li>방향: positie, negative, no direction</li><li>강도: how closely the points fit the trend</li></ul></li></ul><h3 id="산점도-해석-방향"><a href="#산점도-해석-방향" class="headerlink" title="산점도 해석: 방향"></a>산점도 해석: 방향</h3><ul><li><p>양의 상관관계(Positively associated)</p><ul><li>두 변수 X와 Y가 X값이 클 때 Y값도 큰 경향이 있고, X값이 작을 때 Y값도 작은 경향</li></ul></li><li><p>음의 상관관계(Negatively associated)</p><ul><li>두 변수 X와 Y가 X값이 클 때 Y값은 작은 경향이 있고, X값이 작을 때 Y값은 큰 경향</li></ul></li></ul><h3 id="산점도-해석-강도"><a href="#산점도-해석-강도" class="headerlink" title="산점도 해석: 강도"></a>산점도 해석: 강도</h3><ul><li>상관계수(Correlation, r)<ul><li>r은 -1부터 +1까지 존재</li><li>+1에 가까울수록 강한 양의 상관관계</li><li>-1에 가까울수록 강한 음의 상관관계</li><li>0은 가장 약한 상관관계(상관관계가 없음)</li></ul></li><li>산점도에서 의미하는 상관관계: <strong>선형적인</strong> 상관관계만을 말함</li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li>산점도는 두 변수간 관계 방향, 형태, 강도를 살펴볼 수 있는 그래프</li><li>상관계수(r)는 두 변수간 선형적인 상관관계의 강도를 나타냄</li><li>산점도에서 선형모형(선형함수식)을 구현할 수 있음</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%86%B5%EA%B3%84/">통계</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%8B%9C%EA%B0%81%ED%99%94/">데이터시각화</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/06/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A2_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%8B%9C%EA%B0%81%ED%99%94%EC%99%80_%ED%86%B5%EA%B3%84%EC%A0%81_%ED%95%B4%EC%84%9D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 1: Ⅱ. 빅데이터 탐색의 첫걸음</title>
      <link>https://ne-choi.github.io/2021/01/05/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A1_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%83%90%EC%83%89%EC%9D%98_%EC%B2%AB%EA%B1%B8%EC%9D%8C/</link>
      <guid>https://ne-choi.github.io/2021/01/05/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A1_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%83%90%EC%83%89%EC%9D%98_%EC%B2%AB%EA%B1%B8%EC%9D%8C/</guid>
      <pubDate>Tue, 05 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅱ-빅데이터-탐색의-첫걸음&quot;&gt;&lt;a href=&quot;#Ⅱ</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.</li></ul><h1 id="Ⅱ-빅데이터-탐색의-첫걸음"><a href="#Ⅱ-빅데이터-탐색의-첫걸음" class="headerlink" title="Ⅱ. 빅데이터 탐색의 첫걸음"></a>Ⅱ. 빅데이터 탐색의 첫걸음</h1><h2 id="1-데이터의-평균-중심위치"><a href="#1-데이터의-평균-중심위치" class="headerlink" title="1. 데이터의 평균(중심위치)"></a>1. 데이터의 평균(중심위치)</h2><h3 id="평균"><a href="#평균" class="headerlink" title="평균"></a>평균</h3><ul><li>평균은 데이터를 하나의 값으로 표현한 요약된 정보: 추정치</li><li>평균 = 데이터 값의 총합 / 데이터 개수</li></ul><h3 id="평균-다룰-때-주의할-점"><a href="#평균-다룰-때-주의할-점" class="headerlink" title="평균 다룰 때 주의할 점"></a>평균 다룰 때 주의할 점</h3><ul><li>평균은 혼자 존재하는 개념이 아님</li></ul><ol><li><p>평균과 표본선정</p><ul><li><p>표본선정에 따라 평균값이 달라짐</p></li><li><p>ex. 대기업 평균 연봉 조사</p><ul><li>표본 A: 연령대별로 각 50명씩 선정</li><li>표본 B: 50대에서 200명을 선정</li></ul></li><li><p>조사된 평균값이 모집단을 대표하는 통계치라고 할 수 있는가?</p></li><li><p>표본이 적합하게 추출되었는지 평가하는 법</p><ul><li>편의(bias)가 적은가: 표본으로부터 얻어지는 통계치(표본평균)의 기대값이 모수의 참값과 유사한가?</li><li>정확도(precision)가 높은가: 반복해서 표본 추출 시, 얼마나 유사한 값이 나오는가?</li></ul></li></ul></li><li><p>평균과 분산</p><ul><li>같은 평균이라도 분산이 다르면 데이터 특성이 달라짐</li></ul></li><li><p>평균값은 그 집단에서 가장 많이 존재하는 것이 아님</p><ul><li>데이터: 1, 2, 2, 7</li><li>평균: 3</li></ul></li></ol><h3 id="데이터의-중심척도"><a href="#데이터의-중심척도" class="headerlink" title="데이터의 중심척도"></a>데이터의 중심척도</h3><ul><li><p>평균(mean)</p><ul><li>표본이 적은 경우, 아주 큰 값이나 작은 값(outlier)에 민감한 추정치</li><li>중앙값이 평균보다 더 적합한 중심척도인 경우도 있음</li></ul></li><li><p>중앙값(median)</p><ul><li>n개의 관측치를 크기순으로 배열했을 때, 중앙 위치에 놓이는 값</li><li>데이터 수가 작고 이상치(outlier)가 있을 때, 평균보다 더 정확한 모집단의 중심값이 됨</li></ul></li><li><p>최빈값(mode)</p><ul><li>전체 데이터 중, 가장 빈도(frequency)가 높은 값</li><li>데이터 수가 많아질수록 평균과 가까워짐</li></ul></li></ul><h2 id="2-데이터의-분산-산포정도"><a href="#2-데이터의-분산-산포정도" class="headerlink" title="2. 데이터의 분산(산포정도)"></a>2. 데이터의 분산(산포정도)</h2><h3 id="어느-집단-분산이-클까"><a href="#어느-집단-분산이-클까" class="headerlink" title="어느 집단 분산이 클까?"></a>어느 집단 분산이 클까?</h3><ul><li>평균만 아는 사람 vs 평균과 표준편차를 아는 사람</li><li>평균 연봉은 같지만 편차가 큰 경우, 편차가 적은 기업에 비해 초봉이 낮고 승진 시 월급이 높아짐</li></ul><h3 id="분산-공식"><a href="#분산-공식" class="headerlink" title="분산 공식"></a>분산 공식</h3><ul><li>데이터 평균과 데이터간 거리 합으로 분산 계산<ul><li>데이터: x<del>1</del>, x<del>2</del>, …, x<del>n</del></li><li>평균: Xbar</li><li>편차: (x<del>1</del> - xbar),(x<del>2</del> - xbar),…,(x<del>n</del> - xbar)</li><li>편차들의 합: (x<del>1</del> - xbar) + (x<del>2</del> - xbar) + … + (x<del>n</del> - xbar) = ?</li></ul></li></ul><br>- 데이터가 평균으로부터 대칭적으로 존재할 경우, 편차들의 합이 0 → **편차를 제곱하여 더함**- 분산 = 편차들의 제곱합을 (n-1)*로 나눔  - (n-1)로 나누는 이유: 자유도와 관련, 평균값으로 표본평균을 사용하므로 1개의 자유도를 잃게 되어 (n-1)로 나눔<h3 id="표준편차"><a href="#표준편차" class="headerlink" title="표준편차"></a>표준편차</h3><ul><li>(개별데이터값 - 평균값) 차이를 제곱하여 더하였으므로 값이 커지고 단위가 달라짐<br>→ 분산에 <strong>제곱근</strong>을 취하여 원래 단위로 복원 → <strong>표준편차</strong>라고 부름</li></ul><h3 id="분산의-의미"><a href="#분산의-의미" class="headerlink" title="분산의 의미"></a>분산의 의미</h3><ul><li>분산: 데이터가 분포되어있는 정도<ul><li>데이터에 대한 요약 정보 보완</li><li>평균값만으로는 데이터 상상이 어려움</li></ul></li></ul><h2 id="3-데이터와-빅데이터"><a href="#3-데이터와-빅데이터" class="headerlink" title="3. 데이터와 빅데이터"></a>3. 데이터와 빅데이터</h2><h3 id="데이터란"><a href="#데이터란" class="headerlink" title="데이터란?"></a>데이터란?</h3><ul><li>모든 숫자를 데이터라고 할 수 있을까? No</li><li>데이터: <strong>구조화된 데이터</strong><ul><li>다차원 배열(매트릭스)</li><li>각 열의 형식이 다른 표 or 스프레드시트</li><li>탭이나 텍스트파일 형식으로 저장</li></ul></li></ul><h3 id="데이터화-Datafication"><a href="#데이터화-Datafication" class="headerlink" title="데이터화(Datafication)"></a>데이터화(Datafication)</h3><ul><li>기계가 읽어들일 수 있는 모든 것(숫자, 이미지, 텍스트)을 데이터로 변환하는 것</li><li>개인의 활동을 실시간으로 추적해 이를 예측분석이 가능한 수량화된 온라인 데이터로 변환하는 것을 의미</li></ul><h3 id="빅데이터란"><a href="#빅데이터란" class="headerlink" title="빅데이터란"></a>빅데이터란</h3><ul><li>Volume(양)</li><li>Velocity(속도)</li><li>Variety(다양성)</li></ul><h2 id="4-데이터-탐색의-첫걸음"><a href="#4-데이터-탐색의-첫걸음" class="headerlink" title="4. 데이터 탐색의 첫걸음"></a>4. 데이터 탐색의 첫걸음</h2><h3 id="통계치로-인사이트-얻기"><a href="#통계치로-인사이트-얻기" class="headerlink" title="통계치로 인사이트 얻기"></a>통계치로 인사이트 얻기</h3><ul><li>ㅇㅇ회사 공채에 합격하기 위해 합격자 평균 분석</li><li>사람들이 선호하는 기업 문화 알아보기</li></ul><h3 id="최적의-의사결정-데이터탐색"><a href="#최적의-의사결정-데이터탐색" class="headerlink" title="최적의 의사결정: 데이터탐색"></a>최적의 의사결정: 데이터탐색</h3><ul><li>공정에 대한 평균, 산포, 불량률 추정<ul><li>품질 변동상황을 관리도(control chart)로 표현</li><li>공정에 발생하는 이상요인을 빨리 탐지하여 수정조치 → 불량 사전 예방</li><li>공정에서 정상범위 관리도 차트</li><li>중심선, 관리상한선, 관리하한선을 어떻게 정할 것인가?</li></ul></li></ul><h3 id="숨겨진-패턴-분석-분류"><a href="#숨겨진-패턴-분석-분류" class="headerlink" title="숨겨진 패턴 분석: 분류"></a>숨겨진 패턴 분석: 분류</h3><ul><li><p>암과 정상 뇌 영상을 숫자화(데이터화)함</p><ul><li>분류(암/정상)를 가장 잘 구분하는 변수를 찾고, 범주간 차이를 가장 잘 표현하는 새로운 함수를 구함</li><li>새로운 환자 영상을 보고 어느 범주에 더 가까운지를 판별하여 암 여부를 진단</li></ul></li><li><p>두 범주가 잘 분류된다는 것: 두 범주가 겹치지 않으면서 두 범주 중심위치가 가능한 먼 것</p></li></ul><h3 id="트렌드-분석-웹-마이닝"><a href="#트렌드-분석-웹-마이닝" class="headerlink" title="트렌드 분석: 웹 마이닝"></a>트렌드 분석: 웹 마이닝</h3><ul><li>1년간 검색어 트렌드 분석</li><li>Moving Average를 통한 트렌드 파악</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%8F%89%EA%B7%A0/">평균</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%B6%84%EC%82%B0/">분산</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/05/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A1_%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%83%90%EC%83%89%EC%9D%98_%EC%B2%AB%EA%B1%B8%EC%9D%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터사이언스를 위한 통계학입문 1: Ⅰ. 데이터과학과 통계</title>
      <link>https://ne-choi.github.io/2021/01/04/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A0_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B3%BC%ED%95%99%EA%B3%BC_%ED%86%B5%EA%B3%84/</link>
      <guid>https://ne-choi.github.io/2021/01/04/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A0_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B3%BC%ED%95%99%EA%B3%BC_%ED%86%B5%EA%B3%84/</guid>
      <pubDate>Mon, 04 Jan 2021 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ⅰ-데이터과학과-통계&quot;&gt;&lt;a href=&quot;#Ⅰ-데이</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 데이터사이언스를 위한 통계학입문 Ⅰ 과정입니다.</li></ul><h1 id="Ⅰ-데이터과학과-통계"><a href="#Ⅰ-데이터과학과-통계" class="headerlink" title="Ⅰ 데이터과학과 통계"></a>Ⅰ 데이터과학과 통계</h1><h2 id="1-데이터과학이란-무엇인가"><a href="#1-데이터과학이란-무엇인가" class="headerlink" title="1. 데이터과학이란 무엇인가"></a>1. 데이터과학이란 무엇인가</h2><h3 id="데이터과학이란"><a href="#데이터과학이란" class="headerlink" title="데이터과학이란?"></a>데이터과학이란?</h3><ul><li><p>빅데이터: 통계학, 데이터마이닝, 인공지능, 딥러닝  </p></li><li><p>Data → Data Analytics → Insight  </p></li><li><p>필요한 기술</p><ul><li>통계적 개념과 지식: 샘플링, 확률분포, 가설검정, p-value</li><li>데이터 다루는 기술(데이터 큐레이션): 빅데이터 다루기</li><li>데이터 요약된 정보 전달 기술: 데이터 시각화(공간지도분석, 다차원그래픽)</li><li>데이터윤리, 데이터보안</li><li>데이터 도메인 지식, 분석 능력: 현실 문제 해결 능력</li></ul></li></ul><h3 id="데이터-과학-예시"><a href="#데이터-과학-예시" class="headerlink" title="데이터 과학 예시"></a>데이터 과학 예시</h3><ul><li>핀란드 의료데이터 프로젝트: FinnGen<ul><li>핀란드인(Finnish) + 유전자(Genome)</li><li>자발적 참여자의 유전자정보 수집, 확자의 의료정보까지 통합 구축</li><li>50만명 목표, 23만명 수집, 15만명 유전자 정보 보호</li><li>6개월마다 데이터 업데이트: 전세계 연구자와 공유</li><li>관절염/당뇨병 등 자가면역질환 연구 수행</li></ul></li></ul><h3 id="공부할-내용"><a href="#공부할-내용" class="headerlink" title="공부할 내용"></a>공부할 내용</h3><ul><li>데이터과학을 위한 통계 개념과 지식</li><li>공유데이터와 오픈소스</li><li>빅데이터분석을 위한 첫걸음: 데이터 중심 위치, 산포 정도 확인</li><li>데이터 시각화</li><li>데이터과학에서 확률분포 의미</li></ul><h2 id="2-통계가-상식이-된-사회"><a href="#2-통계가-상식이-된-사회" class="headerlink" title="2. 통계가 상식이 된 사회"></a>2. 통계가 상식이 된 사회</h2><h3 id="통계가-왜-필요한가"><a href="#통계가-왜-필요한가" class="headerlink" title="통계가 왜 필요한가?"></a>통계가 왜 필요한가?</h3><ul><li>통계는 올바른 의사결정을 도움<ul><li>빅데이터 → 요약된 정보 제공, 과거 데이터로 미래 예측, 데이터에 숨겨진 패턴 발견 → 올바른 의사결정</li></ul></li></ul><h3 id="의사결정에서-통계의-역할"><a href="#의사결정에서-통계의-역할" class="headerlink" title="의사결정에서 통계의 역할"></a>의사결정에서 통계의 역할</h3><ul><li><p>ex. 고객 이동경로 분석 결과 활용 예시</p><ul><li>고객 금융 검색 경로 추적</li><li>고객 이동경로(customer journey) 분석</li><li>이탈 가능성 높은 고객을 붙잡고 신규 고객 유입하는 데 사용</li></ul></li><li><p>정부 정책 근거자료: 영국의회 노령연금 도입</p><ul><li>1886년 영국 사회학자 찰스 부스</li><li>산업혁명으로 부유해진 런던에서 시민 빈곤 상황을 12년간 조사</li><li>가난을 8단계로 분류하여 절대빈곤이 30.7%에 달한다는 결과 발표</li><li>1908년 영국의회 노령연금 도입</li></ul></li><li><p>서울시 심야버스 노선정책</p><ul><li>자정 ~ 새벽 5시까지의 시민 휴대폰 전화 데이터 수집</li><li>유동인구 분포 및 밀도 파악하여 심야버스 노선 수립</li></ul></li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>개인의 일상활동은 데이터화되어 예측분석이 가능하도록 수량화, 객관화됨</li><li>통계는 수많은 데이터로부터 요약된 정보 제공, 미래 데이터 예측, 숨겨진 패턴 발견 → 올바른 의사결정을 하게 함</li><li>통계치는 금융권 관리전략, 정부 정책 수립, 법정소송 시 근거자료로 활용될 수 있음</li></ul><h2 id="3-데이터-분선과-윤리"><a href="#3-데이터-분선과-윤리" class="headerlink" title="3. 데이터 분선과 윤리"></a>3. 데이터 분선과 윤리</h2><h3 id="데이터-정직성"><a href="#데이터-정직성" class="headerlink" title="데이터 정직성"></a>데이터 정직성</h3><ul><li><p>데이터 정직성?</p><ul><li>데이터가 잘못되지 않았는지를 나타냄</li></ul></li><li><p>ex. 한강 수질 검사</p><ul><li><p>한강에서 물을 한웅큼 채취</p></li><li><p>방 안에 있는 보온병에 보관</p></li><li><p>수질 검사를 하면 그 결과를 신뢰할 수 있는가?</p></li><li><p>데이터를 잘못 수집했다</p><ul><li>한강이 넓은데 어디서 수집?: 표본의 수</li><li>어제 산성비가 내렸을 수 있음: 데이터 수집 기간/시기</li><li>손으로 채집하여 오염 가능성: 수집 방법</li></ul></li><li><p>데이터를 잘못 보관했다</p><ul><li>보온병 세균이 옮으면?</li><li>차가운 데 보관해야 하는 것 아닌지?</li><li>다른 이가 손대지 못하게 안전히 보관해야 함: data storage</li></ul></li></ul></li></ul><h3 id="기사-내-통계치-해석-평가"><a href="#기사-내-통계치-해석-평가" class="headerlink" title="기사 내 통계치 해석/평가"></a>기사 내 통계치 해석/평가</h3><ul><li><p>ex. 비정규직 vs 정규직 임금 격차</p><ul><li>동등한 조건으로 비교되었는지</li><li>성, 연령, 근속년수 등 요인이 통제된 상태의 시급으로 비교되었는지</li></ul></li><li><p>ex. 세무사 월 최고 소득</p><ul><li>편향된 표본 추출</li><li>세무사 39명 조사, 우연히 연봉 3~4억원 대인 자영업 세무사가 많았음</li></ul></li></ul><h3 id="요약-1"><a href="#요약-1" class="headerlink" title="요약"></a>요약</h3><ul><li>데이터과학 윤리<br>-데이터를 올바르게 분석할 뿐 아니라 올바른 방법으로 수집해야 함</li><li>정직하지 못한 데이터의 주요 원인<ul><li>데이터분석자의 무지함, 비윤리성, 환경의 제약</li></ul></li><li>데이터 수집 시, 너무 적은 양의 데이터, 편향된 표본 추출, 데이터의 왜곡 및 훼손에 주의</li><li>결측치 문제 고려</li></ul><h2 id="4-공유데이터와-오픈소스-github"><a href="#4-공유데이터와-오픈소스-github" class="headerlink" title="4. 공유데이터와 오픈소스(github)"></a>4. 공유데이터와 오픈소스(github)</h2><h3 id="공유데이터"><a href="#공유데이터" class="headerlink" title="공유데이터"></a>공유데이터</h3><ul><li><p>공유데이터?</p><ul><li>모든사람이 자유롭게 사용/재사용/재배포 가능한 데이터</li><li>이용성 및 접근성</li><li>재사용과 재배포</li><li>보편적 참여</li></ul></li><li><p>공유데이터 서비스</p><ul><li>머신러닝 기법 분석에 활용 가능한 데이터 저장소<ul><li><a href="https://archive.ics.uci.edu/ml/index.php">Machine Learning Repository in UC, Irvine</a></li></ul></li><li>정부 제공<ul><li><a href="kostat.go.kr">통계청</a></li><li><a href="www.data.go.kr">공공데이터포털</a></li><li><a href="data.seoul.go.kr">서울열린데이터광장</a></li></ul></li><li>네이버<ul><li>네이버 데이터랩: 국내 공공데이터를 기관별로 분류하여 접근성을 높임</li></ul></li></ul></li></ul><h3 id="오픈소스"><a href="#오픈소스" class="headerlink" title="오픈소스"></a>오픈소스</h3><ul><li><p>오픈소스?</p><ul><li>저작권자가 소스코드를 공개하여 누구나 복제, 개작, 배포할 수 있는 소프트웨어</li><li>R, Python: 오픈소스 통계분석 프로그램</li><li>C++, JAVA, Python 등 다른 프로그래밍 언어와 쉽게 연동</li><li>빅데이터 시스템인 스파크와도 일부 기능을 연동함으로써 응용범위가 더욱 넓어짐</li></ul></li><li><p>인공지능에서의 오픈소스</p><ul><li>텐서플로우: 구글에서 머신러닝과 신경망 연구를 위해 만튼 소프트웨어</li><li>딥마인드랩: 구글 딥마인드에서 공개한 인공지능 개발 플랫폼</li></ul></li><li><p>공유데이터 vs 오픈소스</p><ul><li>공유데이터: 단순히 수치로 표현되는 측정치 또는 결괏값</li><li>오픈소스: 단순 데이터가 아닌 지적 창작물</li></ul></li></ul><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><ul><li>git: 프로그램 등 소스 코드 관리를 위한 분산 관리 툴</li><li>github은 git에 프로젝트 관리지원기능을 확장한 웹 호스팅 서비스</li><li>2008년 미국 github사에서 서비스 시작</li><li>2018년 마이크로소프트가 인수</li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/Statistics/">Statistics</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%86%B5%EA%B3%84/">통계</category>
      
      
      <comments>https://ne-choi.github.io/2021/01/04/Study/Postech/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8/%E2%85%A0_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B3%BC%ED%95%99%EA%B3%BC_%ED%86%B5%EA%B3%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝 기법과 R 프로그래밍 2: ⅩⅥ. 딥러닝과 텍스트 마이닝</title>
      <link>https://ne-choi.github.io/2020/12/24/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A5_%EB%94%A5%EB%9F%AC%EB%8B%9D%EA%B3%BC_%ED%85%8D%EC%8A%A4%ED%8A%B8_%EB%A7%88%EC%9D%B4%EB%8B%9D/</link>
      <guid>https://ne-choi.github.io/2020/12/24/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A5_%EB%94%A5%EB%9F%AC%EB%8B%9D%EA%B3%BC_%ED%85%8D%EC%8A%A4%ED%8A%B8_%EB%A7%88%EC%9D%B4%EB%8B%9D/</guid>
      <pubDate>Thu, 24 Dec 2020 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ⅩⅥ-딥러닝과-텍스트-마이닝&quot;&gt;&lt;a href=&quot;#Ⅹ</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  </li></ul><h1 id="ⅩⅥ-딥러닝과-텍스트-마이닝"><a href="#ⅩⅥ-딥러닝과-텍스트-마이닝" class="headerlink" title="ⅩⅥ. 딥러닝과 텍스트 마이닝"></a>ⅩⅥ. 딥러닝과 텍스트 마이닝</h1><h2 id="1-Neural-Networks"><a href="#1-Neural-Networks" class="headerlink" title="1. Neural Networks"></a>1. Neural Networks</h2><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ul><li>인공신경망은 기계학습(Machine Learning)의 통계적 학습 알고리즘 중 하나</li><li>컴퓨터 비전, 자연어 처리, 음석 인식 등 영역에서 사용</li><li>AI ⊂ Machine Learning ⊂ Neural Network  </li></ul><ul><li><strong>신경망 모델(Neural Network)</strong><ul><li>Perceptron을 한 단위로 하는 네트워크를 구축하여, 인간의 신경세포(Neuron)와 유사한 기능을 하도록 제안</li></ul></li></ul><h3 id="Perceptron-Single-Layer"><a href="#Perceptron-Single-Layer" class="headerlink" title="Perceptron - Single Layer"></a>Perceptron - Single Layer</h3><ul><li>하나의 Perceptron은 단순히 다수의 입력과 가중치의 선형 결합을 계산하는 역할을 수행</li><li>Activation 함수에 따라 선형결합으로 생성되는 출력값이 결정<ul><li>Binary Threshold</li><li>Sigmoid</li><li>ReLU(Rectified Linear Unit)</li><li>tanh</li></ul></li></ul><h3 id="Multi-layer-perceptron"><a href="#Multi-layer-perceptron" class="headerlink" title="Multi-layer perceptron"></a>Multi-layer perceptron</h3><ul><li><p>Perceptron으로 구성된 Single Layer들이 Multi-layer를 만듦</p><ul><li>Input layer와 Output layer 사이에는 Hidden layer가 존재하여 Non-linear transformation 수행</li></ul></li><li><p>Output layer에서 Softmax 함수를 통해 가장 큰 값을 손쉽게 알 수 있음</p><ul><li>Exponential 함수로 항상 양수 결과치가 도출되고 이를 통해 확률값을 도출</li></ul></li></ul><h3 id="Neural-Network-수행"><a href="#Neural-Network-수행" class="headerlink" title="Neural Network 수행"></a>Neural Network 수행</h3><ul><li>mxnet 패키지는 R4.0 버전 이후부터 실행 불가</li><li>R 3.6.2버전 설치해서 실행 필요<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># require mxnetinstall.packages(&quot;https:&#x2F;&#x2F;github.com&#x2F;jeremiedb&#x2F;mxnet_winbin&#x2F;raw&#x2F;master&#x2F;mxnet.zip&quot;,repos &#x3D; NULL)library(mxnet)# If you have Error message &quot;no package called XML or DiagrmmeR&quot;, then installinstall.packages(&quot;XML&quot;)install.packages(&quot;DiagrammeR&quot;)#library(XML)#library(DiagrammeR)#devtools::install_github(&quot;rich-iannone&#x2F;DiagrammeR&quot;)#install.packages(&#39;devtools&#39;)#library(devtools)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>데이터 불러오기<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># read csv fileiris&lt;-read.csv(&quot;data&#x2F;week16_1&#x2F;iris.csv&quot;)attach(iris)# change to numeric from character variable : Speciesiris[,5] &#x3D; as.numeric(iris[,5])-1table(Species)# check the datahead(iris, n&#x3D;10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>학습데이터와 검증데이터<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># split train &amp; test dataset# training (n&#x3D;100)&#x2F; test data(n&#x3D;50) set.seed(1000,sample.kind&#x3D;&quot;Rounding&quot;)N&lt;-nrow(iris)tr.idx&lt;-sample(1:N, size&#x3D;N*2&#x2F;3, replace&#x3D;FALSE)# split train data and test datatrain&lt;-data.matrix(iris[tr.idx,])test&lt;-data.matrix(iris[-tr.idx,])# feature &amp; Labels# 객체별 Feature와 Label로 분리# Label은 5번째 열에 위치train_feature&lt;-train[,-5]trainLabels&lt;-train[,5]test_feature&lt;-test[,-5]testLabels &lt;-test[,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Hidden Layer 구성<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Build nn model# first layersrequire(mxnet)my_input &#x3D; mx.symbol.Variable(&#39;data&#39;)fc1 &#x3D; mx.symbol.FullyConnected(data&#x3D;my_input, num.hidden &#x3D; 200, name&#x3D;&#39;fc1&#39;) # 200개의 뉴런 형성relu1 &#x3D; mx.symbol.Activation(data&#x3D;fc1, act.type&#x3D;&#39;relu&#39;, name&#x3D;&#39;relu1&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># second layersfc2 &#x3D; mx.symbol.FullyConnected(data&#x3D;relu1, num.hidden &#x3D; 100, name&#x3D;&#39;fc2&#39;) # 100개의 뉴런 형성relu2 &#x3D; mx.symbol.Activation(data&#x3D;fc2, act.type&#x3D;&#39;relu&#39;, name&#x3D;&#39;relu2&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Output Layer 구성<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># third layersfc3 &#x3D; mx.symbol.FullyConnected(data&#x3D;relu2, num.hidden &#x3D; 3, name&#x3D;&#39;fc3&#39;) # 3개로 분류(0,1,2)해야 하므로 3개의 Output 뉴런 생성# softmaxsoftmax &#x3D; mx.symbol.SoftmaxOutput(data&#x3D;fc3, name&#x3D;&#39;sm&#39;)# sofrmax 결과를 통해 가장 큰 값 선택<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>모델 학습<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># trainingmx.set.seed(123, sample.kind&#x3D;&quot;Rounding&quot;)device &lt;- mx.cpu()model &lt;- mx.model.FeedForward.create(softmax,                                     optimizer &#x3D; &quot;sgd&quot;, # Stochastic Gradient Descent                                     array.batch.size&#x3D;10, # 총 10개 그룹                                     num.round &#x3D; 500, learning.rate&#x3D;0.1,                                     X&#x3D;train_feature, y&#x3D;trainLabels, ctx&#x3D;device,                                     eval.metric &#x3D; mx.metric.accuracy,                                     array.layout &#x3D; &quot;rowmajor&quot;,                                     epoch.end.callback&#x3D;mx.callback.log.train.metric(100))graph.viz(model$symbol)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>모델 테스트<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># testingpredict_probs &lt;- predict(model, test_feature, array.layout &#x3D; &quot;rowmajor&quot;)predicted_labels &lt;- max.col(t(predict_probs)) - 1table(testLabels, predicted_labels)sum(diag(table(testLabels, predicted_labels)))&#x2F;length(predicted_labels)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-Convolutional-Neural-Networks"><a href="#2-Convolutional-Neural-Networks" class="headerlink" title="2. Convolutional Neural Networks"></a>2. Convolutional Neural Networks</h2><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>신경망 모델(Neural Net)<ul><li>입력값으로 객체의 특성(feature)을 받고, 출력된 값과 실제 값을 비교하는 과정을 거침(지도학습; Supervised Learning)</li><li>하나의 이미지는 수많은 픽셀들이 모여 형성하며, 특정 색에 해당하는 특정 값을 가짐<ul><li>이미지의 모든 픽셀값을 입력값으로 갖는 신경망 모델을 만들 수 있음</li></ul></li></ul></li></ul><h3 id="Intuitions"><a href="#Intuitions" class="headerlink" title="Intuitions"></a>Intuitions</h3><ul><li><p>고해상도 이미지의 경우 특성 feature 수가 너무 많아짐</p><ul><li>모든 뉴런이 모든 픽셀과 연결(fully connected)되어 있을 경우, 모델 학습에 큰 어려움이 있음</li><li>각 뉴런들이 이미지의 일부 특성 feature에만 연결될 수 있는 구조가 더 더 적합함</li><li>Convolution operation을 통해 구현 가능</li></ul></li><li><p>Convolutional Neural Network</p><ul><li>Feed forward Network: x<del>i</del>^n^을 구함<ul><li>Convilution</li><li>Max Pooling</li><li>Activation function</li></ul></li><li>Backpropagation: Error 최소화</li></ul></li></ul><h3 id="Concolution-Operation"><a href="#Concolution-Operation" class="headerlink" title="Concolution Operation"></a>Concolution Operation</h3><ul><li>임의의 값으로 설정된 filter가 전체 이미지 중 일부의 선형 결합을 계산<ul><li>각각 결괏값은 하나의 Neuron이 되며, filter는 해당 Neuron의 가중치과 됨</li><li>결괏값의 사이즈를 정하기 위해서는 Stride, Padding, Depth 고려 필요<ul><li>Stride: filter를 몇 칸 이동할지 결정</li><li>Padding: input 주변에 0으로 padding을 삽입</li><li>Depth number of filter: 3차원상의 neuron의 깊이를 결정</li></ul></li></ul></li></ul><h3 id="Pooling"><a href="#Pooling" class="headerlink" title="Pooling"></a>Pooling</h3><ul><li>Convolutional Layer 사이에 Pooling Layer를 넣는 방법이 많이 사용됨<ul><li>추출한 이미지에서 지역적인 부분 특징만 뽑아 다음 layer로 넘겨줌</li><li>이를 통해 ① 가중치의 수를 줄일 수 있으며, ② 과적합(overfitting)을 방지할 수 있음</li><li>대표적으로 가장 큰 값(Local Maxima)만을 뽑아내는 Max Pooling이 많이 사용됨</li></ul></li></ul><h3 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h3><ul><li>Modified National Institute of Standards and Technology</li><li>손으로 쓴 숫자를 인식하기 위해 사용되는 데이터<ul><li>28x28 pixel(784)의 흑백 이미지(0-255)들이 있음</li><li>0부터 9까지 총 70,000개의 손글씨 이미지가 있음</li></ul></li></ul><h3 id="CNN-in-R"><a href="#CNN-in-R" class="headerlink" title="CNN in R"></a>CNN in R</h3><ul><li>신경망 모델 생성을 위한 패키지: mxnet<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Load MNIST mn1# 28*28, 1 channel imagesmn1 &lt;- read.csv(&quot;mini_mnist.csv&quot;)set.seed(123,sample.kind&#x3D;&quot;Rounding&quot;)N&lt;-nrow(mn1)tr.idx&lt;-sample(1:N, size&#x3D;N*2&#x2F;3, replace&#x3D;FALSE)# split train data and test datatrain_data&lt;-data.matrix(mn1[tr.idx,])test_data&lt;-data.matrix(mn1[-tr.idx,])# 0과 1 사이에 분포하도록 Nomalized(0: 검정색 &#x2F; 255: 흰색)test&lt;-t(test_data[,-1]&#x2F;255)features&lt;-t(train_data[,-1]&#x2F;255)labels&lt;-train_data[,1]# data preprocessionfeatures_array &lt;- features# 입력 데이터의 차원을 설정(픽셀*객체 개수)# ncol(features): 학습 데이터 수(866)dim(features_array) &lt;- c(28,28,1,ncol(features))test_array &lt;- testdim(test_array) &lt;- c(28,28,1,ncol(test))ncol(features)table(labels)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Convolutional Layer 구성<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Build cnn model# first conv layersmy_input &#x3D; mx.symbol.Variable(&#39;data&#39;)conv1 &#x3D; mx.symbol.Convolution(data&#x3D;my_input, kernel&#x3D;c(4,4), stride&#x3D;c(2,2), pad&#x3D;c(1,1), num.filter &#x3D; 20, name&#x3D;&#39;conv1&#39;)relu1 &#x3D; mx.symbol.Activation(data&#x3D;conv1, act.type&#x3D;&#39;relu&#39;, name&#x3D;&#39;relu1&#39;)mp1 &#x3D; mx.symbol.Pooling(data&#x3D;relu1, kernel&#x3D;c(2,2), stride&#x3D;c(2,2), pool.type&#x3D;&#39;max&#39;, name&#x3D;&#39;pool1&#39;)# second conv layersconv2 &#x3D; mx.symbol.Convolution(data&#x3D;mp1, kernel&#x3D;c(3,3), stride&#x3D;c(2,2), pad&#x3D;c(1,1), num.filter &#x3D; 40, name&#x3D;&#39;conv2&#39;)relu2 &#x3D; mx.symbol.Activation(data&#x3D;conv2, act.type&#x3D;&#39;relu&#39;, name&#x3D;&#39;relu2&#39;)mp2 &#x3D; mx.symbol.Pooling(data&#x3D;relu2, kernel&#x3D;c(2,2), stride&#x3D;c(2,2), pool.type&#x3D;&#39;max&#39;, name&#x3D;&#39;pool2&#39;)# fully connectedfc1 &#x3D; mx.symbol.FullyConnected(data&#x3D;mp2, num.hidden &#x3D; 1000, name&#x3D;&#39;fc1&#39;)relu3 &#x3D; mx.symbol.Activation(data&#x3D;fc1, act.type&#x3D;&#39;relu&#39;, name&#x3D;&#39;relu3&#39;)fc2 &#x3D; mx.symbol.FullyConnected(data&#x3D;relu3, num.hidden &#x3D; 3, name&#x3D;&#39;fc2&#39;)# softmaxsm &#x3D; mx.symbol.SoftmaxOutput(data&#x3D;fc2, name&#x3D;&#39;sm&#39;)# trainingmx.set.seed(100,sample.kind&#x3D;&quot;Rounding&quot;)device &lt;- mx.cpu()model &lt;- mx.model.FeedForward.create(symbol&#x3D;sm,                                      optimizer &#x3D; &quot;sgd&quot;,                                     array.batch.size&#x3D;30,                                     num.round &#x3D; 70, learning.rate&#x3D;0.1,                                     X&#x3D;features_array, y&#x3D;labels, ctx&#x3D;device,                                     eval.metric &#x3D; mx.metric.accuracy,                                     epoch.end.callback&#x3D;mx.callback.log.train.metric(100))graph.viz(model$symbol)# testpredict_probs &lt;- predict(model, test_array)predicted_labels &lt;- max.col(t(predict_probs)) - 1table(test_data[, 1], predicted_labels)sum(diag(table(test_data[, 1], predicted_labels)))&#x2F;length(predicted_labels)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>네트워크 시각화 함수: graph.viz(model$symbol)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">graph.viz(model$symbol)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="3-텍스트-마이닝"><a href="#3-텍스트-마이닝" class="headerlink" title="3. 텍스트 마이닝"></a>3. 텍스트 마이닝</h2><h3 id="텍스트-마이닝이란"><a href="#텍스트-마이닝이란" class="headerlink" title="텍스트 마이닝이란?"></a>텍스트 마이닝이란?</h3><ul><li>텍스트마이닝(Text mining)<ul><li>웹페이지, 이메일, 소셜네트워크 기록 등 전자문서 파일로부터 특정 연관성(동시적으로 빈도 높은 단어 추출)을 분석하는 방법</li><li>다양한 방식의 알고리즘을 이용해 대용량의 텍스트로부터 트렌드와 관심어를 찾아내는 기법으로 사용</li></ul></li></ul><h3 id="텍스트-마이닝-필요-패키지"><a href="#텍스트-마이닝-필요-패키지" class="headerlink" title="텍스트 마이닝 필요 패키지"></a>텍스트 마이닝 필요 패키지</h3><ul><li>Natural language processing<ul><li>install.packages(‘NLP’)</li></ul></li><li>text mining package<ul><li>install.packages(‘tm’)</li></ul></li><li>visualizing<ul><li>install.packages(‘wordcloud’)</li></ul></li><li>color displaying<ul><li>install.packages(‘RColorBrewer’)</li></ul></li><li>Korean processing<ul><li>install.packages(‘KoNLP’)</li></ul></li><li>import twitter data<ul><li>install.packages(‘twitteR’)</li></ul></li></ul><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># set library (set in order)library(NLP)library(tm)library(RColorBrewer)library(wordcloud)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>사용 데이터: tm에 포함된 crude<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 20 new articles from Reuter- 21578 data setdata(crude)# To know abour crude datahelp(crude)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="텍스트-마이닝-함수"><a href="#텍스트-마이닝-함수" class="headerlink" title="텍스트 마이닝- 함수"></a>텍스트 마이닝- 함수</h3></li></ul><p>함수|설명 및 예제코드<br>|—|—|<br>str(x[[1]])|데이터 구조 정보(첫 번째 파일 구조) / str(crude[[1]])<br>content(x[[1]])|문서 내용(첫 번째 분서 내용)<br>meta(X)|메타정보(x에 기록된 저자, 날짜, id 등 정보) / meta(ctude[[1]])<br>inspect(X)|코퍼스, 텍스트, 문서행렬 등 정보 제공 / data(crude), inspect(crude[1:3]), inspect(crude[[1]]), tdm &lt;- TermDocumentMatrix(crude), inspect(tdm)<br>lapply(x, content)|파일 내용을 보여줌 / lapply(crude, content)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># information about the first file in crude datastr(crude[[1]])content(crude[[1]])meta(crude[[1]])lapply(crude, content)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># inspect functioninspect(crude[1:3]) inspect(crude[[1]]) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="텍스트-마이닝-전처리-함수"><a href="#텍스트-마이닝-전처리-함수" class="headerlink" title="텍스트 마이닝- 전처리 함수"></a>텍스트 마이닝- 전처리 함수</h3><p>함수|설명<br>|—|—|<br>tm_map(x, removePunctuation)|문장부호 제거(. , “” ‘’)<br>tm_map(x, stripWhitespace)|공백문자 제거<br>tm_map(x, removeNumbers)|숫자 제거</p><h3 id="텍스트-마이닝-실습"><a href="#텍스트-마이닝-실습" class="headerlink" title="텍스트 마이닝 실습"></a>텍스트 마이닝 실습</h3><ul><li><p>문장부호 없애기: tm_map(x, removePunctuation)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 1. remove punctuation in documnetcrude&lt;-tm_map(crude, removePunctuation)content(crude[[1]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>숫자 제거: tm_map(x, removeNumbers)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 2. remove numberscrude&lt;-tm_map(crude, removeNumbers)content(crude[[1]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>스톱워즈 제거: 언어별로 다르며 별도 지정 가능</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 3. remove stopwordscrude&lt;-tm_map(crude, function(x) removeWords(x,stopwords()))content(crude[[1]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>참고: 스톱워즈 리스트</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">stopwords() #stopwords(&quot;en&quot;) 174개, stopwords(&quot;SMART&quot;)&quot; 517개<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>문서 행렬 구성: TermDocumentMatrix(문서이름)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 4. contruct term-doucument matrix tdm&lt;-TermDocumentMatrix(crude)inspect(tdm)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>결과 해석</p><ul><li>DOCS 144: crude 문서 번호 144에 나오는 단어들의 빈도</li></ul></li><li><p>문서 행렬을 행렬로 변환</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 5. read tdm as a matrixm&lt;-as.matrix(tdm)head(m)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>단어의 빈도 순서로 정렬</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 6. sorting in high frequency to low frequency v&lt;-sort(rowSums(m), decreasing&#x3D;TRUE)v[1:10] # 가장 높은 것부터 [1:10]번까지<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>텍스트마이닝 수행</p><ul><li>단어 이름과 빈도를 결합한 행렬을 데이터 프레임으로 저장</li><li>crude 관련 기사 파일로부터 962개 단어를 분류해 빈도 계산<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 7. match with freq and word namesd&lt;-data.frame(word&#x3D;names(v), freq&#x3D;v)head(d) #가장 빈도 높은 단어 6개d[957:962, ] #가장 빈도 낮은 단어 6개<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>텍스트마이닝 결과 그리기</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 7. plot a word cloudwordcloud(d$word, d$freq)# help(wordcloud)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 7-1. Now lets try it with frequent words plotted first# par(mfrow &#x3D; c(1, 1),mar&#x3D;c(1,2,3,1))wordcloud(d$word,d$freq,c(8,.3),2,,FALSE,.1)# 7-2. color plot with frequent words plotted firstpal &lt;- brewer.pal(9,&quot;BuGn&quot;)pal &lt;- pal[-(1:4)]wordcloud(d$word,d$freq,c(8,.3),2,,FALSE,,.15,pal)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/ML/">ML</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/">딥러닝</category>
      
      <category domain="https://ne-choi.github.io/tags/%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%A7%88%EC%9D%B4%EB%8B%9D/">텍스트마이닝</category>
      
      
      <comments>https://ne-choi.github.io/2020/12/24/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A5_%EB%94%A5%EB%9F%AC%EB%8B%9D%EA%B3%BC_%ED%85%8D%EC%8A%A4%ED%8A%B8_%EB%A7%88%EC%9D%B4%EB%8B%9D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝 기법과 R 프로그래밍 2: ⅩⅤ. 주성분 분석과 부분 최소자승법</title>
      <link>https://ne-choi.github.io/2020/12/23/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A4_%EC%A3%BC%EC%84%B1%EB%B6%84_%EB%B6%84%EC%84%9D%EA%B3%BC_%EB%B6%80%EB%B6%84_%EC%B5%9C%EC%86%8C%EC%9E%90%EC%8A%B9%EB%B2%95/</link>
      <guid>https://ne-choi.github.io/2020/12/23/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A4_%EC%A3%BC%EC%84%B1%EB%B6%84_%EB%B6%84%EC%84%9D%EA%B3%BC_%EB%B6%80%EB%B6%84_%EC%B5%9C%EC%86%8C%EC%9E%90%EC%8A%B9%EB%B2%95/</guid>
      <pubDate>Wed, 23 Dec 2020 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ⅩⅤ-주성분-분석과-부분-최소자승법&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  </li></ul><h1 id="ⅩⅤ-주성분-분석과-부분-최소자승법"><a href="#ⅩⅤ-주성분-분석과-부분-최소자승법" class="headerlink" title="ⅩⅤ. 주성분 분석과 부분 최소자승법"></a>ⅩⅤ. 주성분 분석과 부분 최소자승법</h1><h2 id="1-주성분분석"><a href="#1-주성분분석" class="headerlink" title="1. 주성분분석"></a>1. 주성분분석</h2><h3 id="주성분분석-PCA"><a href="#주성분분석-PCA" class="headerlink" title="주성분분석(PCA)"></a>주성분분석(PCA)</h3><ul><li><p>주성분분석(Principle Component Analysis)</p><ul><li>다변량 분석기법</li><li>‘주성분’이라고 불리는 선형조합으로 표현하는 기법</li><li>주성분은 공분산(X^T^X)로부터 eigenvector와 eigenvalue를 도출하여 계산됨</li></ul></li><li><p>주성분 간의 수직 관계</p><ul><li>1st 주성분(PC1): 독립변수들의 변동(분산)을 가장 많이 설명하는 성분</li><li>2nd 주성분(PC2): PC1과 수직인 주성분(1st 주성분이 설명하지 못하는 변동을 두 번째로 설명하는 성분)</li></ul></li></ul><ul><li>iris 데이터(4개변수)의 주성분 도출: 차원축소&amp;예측력 향상 목적<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">iris&lt;-read.csv(&quot;data&#x2F;week15_1&#x2F;iris.csv&quot;)iris$Species&lt;-as.factor(iris$Species)attach(iris)head(iris)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>독립변수 간 상관관계 확인<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Check correlationcor(iris[1:4])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>결과 확인<ul><li>0.96, 0.87 등 높은 상관계수가 관찰됨</li></ul></li></ul><h3 id="주성분분석을-위한-함수"><a href="#주성분분석을-위한-함수" class="headerlink" title="주성분분석을 위한 함수"></a>주성분분석을 위한 함수</h3><ul><li>prcomp(독립변수들, center= , scale= )<ul><li>옵션을 주지 않으면 center=T, scale=F</li><li>center=T, scale=T는 변수들의 평균을 빼고 편차로 나누어 표준화한다는 의미<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 1.PCA(center&#x3D;T-&gt;mean&#x3D;0, scale.&#x3D;T-&gt;variance&#x3D;1)ir.pca&lt;-prcomp(iris[,1:4],center&#x3D;T,scale.&#x3D;T)ir.pcasummary(ir.pca)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>결과 해석<ul><li>PC1 = 0.5211xSepal.Length - 0.2693xSepal.Width + 0.5804xPetal.Length + 0.5649xPetal.Width</li><li>summary의 Proportion of Variance<ul><li>전체 분산 중 각 주성분이 설명하는 비율</li><li>PC1: 전체 분산의 72.96%를 설명</li><li>PC2: 22.85%, PC3: 3.67%, PC4: 0.5%<br>→ 누적설명비율을 보면, PC1과 PC2 두 성분으로 전체 분산의 95.81%를 설명</li></ul></li></ul></li></ul><h3 id="최적-주성분-수-찾기"><a href="#최적-주성분-수-찾기" class="headerlink" title="최적 주성분 수 찾기"></a>최적 주성분 수 찾기</h3><ul><li>scree plot을 그려보고 급격히 떨어지기 전까지의 PC를 선택<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 2.scree plot : to choose the number of componentsplot(ir.pca,type&#x3D;&quot;l&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>3rd PC에서 설명력이 급격하게 떨어짐</li><li>기울기가 꺾이는 PC3을 elbow point라고 부름<br>→ PC1, PC2까지 사용하는 것을 추천</li></ul></li></ul><ul><li>BAR Chart로 보기: screeplt(pca 결과)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># either way to draw scree plotscreeplot(ir.pca)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>PC계산 = X_data(n* p) % * % PCA_weight(p*p)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># %*%: 행렬의 계산# 3. Calculate component &#x3D; x_data%*% PCA_weightPRC&lt;-as.matrix(iris[,1:4])%*%ir.pca$rotationhead(PRC)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>PRC는 n*p행렬, 여기서는 150x4</li><li>PC1 = 0.5211xSepal.Length - 0.2693xSepal.Width + 0.5804xPetal.Length + 0.5649xPetal.Width</li></ul></li></ul><h3 id="주성분을-이용한-분류모형"><a href="#주성분을-이용한-분류모형" class="headerlink" title="주성분을 이용한 분류모형"></a>주성분을 이용한 분류모형</h3><ul><li>iris data → iris.pc data 구성<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 4. classification using principal components# make data with componentsiris.pc&lt;-cbind(as.data.frame(PRC), Species)iris.pc$Species&lt;-as.factor(iris.pc$Species)head(iris.pc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>주성분을 이용한 서포트벡터머신 수행<ul><li>주성분이 input<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 5. support vector machine# install.packages(&quot;e1071&quot;)library (e1071)# classify all data using PC1-PC4 using support vector machinem1&lt;- svm(Species ~., data &#x3D; iris.pc, kernel&#x3D;&quot;linear&quot;)# m2&lt;- svm(Species ~PC1+PC2, data &#x3D; iris.pc, kernel&#x3D;&quot;linear&quot;)summary(m1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>서포트벡터머신 결과 vs PCA 결과<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># predict class for all data x&lt;-iris.pc[, -5]pred &lt;- predict(m1, x)# check accuracy between true class and predicted classy&lt;-iris.pc[,5]table(pred, y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>주성분을 이용한 분류의 오분류율: 2/150 = 0.013(1.33%)<br>→ 이 데이터에서는 SVM(오분류율: 4/150 = 2.66%)보다 PCA 분류가 오분류율이 적다</li></ul></li></ul><h2 id="2-주성분-회귀분석"><a href="#2-주성분-회귀분석" class="headerlink" title="2. 주성분 회귀분석"></a>2. 주성분 회귀분석</h2><h3 id="주성분회귀"><a href="#주성분회귀" class="headerlink" title="주성분회귀"></a>주성분회귀</h3><ul><li><p>주성분회귀(Principle Component Regression)</p><ul><li><p>독립변수 차원을 줄이기 위해 사용 가능, 주성분을 이용해 타겟변수(Y)의 설명력(예측력)을 높일 수 있음</p><ul><li>Y = b<del>0</del> + b<del>1</del>PC<del>1</del> + b<del>2</del>PC<del>2</del></li></ul></li><li><p>독립변수의 전체분산을 가장 잘 설명하는 component를 사용해 독립변수 간 다중공선성 문제를 해결할 수 있음</p></li><li><p>주요 component score가 Y의 예측력을 보장하지는 않음</p><ul><li>주요 component score는 X의 분산을 가장 잘 설명하는 방향의 축을 기준으로 변환된 것으로 Y와의 관계에는 상관성이 없을 수도 있음</li></ul></li></ul></li><li><p><strong>주성분 회귀 분석 순서</strong></p><ol><li>데이터에 다중공선성이 있는지 체크</li><li>주성분 분석을 위한 데이터 전처리(mean-centering or scaling)</li><li>주성분분석</li><li>주성분 개수 결정</li><li>주성분으로 회귀분석모형 수행  </li></ol></li><li><p><strong>주성분회귀분석</strong></p><ul><li>여러 변수를 주성분이라는 새로운 변수로 축소하여 회귀모형 수행</li><li>다중공선성 문제 해결 가능</li><li>적절한 주성분을 사용해 회귀모형 구현 필요</li><li>주성분 순서대로 Y변수에 대한 설명력이 높은 것은 아님  </li></ul></li><li><p>wine 데이터: 독립변수 9개, 타겟변수 Aroma rating</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">wine&lt;-read.csv(&quot;data&#x2F;week15_2&#x2F;wine_aroma.csv&quot;)attach(wine)head(wine)# Check correlationcor(wine[1:9])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>주성분분석</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 1. PCA(center&#x3D;T → mean&#x3D;0, scale.&#x3D;T → variance&#x3D;1)wi.pca&lt;-prcomp(wine[1:9], center&#x3D;T, scale.&#x3D;F)wi.pcasummary(wi.pca)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>최적 주성분 수 찾기</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 2.scree plot : to choose the number of componentsplot(wi.pca,type&#x3D;&quot;l&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>결과 해석</p><ul><li>2rd PC에서 설명력이 급격히 떨어짐<br>→ 이 경우 PC1만 사용해도 됨</li></ul></li><li><p>PC 계산</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 3. calculate component&#x3D;x_data%*% PCA weightPRC&lt;-as.matrix(wine[,1:9])%*%wi.pca$rotationhead(PRC)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>wine.pc data 구성</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 4. Principal component regression# make data with componentswine.pc&lt;-cbind(as.data.frame(PRC),Aroma)head(wine.pc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="주성분을-이용한-회귀모형"><a href="#주성분을-이용한-회귀모형" class="headerlink" title="주성분을 이용한 회귀모형"></a>주성분을 이용한 회귀모형</h3><ul><li><p>다중회귀모형과 주성분회귀분석</p><ul><li><p>다중회귀모형</p><ul><li>Y = β<del>0</del> + β<del>1</del>X<del>1</del> + β<del>2</del>X<del>2</del> + … + β<del>K</del>X<del>K</del></li></ul></li><li><p>주성분회귀모형</p><ul><li>Y = β<del>0</del> + β<del>1</del>PC<del>1</del> + β<del>2</del>PC<del>2</del> + …</li><li>타겟값(Y)를 가장 잘 예측하는 선형모형</li></ul></li></ul></li></ul><ul><li>주성분을 이용한 회귀분석모형 1(WINE DATA: PC1-PC4 포함)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># regression(PC1-PC4)fit1&lt;-lm(Aroma~PC1+PC2+PC3+PC4, data&#x3D;wine.pc)fit1summary(fit1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>PC3의 p-value는 0.7로 매우 높음 → 별로 중요하지 않음</li><li>R^2^= .494</li></ul></li></ul><ul><li>주성분을 이용한 회귀분석모형 2(WINE DATA: PC1-PC4 포함)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># regression(PC1-PC9)fit2&lt;-lm(Aroma~., data&#x3D;wine.pc)fit2summary(fit2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>R^2^= .741</li></ul></li></ul><ul><li>일반 회귀분석모형(wine data: raw data)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Multiple regression with the raw datafit3&lt;-lm(Aroma ~., data&#x3D;wine)summary(fit3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>잔차에 대한 가정 확인<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># residual diagnostic plot layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs&#x2F;page plot(fit3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-Partial-Least-Square-Regression"><a href="#3-Partial-Least-Square-Regression" class="headerlink" title="3. Partial Least Square Regression"></a>3. Partial Least Square Regression</h2><h3 id="최소자승회귀법-PLS"><a href="#최소자승회귀법-PLS" class="headerlink" title="최소자승회귀법(PLS)"></a>최소자승회귀법(PLS)</h3><ul><li>주성분분석의 component vs 최소자승회귀법의 component<ul><li>PLS는 공정변수의 변동을 설명하는 벡터 t를 구하는 데 X 정보만을 이용하지 않고 타겟변수 y 정보를 동시에 고려하여 도출<ul><li>t<del>1</del>(PLS): Y쪽으로 Shift</li></ul></li><li>Chemometrics, Marketing 분야의 고차원데이터, 독립변수 간 상관성 높은 데이터에 적용</li></ul></li></ul><ul><li>PLS 수행을 위한 패키지 설치<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># install package for Partial Least Square #install.packages(&#39;pls&#39;)library(pls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>사용 데이터 설명<ul><li>가솔린 데이터(근적외선 흡광고, 60개의 가솔린 표본)<ul><li>독립변수 차원:401</li><li>타겟변수(Y): 옥탄가(octane numbers)</li></ul></li></ul></li></ul><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">data(gasoline)#help(&quot;gasoline&quot;)attach(gasoline)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>데이터 요약 설명(타겟변수 Y: 옥탄가)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># descriptive statisticspar(mfrow&#x3D;c(1,1))hist(octane, col&#x3D;3)summary(octane)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>옥탄가의 최솟값 83.4, 최댓값 89.6</li><li>히스토그램은 옥탄가의 분포를 보여줌</li></ul></li></ul><ul><li><p>훈련데이터와 검증데이터(50개/10개)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># train and test setgasTrain &lt;- gasoline[1:50, ]gasTest &lt;- gasoline[51:60, ]# 1.check how many principal componentsga.pca&lt;-prcomp(gasoline$NIR,center&#x3D;T,scale.&#x3D;F)ga.pcasummary(ga.pca)plot(ga.pca,type&#x3D;&quot;l&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>결과 해석</p><ul><li>최소 5개 정도 사용하기</li></ul></li><li><p>PLS함수: plsr</p><ul><li>plsr(타겟변수~독립변수, ncomp= , data= )</li><li>옵션사항<ul><li>ncomp: 잠재변수 수</li><li>validation=c(“none”, “CV”, “LOO”) (CV: cross-validaton, LOO: leave-one-out)<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># pls model by training set (find LV by leave-one-out) # 1. start with 10 component PLS modelgas1 &lt;- plsr(octane ~ NIR, ncomp &#x3D; 10, data &#x3D; gasTrain, validation &#x3D; &quot;LOO&quot;)# NIR에 401차원의 값이 들어있음, ncomp: 잠재변수의 수summary(gas1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>결과 해석</p><ul><li>CV<ul><li>1개의 잠재변수 → 10개의 잠재변수</li><li>1개의 잠재변수: 평균오차 1.357, 2개의 잠재변수: 평균오차 0.297 …</li></ul></li><li>TRAINING<ul><li>X들의 분산설명비율: 2개의 LV로 85.58%</li><li>Y값의 변동분 설명비율: 96.85% 설명</li></ul></li></ul></li></ul><ul><li>PLS 모형에서의 최적 잠재변수 수<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 2. to choose the number of componentsplot(RMSEP(gas1), legendpos &#x3D; &quot;topright&quot;, pch&#x3D;46, cex&#x3D;1.0, main&#x3D;&quot;Cross-validation for # of LV&quot;)# for gasoline data, # of LV&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>최적 잠재변수의 수는 RMSEP가 최저이고 변화가 없는 지점에서 결정<ul><li>2개의 components (LV)를 추천</li><li>예측모형 평가척도: 평균오차</li></ul></li></ul></li></ul><ul><li>최적 PLS 모형의 실제값과 예측값 산점도<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 3. Display the PLS model with LV&#x3D;2# scatterplot with true and predictedplot(gas1, ncomp &#x3D; 2, asp &#x3D; 1, line &#x3D; TRUE, cex&#x3D;1.5,main&#x3D;&quot;Measured vs Predicted&quot;, xlab&#x3D;&quot;Measured&quot; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>잠재변수 수에 따른 전체분산의(독립변수들) 설명 정도<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Check explained variances proportion for Xexplvar(gas1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>2개의 잠재변수가 전체 분산의 85.58% 설명</li></ul></li></ul><ul><li><p>검증데이터의 RMSEP 계산</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 4. predicted Y for test dataypred&lt;-predict(gas1, ncomp &#x3D; 2, newdata &#x3D; gasTest)y&lt;-gasoline$octane[51:60]# check : RMSEP for test datasqrt((sum(y-ypred)^2)&#x2F;10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># 5. compare with the one from #4 : RMSEP for test dataRMSEP(gas1, newdata &#x3D; gasTest)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>PLS 예측값 내보내기</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># output of y and predicted yout1&lt;-cbind(y, ypred)# data exportingwrite.csv(out1,file&#x3D;&quot;out1.csv&quot;, row.names &#x3D; FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/ML/">ML</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%A3%BC%EC%84%B1%EB%B6%84%EB%B6%84%EC%84%9D/">주성분분석</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%B5%9C%EC%86%8C%EC%9E%90%EC%8A%B9%EB%B2%95/">최소자승법</category>
      
      
      <comments>https://ne-choi.github.io/2020/12/23/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A4_%EC%A3%BC%EC%84%B1%EB%B6%84_%EB%B6%84%EC%84%9D%EA%B3%BC_%EB%B6%80%EB%B6%84_%EC%B5%9C%EC%86%8C%EC%9E%90%EC%8A%B9%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝 기법과 R 프로그래밍 2: ⅩⅣ. 연관규칙과 로지스틱회귀분석</title>
      <link>https://ne-choi.github.io/2020/12/22/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A3_%EC%97%B0%EA%B4%80%EA%B7%9C%EC%B9%99%EA%B3%BC_%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D/</link>
      <guid>https://ne-choi.github.io/2020/12/22/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A3_%EC%97%B0%EA%B4%80%EA%B7%9C%EC%B9%99%EA%B3%BC_%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D/</guid>
      <pubDate>Tue, 22 Dec 2020 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pabi.smartlearn.io/&quot;&gt;POSTECH MOOC&lt;/a&gt; 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ⅩⅣ-연관규칙과-로지스틱회귀분석&quot;&gt;&lt;a href=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="https://pabi.smartlearn.io/">POSTECH MOOC</a> 중, 머신러닝기법과 R프로그래밍 Ⅱ 과정입니다.  </li></ul><h1 id="ⅩⅣ-연관규칙과-로지스틱회귀분석"><a href="#ⅩⅣ-연관규칙과-로지스틱회귀분석" class="headerlink" title="ⅩⅣ. 연관규칙과 로지스틱회귀분석"></a>ⅩⅣ. 연관규칙과 로지스틱회귀분석</h1><h2 id="1-연관규칙-분석-Ⅰ"><a href="#1-연관규칙-분석-Ⅰ" class="headerlink" title="1. 연관규칙 분석 Ⅰ"></a>1. 연관규칙 분석 Ⅰ</h2><h3 id="연관규칙"><a href="#연관규칙" class="headerlink" title="연관규칙"></a>연관규칙</h3><ul><li><p>연관규칙(Association Rule)</p><ul><li>대용량 데이터베이스의 트랜잭션에서 빈번하게 발생하는 패턴을 발견</li><li>거래 간의 상호 관련성을 분석</li></ul></li><li><p>연관규칙 예시</p><ul><li>신발을 구매하는 고객의 10%는 양말을 동시에 구매한다.</li><li>빵과 우유를 고매한 고객의 50%가 쥬스도 함께 구매한다.</li></ul></li><li><p>용어 설명</p><ul><li><strong>시장바구니(market basket)</strong><ul><li>고객이 구매한 물품에 관련한 정보(구매 시기, 지불 방법, 매장 정보 포함)</li></ul></li><li><strong>트렌잭션(transaction)</strong><ul><li>고객이 거래한 정보를 하나의 트랜잭션이라고 함</li></ul></li><li><strong>시장바구니 분석(market basket analysis)</strong><ul><li>시장바구니 데이터로부터 연관규칙 탐색 분석</li></ul></li></ul></li></ul><h3 id="연관규칙-평가-척도"><a href="#연관규칙-평가-척도" class="headerlink" title="연관규칙 평가 척도"></a>연관규칙 평가 척도</h3><ul><li><p><strong>지지도(Support)</strong></p><ul><li>$\frac{A와 B를 동시에 포함하는 거래 수}{전체 거래 수}$  </li></ul></li><li><p><strong>신뢰도(Confidence)</strong></p><ul><li>$\frac{A와 B를 동시에 포함하는 거래 수}{A를 포함하는 거래 수}$  </li></ul></li><li><p><strong>향상도(Lift)</strong></p><ul><li>$\frac{A와 B를 동시에 포함하는 거래 수}{A를 포함하는 거래 수 x B를 포함하는 거래 수}$</li></ul></li></ul><br>  - 지지도가 어느 정도 수준에 도달해야 함- 신뢰도가 높을 경우에는 두 항목 A → B에서 항목 B의 확률이 커야 연관규칙이 의미가 있음- 향상도가 1보다 큰 값을 주어야 유용한 정보를 준다고 볼 수 있음<h3 id="향상도-Lift"><a href="#향상도-Lift" class="headerlink" title="향상도(Lift)"></a>향상도(Lift)</h3><ul><li>향상도: A가 거래된 경우, 그 거래가 B를 포함하는 경우와 B가 임의로 거래되는 경우의 비율</li></ul><table><thead><tr><th align="center">향상도</th><th align="center">의미</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">두 항목의 거래 발생이 독립적인 관계</td></tr><tr><td align="center">&lt; 1</td><td align="center">두 항목의 거래 발생이 서로 음의 상관관계</td></tr><tr><td align="center">&gt; 1</td><td align="center">두 항목의 거래 발생이 서로 양의 상관관계</td></tr></tbody></table><ul><li>정리<ul><li>각 항목의 구매가 상호관련이 없다면 P(B|A)가 P(B)와 같아 향상도는 1이 됨</li><li>1보다 크면 결과 예측에 관해 우연적 기회(random chance)보다 우수함을 의미</li><li>향상도 값이 클수록 A의 거래 여부가 B의 거래 여부에 큰 영향을 미침</li></ul></li></ul><h3 id="연관규칙-수행-패키지"><a href="#연관규칙-수행-패키지" class="headerlink" title="연관규칙 수행 패키지"></a>연관규칙 수행 패키지</h3><ul><li>arules</li><li>데이터가 transaction data로 Dataframe과 구조가 다름<ul><li>ID, 거래된 아이템, 거래된 일자 정보 등<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># association rule analysis package#install.packages(&quot;arules&quot;)library(arules)# data import-&gt; make transaction datadvd1&lt;-read.csv(&quot;data&#x2F;week14_1&#x2F;dvdtrans.csv&quot;)dvd1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>arules package를 통해 transaction 데이터 변환과 연관규칙 분석 수행</li><li>Split을 통해 ID별로 item을 as함수를 통해 transaction 데이터로 변환<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">dvd.list&lt;-split(dvd1$Item,dvd1$ID)dvd.listdvd.trans&lt;-as(dvd.list,&quot;transactions&quot;)dvd.transinspect(dvd.trans)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>transaction 데이터의 요약<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># summary of dvd.transsummary(dvd.trans)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>10 트랜잭션 / 10 항목</li><li>밀도(density): 0.3 ← 10*10 cell 중, 30%dml cell에 거래가 발생해 데이터가 있다는 뜻</li><li>거래 항목 중 Gladiator = 7번, Patriot = 6번, Six Sense = 6번 순으로 나왔음을 의미</li></ul></li></ul><h3 id="연관규칙-수행함수"><a href="#연관규칙-수행함수" class="headerlink" title="연관규칙 수행함수"></a>연관규칙 수행함수</h3><ul><li>apriori(transaction, parameter=list(support=0.0#, confidence=0.##))<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># for running dvdtras datadvd_rule&lt;-apriori(dvd.trans,                  parameter &#x3D; list(support&#x3D;0.2,confidence &#x3D; 0.20,minlen &#x3D; 2))dvd_rule# same code with short command# dvd_rule&lt;-apriori(dvd.trans, parameter &#x3D; list(supp&#x3D;0.2,conf&#x3D; 0.20,minlen &#x3D; 2))  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>결과 해석<ul><li>support=0.2, confidence=0.2 이상인 13개의 연관규칙 생성</li></ul></li></ul><h3 id="연관규칙의-해석"><a href="#연관규칙의-해석" class="headerlink" title="연관규칙의 해석"></a>연관규칙의 해석</h3><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">summary(dvd_rule)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">inspect(dvd_rule)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>결과 해석</p><ul><li>지지도: Green Mile과 Sixth Sense를 동시에 구매할 확률: 20%</li><li>신뢰도: Green Mile을 구매한 경우는 모두 Sixth Sense를 구매: 100%</li><li>향상도: Green Mile을 구매하면 Six Sense 구매비율이 1.667배 향상됨<br></li></ul></li><li><p>그래프로 표현한 연관규칙: 지지도 &gt; 0.2 항목들의 상대빈도</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Bar chart for support&gt;0.2itemFrequencyPlot(dvd.trans,support&#x3D;0.2,main&#x3D;&quot;item for support&gt;&#x3D;0.2&quot;, col&#x3D;&quot;green&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="2-연관규칙-분석-Ⅱ"><a href="#2-연관규칙-분석-Ⅱ" class="headerlink" title="2. 연관규칙 분석 Ⅱ"></a>2. 연관규칙 분석 Ⅱ</h2><h3 id="데이터-설명-Groceries"><a href="#데이터-설명-Groceries" class="headerlink" title="데이터 설명(Groceries)"></a>데이터 설명(Groceries)</h3><ul><li>Groceries data(“arules” package에 탑재된 데이터)<ul><li>data(“Groceries”)로 불러옴</li><li>실제 식료품점의 30일치 transaction 데이터</li><li>9835 트랜젝션 / 169 항목</li><li>밀도: 0.026% ← 9835*169 cell 중, 0.026%의 cell에 거래가 발생하여 숫자가 차 있다는 의미</li><li>Element(itemset/transaction) length distribution: 하나의 거래 장바구니(row 1개당)에 item의 개수별로 몇 번의 거래가 있었는지 나타냄</li></ul></li></ul><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># association rule analysis package# install.packages(&quot;arules&quot;)library(arules)#association rule analysisdata(&quot;Groceries&quot;)summary(Groceries)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="지지도에-따른-시각화"><a href="#지지도에-따른-시각화" class="headerlink" title="지지도에 따른 시각화"></a>지지도에 따른 시각화</h3><ul><li><p>지지도 5% 이상의 item 막대 그래프</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Bar chart for item with support&gt;&#x3D;5%itemFrequencyPlot(Groceries,supp&#x3D;0.05,main&#x3D;&quot;item for support&gt;&#x3D;5%&quot;, col&#x3D;&quot;green&quot;, cex&#x3D;0.8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>지지도 상위 20개 막대 그래프</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Bar chart for the top support 20 itemsitemFrequencyPlot(Groceries,topN&#x3D;20,main&#x3D;&quot;support top 20 items&quot;, col&#x3D;&quot;coral&quot;, cex&#x3D;0.8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="연관규칙-분석결과"><a href="#연관규칙-분석결과" class="headerlink" title="연관규칙 분석결과"></a>연관규칙 분석결과</h3></li><li><p>연관규칙분석</p><ul><li>support, confidence, length는 minimum값으로 너무 높게 잡을 경우 연관규칙 분석이 되지 않음<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># Association rule with support&gt;5%, confidence&gt;20% in minimum length 2Grocery_rule&lt;-apriori(data&#x3D;Groceries,                      parameter &#x3D; list(support&#x3D;0.05,                                       confidence &#x3D; 0.20,                                       minlen &#x3D; 2))Grocery_rule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>연관규칙 조회 및 평가</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">#analyzing resultsummary(Grocery_rule)inspect(Grocery_rule)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>결과 해석</p><ul><li>향상도 최솟값이 1보다 큼</li><li>6개의 rules이 items 2개로 구성되어 있음</li></ul></li><li><p>연관규칙: 향상도(lift) 순서로 정렬</p><ul><li>sort() 함수를 통해 분석가가 보려는 기준으로 정렬하여 조회 가능<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># sorting by Liftinspect(sort(Grocery_rule,by&#x3D;&quot;lift&quot;))# inspect(sort(Grocery_rule, by&#x3D;&quot;support&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>연관규칙: 품목별 연관성 탐색</p><ul><li>subset() 함수를 통해 원하는 item이 포함된 연관규칙만 선별해 조회 가능</li><li>%in%. %pin%, %ain% 등 옵션 이용 가능<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># searching association for interesting itemsrule_interest&lt;-subset(Grocery_rule, items %in% c(&quot;yogurt&quot;,&quot;whole milk&quot;))inspect(rule_interest)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>연관규칙결과를 data.frame으로 저장</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># save as dataframeGrocery_rule_df&lt;-as(Grocery_rule,&quot;data.frame&quot;)Grocery_rule_df#saving results as csv filewrite(Grocery_rule, file&#x3D;&quot;Grocery_rule.csv&quot;,      sep&#x3D;&quot;,&quot;,      quote&#x3D;TRUE,      row.names&#x3D;FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-로지스틱회귀분석"><a href="#3-로지스틱회귀분석" class="headerlink" title="3. 로지스틱회귀분석"></a>3. 로지스틱회귀분석</h2><h3 id="로지스틱-회귀모형"><a href="#로지스틱-회귀모형" class="headerlink" title="로지스틱 회귀모형"></a>로지스틱 회귀모형</h3><ul><li><p>로지스틱회귀분석(logistic regression)</p><ul><li><p>종속변수가 범주형인 경우 사용</p><ul><li>2개의 범주(양성/음성, 불량/양품 등) 또는 3개 이상의 범주를 다룸</li><li>3개 이상 범주일 경우, 서열형 데이터(ordinal data), 명목형 데이터(nominal data)로 나누어 다른 모형 사용</li></ul></li><li><p>log it(p) = β<del>0</del> + β<del>1</del>X</p><ul><li>회귀계수 β<del>1</del>의 의미가 선형회귀모형에서와는 다름</li><li>β<del>1</del>: X가 한 단위 증가할 때, logit(P)(승산비) 로그값의 증가분을 이야기함 → 승산비가 배로 증가함을 의미</li></ul></li><li><p>Y가 (0/1, cancer/no cancer, present/absent) 등의 값을 취하는 경우, 독립변수들과 Y 관계를 설명하기 위해 로지스틱 함수 사용</p><ul><li>f(y) = $\frac{1}{1 + e^-y^}$</li></ul></li></ul></li></ul><h3 id="로지스틱-회귀모형-실습"><a href="#로지스틱-회귀모형-실습" class="headerlink" title="로지스틱 회귀모형 실습"></a>로지스틱 회귀모형 실습</h3><ul><li><p>데이터 살펴보기</p><ul><li>암 재발 확률 구하기</li><li>Y: Remiss(0,1)</li><li>6 explanatory variables: risk factor related cancer remission(Cell, Smear, infill, Li, blast, temp)</li></ul></li><li><p>로짓 변환을 통해 p헷(확률값)을 계산한 후, 확률값을 보고 0,5  또는 최적 임계치를 기준으로 구분하는 것</p></li><li><p>데이터 불러오기</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># remiss datare &lt;- read.csv(&quot;data&#x2F;week14_3&#x2F;remiss.csv&quot;)head(re)str(re)attach(re)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>로지스틱회귀모형 실시(y는 binomial variable, logit function 선택)</p><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;">#logistic regression (full model)t1&lt;-glm(remiss~cell+smear+infil+li+blast+temp, data&#x3D;re,family&#x3D;binomial(logit))summary(t1)cor(re)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>결과 해석</p><ul><li>smear, infil은 거의 1에 가까운 값을 보임 → 둘 중 하나 제거하는 것이 좋음</li><li>blast의 p-value가 1에 가까움: blast 변수를 추가적으로 설명할 수 있는 부분이 거의 없다 → 제거하는 것이 좋음</li></ul></li><li><p>smear, blast 삭제</p></li><li><p>로지스틱 회귀모형의 평가 척도: -2Log(Deviance), AIC, likelihood ratio test(G^2)</p><ul><li>AIC가 낮은 것이 좋은 모델이라고 평가<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># logisitic regression (reduced model 1)t2&lt;-glm(remiss~cell+smear+li+temp, data&#x3D;re,family&#x3D;binomial(logit))summary(t2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># logisitic regression (reduced model 2)t3&lt;-glm(remiss~cell+li+temp, data&#x3D;re,family&#x3D;binomial(logit))summary(t3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>결과 해석</p><ul><li>logit(P) = 67.63 + 9.65Cell + 3.87Li - 82.07Temp<ul><li>e.g. Li의 beta1 해석: li 한 단위 증가 시 재발 확률은 exp(3.867) = 47.79배  </li></ul></li></ul></li></ul><ul><li>예측확률값 출력: 원래 데이터 + 예측확률값<pre class="line-numbers language-&#123;r&#125;" data-language="&#123;r&#125;"><code class="language-&#123;r&#125;"># output data with predicted probabilitydat1_pred&lt;-cbind(re,t3$fitted.values)write.table(dat1_pred,file&#x3D;&quot;dat1_pred.csv&quot;, row.names&#x3D;FALSE, sep&#x3D;&quot;,&quot;, na&#x3D;&quot; &quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content:encoded>
      
      
      <category domain="https://ne-choi.github.io/categories/Study/">Study</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/categories/Study/Postech/ML/">ML</category>
      
      
      <category domain="https://ne-choi.github.io/tags/Postech/">Postech</category>
      
      <category domain="https://ne-choi.github.io/tags/%EC%97%B0%EA%B4%80%EA%B7%9C%EC%B9%99/">연관규칙</category>
      
      <category domain="https://ne-choi.github.io/tags/%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D/">로지스틱회귀분석</category>
      
      
      <comments>https://ne-choi.github.io/2020/12/22/Study/Postech/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9DR/%E2%85%A9%E2%85%A3_%EC%97%B0%EA%B4%80%EA%B7%9C%EC%B9%99%EA%B3%BC_%EB%A1%9C%EC%A7%80%EC%8A%A4%ED%8B%B1%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
